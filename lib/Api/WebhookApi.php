<?php
/**
 * WebhookApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WebhookApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebhookApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        "createWebHook" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "deleteWebHook" => ["application/json"],
        "getWebHook" => ["application/json"],
        "getWebHooks" => ["application/json"],
        "pingWebHook" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateWebHook" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createWebHook
     *
     * Create a new Webhook
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebHook
     */
    public function createWebHook(
        $cloud_pk,
        $web_hook_request,
        string $contentType = self::contentTypes["createWebHook"][0]
    ) {
        list($response) = $this->createWebHookWithHttpInfo(
            $cloud_pk,
            $web_hook_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createWebHookWithHttpInfo
     *
     * Create a new Webhook
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebHook, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWebHookWithHttpInfo(
        $cloud_pk,
        $web_hook_request,
        string $contentType = self::contentTypes["createWebHook"][0]
    ) {
        $request = $this->createWebHookRequest(
            $cloud_pk,
            $web_hook_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\WebHook" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\WebHook" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\WebHook",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\WebHook";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\WebHook",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWebHookAsync
     *
     * Create a new Webhook
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWebHookAsync(
        $cloud_pk,
        $web_hook_request,
        string $contentType = self::contentTypes["createWebHook"][0]
    ) {
        return $this->createWebHookAsyncWithHttpInfo(
            $cloud_pk,
            $web_hook_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createWebHookAsyncWithHttpInfo
     *
     * Create a new Webhook
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWebHookAsyncWithHttpInfo(
        $cloud_pk,
        $web_hook_request,
        string $contentType = self::contentTypes["createWebHook"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\WebHook";
        $request = $this->createWebHookRequest(
            $cloud_pk,
            $web_hook_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWebHook'
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWebHookRequest(
        $cloud_pk,
        $web_hook_request,
        string $contentType = self::contentTypes["createWebHook"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createWebHook'
            );
        }

        // verify the required parameter 'web_hook_request' is set
        if (
            $web_hook_request === null ||
            (is_array($web_hook_request) && count($web_hook_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web_hook_request when calling createWebHook'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/webhook";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($web_hook_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $web_hook_request
                    )
                );
            } else {
                $httpBody = $web_hook_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWebHook
     *
     * Delete a webhook
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWebHook(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteWebHook"][0]
    ) {
        $this->deleteWebHookWithHttpInfo($cloud_pk, $id, $contentType);
    }

    /**
     * Operation deleteWebHookWithHttpInfo
     *
     * Delete a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWebHookWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteWebHook"][0]
    ) {
        $request = $this->deleteWebHookRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWebHookAsync
     *
     * Delete a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebHookAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteWebHook"][0]
    ) {
        return $this->deleteWebHookAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteWebHookAsyncWithHttpInfo
     *
     * Delete a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebHookAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteWebHook"][0]
    ) {
        $returnType = "";
        $request = $this->deleteWebHookRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWebHook'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWebHookRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteWebHook"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteWebHook'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteWebHook'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/webhook/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebHook
     *
     * Retrieve one configured webhook
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebHook
     */
    public function getWebHook(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getWebHook"][0]
    ) {
        list($response) = $this->getWebHookWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getWebHookWithHttpInfo
     *
     * Retrieve one configured webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebHook, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebHookWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getWebHook"][0]
    ) {
        $request = $this->getWebHookRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\WebHook" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\WebHook" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\WebHook",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\WebHook";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\WebHook",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebHookAsync
     *
     * Retrieve one configured webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebHookAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getWebHook"][0]
    ) {
        return $this->getWebHookAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWebHookAsyncWithHttpInfo
     *
     * Retrieve one configured webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebHookAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getWebHook"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\WebHook";
        $request = $this->getWebHookRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebHook'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWebHookRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getWebHook"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getWebHook'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWebHook'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/webhook/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebHooks
     *
     * Retrieve all configured webhooks
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHooks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebHook[]
     */
    public function getWebHooks(
        $cloud_pk,
        string $contentType = self::contentTypes["getWebHooks"][0]
    ) {
        list($response) = $this->getWebHooksWithHttpInfo(
            $cloud_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getWebHooksWithHttpInfo
     *
     * Retrieve all configured webhooks
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHooks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebHook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebHooksWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes["getWebHooks"][0]
    ) {
        $request = $this->getWebHooksRequest($cloud_pk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\WebHook[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\WebHook[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\WebHook[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\WebHook[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\WebHook[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWebHooksAsync
     *
     * Retrieve all configured webhooks
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebHooksAsync(
        $cloud_pk,
        string $contentType = self::contentTypes["getWebHooks"][0]
    ) {
        return $this->getWebHooksAsyncWithHttpInfo(
            $cloud_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getWebHooksAsyncWithHttpInfo
     *
     * Retrieve all configured webhooks
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebHooksAsyncWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes["getWebHooks"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\WebHook[]";
        $request = $this->getWebHooksRequest($cloud_pk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebHooks'
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebHooks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWebHooksRequest(
        $cloud_pk,
        string $contentType = self::contentTypes["getWebHooks"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getWebHooks'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/webhook";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pingWebHook
     *
     * Test a webhook
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebHook
     */
    public function pingWebHook(
        $cloud_pk,
        $id,
        $web_hook_request,
        string $contentType = self::contentTypes["pingWebHook"][0]
    ) {
        list($response) = $this->pingWebHookWithHttpInfo(
            $cloud_pk,
            $id,
            $web_hook_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation pingWebHookWithHttpInfo
     *
     * Test a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebHook, HTTP status code, HTTP response headers (array of strings)
     */
    public function pingWebHookWithHttpInfo(
        $cloud_pk,
        $id,
        $web_hook_request,
        string $contentType = self::contentTypes["pingWebHook"][0]
    ) {
        $request = $this->pingWebHookRequest(
            $cloud_pk,
            $id,
            $web_hook_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\WebHook" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\WebHook" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\WebHook",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\WebHook";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\WebHook",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pingWebHookAsync
     *
     * Test a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pingWebHookAsync(
        $cloud_pk,
        $id,
        $web_hook_request,
        string $contentType = self::contentTypes["pingWebHook"][0]
    ) {
        return $this->pingWebHookAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $web_hook_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation pingWebHookAsyncWithHttpInfo
     *
     * Test a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pingWebHookAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $web_hook_request,
        string $contentType = self::contentTypes["pingWebHook"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\WebHook";
        $request = $this->pingWebHookRequest(
            $cloud_pk,
            $id,
            $web_hook_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pingWebHook'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\WebHookRequest $web_hook_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pingWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pingWebHookRequest(
        $cloud_pk,
        $id,
        $web_hook_request,
        string $contentType = self::contentTypes["pingWebHook"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling pingWebHook'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pingWebHook'
            );
        }

        // verify the required parameter 'web_hook_request' is set
        if (
            $web_hook_request === null ||
            (is_array($web_hook_request) && count($web_hook_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web_hook_request when calling pingWebHook'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/webhook/{id}/ping";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($web_hook_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $web_hook_request
                    )
                );
            } else {
                $httpBody = $web_hook_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWebHook
     *
     * Update some field of a webhook
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\PatchedWebHookRequest $patched_web_hook_request patched_web_hook_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\WebHook
     */
    public function updateWebHook(
        $cloud_pk,
        $id,
        $patched_web_hook_request = null,
        string $contentType = self::contentTypes["updateWebHook"][0]
    ) {
        list($response) = $this->updateWebHookWithHttpInfo(
            $cloud_pk,
            $id,
            $patched_web_hook_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateWebHookWithHttpInfo
     *
     * Update some field of a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\PatchedWebHookRequest $patched_web_hook_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWebHook'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\WebHook, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWebHookWithHttpInfo(
        $cloud_pk,
        $id,
        $patched_web_hook_request = null,
        string $contentType = self::contentTypes["updateWebHook"][0]
    ) {
        $request = $this->updateWebHookRequest(
            $cloud_pk,
            $id,
            $patched_web_hook_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\WebHook" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\WebHook" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\WebHook",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\WebHook";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\WebHook",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWebHookAsync
     *
     * Update some field of a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\PatchedWebHookRequest $patched_web_hook_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWebHookAsync(
        $cloud_pk,
        $id,
        $patched_web_hook_request = null,
        string $contentType = self::contentTypes["updateWebHook"][0]
    ) {
        return $this->updateWebHookAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $patched_web_hook_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateWebHookAsyncWithHttpInfo
     *
     * Update some field of a webhook
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\PatchedWebHookRequest $patched_web_hook_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWebHookAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $patched_web_hook_request = null,
        string $contentType = self::contentTypes["updateWebHook"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\WebHook";
        $request = $this->updateWebHookRequest(
            $cloud_pk,
            $id,
            $patched_web_hook_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWebHook'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this web hook. (required)
     * @param  \OpenAPI\Client\Model\PatchedWebHookRequest $patched_web_hook_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWebHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWebHookRequest(
        $cloud_pk,
        $id,
        $patched_web_hook_request = null,
        string $contentType = self::contentTypes["updateWebHook"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateWebHook'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateWebHook'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/webhook/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_web_hook_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_web_hook_request
                    )
                );
            } else {
                $httpBody = $patched_web_hook_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                "a"
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    "Failed to open the debug file: " .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
