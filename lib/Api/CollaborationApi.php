<?php
/**
 * CollaborationApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CollaborationApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CollaborationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        "acceptUserInvitation" => ["application/json"],
        "acceptValidation" => ["application/json"],
        "addDocumentTag" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "addGroupMember" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "cancelCloudUserInvitation" => ["application/json"],
        "cancelProjectUserInvitation" => ["application/json"],
        "checkAccess" => ["application/json"],
        "closeVisa" => ["application/json"],
        "createClassification" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createCloud" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createDMSTree" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createDemo" => ["application/json"],
        "createDocument" => [
            "multipart/form-data",
            "application/x-www-form-urlencoded",
        ],
        "createFolder" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createManageGroup" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createProject" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createProjectAccessToken" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createTag" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createValidation" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createVisa" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createVisaComment" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "deleteAllDocumentHistory" => ["application/json"],
        "deleteClassification" => ["application/json"],
        "deleteCloud" => ["application/json"],
        "deleteCloudUser" => ["application/json"],
        "deleteDocument" => ["application/json"],
        "deleteDocumentTag" => ["application/json"],
        "deleteFolder" => ["application/json"],
        "deleteGroupMember" => ["application/json"],
        "deleteManageGroup" => ["application/json"],
        "deleteProject" => ["application/json"],
        "deleteProjectAccessToken" => ["application/json"],
        "deleteProjectUser" => ["application/json"],
        "deleteTag" => ["application/json"],
        "deleteValidation" => ["application/json"],
        "deleteVisa" => ["application/json"],
        "deleteVisaComment" => ["application/json"],
        "denyUserInvitation" => ["application/json"],
        "denyValidation" => ["application/json"],
        "getClassification" => ["application/json"],
        "getClassifications" => ["application/json"],
        "getCloud" => ["application/json"],
        "getCloudInvitations" => ["application/json"],
        "getCloudSize" => ["application/json"],
        "getCloudUser" => ["application/json"],
        "getCloudUsers" => ["application/json"],
        "getClouds" => ["application/json"],
        "getDocument" => ["application/json"],
        "getDocumentHistories" => ["application/json"],
        "getDocuments" => ["application/json"],
        "getFolder" => ["application/json"],
        "getFolderProjectUsers" => ["application/json"],
        "getFolders" => ["application/json"],
        "getGroup" => ["application/json"],
        "getGroups" => ["application/json"],
        "getManageGroup" => ["application/json"],
        "getManageGroups" => ["application/json"],
        "getProject" => ["application/json"],
        "getProjectAccessToken" => ["application/json"],
        "getProjectAccessTokens" => ["application/json"],
        "getProjectCreatorVisas" => ["application/json"],
        "getProjectDMSTree" => ["application/json"],
        "getProjectFolderTreeSerializers" => ["application/json"],
        "getProjectInvitations" => ["application/json"],
        "getProjectSize" => ["application/json"],
        "getProjectSubTree" => ["application/json"],
        "getProjectTree" => ["application/json"],
        "getProjectUsers" => ["application/json"],
        "getProjectValidatorVisas" => ["application/json"],
        "getProjects" => ["application/json"],
        "getSelfProjects" => ["application/json"],
        "getSelfUser" => ["application/json"],
        "getTag" => ["application/json"],
        "getTags" => ["application/json"],
        "getUserInvitation" => ["application/json"],
        "getUserInvitations" => ["application/json"],
        "getValidation" => ["application/json"],
        "getValidations" => ["application/json"],
        "getVisa" => ["application/json"],
        "getVisaComment" => ["application/json"],
        "getVisaComments" => ["application/json"],
        "getVisas" => ["application/json"],
        "inviteCloudUser" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "inviteProjectUser" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "leaveProject" => ["application/json"],
        "leaveVersionDocumentHistory" => ["application/json"],
        "makeHeadVersionDocumentHistory" => ["application/json"],
        "pauseVisa" => ["application/json"],
        "resetValidation" => ["application/json"],
        "resumeVisa" => ["application/json"],
        "updateClassification" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateCloud" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateCloudUser" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateDocument" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateFolder" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateGroupFolder" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateManageGroup" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateProject" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateProjectAccessToken" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateProjectUser" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateTag" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateValidation" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateVisa" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateVisaComment" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptUserInvitation
     *
     * Accept an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function acceptUserInvitation(
        $id,
        string $contentType = self::contentTypes["acceptUserInvitation"][0]
    ) {
        $this->acceptUserInvitationWithHttpInfo($id, $contentType);
    }

    /**
     * Operation acceptUserInvitationWithHttpInfo
     *
     * Accept an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptUserInvitationWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["acceptUserInvitation"][0]
    ) {
        $request = $this->acceptUserInvitationRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation acceptUserInvitationAsync
     *
     * Accept an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptUserInvitationAsync(
        $id,
        string $contentType = self::contentTypes["acceptUserInvitation"][0]
    ) {
        return $this->acceptUserInvitationAsyncWithHttpInfo(
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation acceptUserInvitationAsyncWithHttpInfo
     *
     * Accept an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptUserInvitationAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["acceptUserInvitation"][0]
    ) {
        $returnType = "";
        $request = $this->acceptUserInvitationRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptUserInvitation'
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptUserInvitationRequest(
        $id,
        string $contentType = self::contentTypes["acceptUserInvitation"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling acceptUserInvitation'
            );
        }

        $resourcePath = "/user/invitations/{id}/accept";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acceptValidation
     *
     * Accept a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function acceptValidation(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["acceptValidation"][0]
    ) {
        $this->acceptValidationWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );
    }

    /**
     * Operation acceptValidationWithHttpInfo
     *
     * Accept a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptValidationWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["acceptValidation"][0]
    ) {
        $request = $this->acceptValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation acceptValidationAsync
     *
     * Accept a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptValidationAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["acceptValidation"][0]
    ) {
        return $this->acceptValidationAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation acceptValidationAsyncWithHttpInfo
     *
     * Accept a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptValidationAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["acceptValidation"][0]
    ) {
        $returnType = "";
        $request = $this->acceptValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptValidation'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptValidationRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["acceptValidation"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling acceptValidation'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling acceptValidation'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling acceptValidation'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling acceptValidation'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling acceptValidation'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/accept";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addDocumentTag
     *
     * Add a tag to a document
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\TagIdRequest $tag_id_request tag_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document
     */
    public function addDocumentTag(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $tag_id_request,
        string $contentType = self::contentTypes["addDocumentTag"][0]
    ) {
        list($response) = $this->addDocumentTagWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $tag_id_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation addDocumentTagWithHttpInfo
     *
     * Add a tag to a document
     *
     * @param  int $cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\TagIdRequest $tag_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDocumentTagWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $tag_id_request,
        string $contentType = self::contentTypes["addDocumentTag"][0]
    ) {
        $request = $this->addDocumentTagRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $tag_id_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Document" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addDocumentTagAsync
     *
     * Add a tag to a document
     *
     * @param  int $cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\TagIdRequest $tag_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDocumentTagAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $tag_id_request,
        string $contentType = self::contentTypes["addDocumentTag"][0]
    ) {
        return $this->addDocumentTagAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $tag_id_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addDocumentTagAsyncWithHttpInfo
     *
     * Add a tag to a document
     *
     * @param  int $cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\TagIdRequest $tag_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDocumentTagAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $tag_id_request,
        string $contentType = self::contentTypes["addDocumentTag"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document";
        $request = $this->addDocumentTagRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $tag_id_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addDocumentTag'
     *
     * @param  int $cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\TagIdRequest $tag_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDocumentTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addDocumentTagRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $tag_id_request,
        string $contentType = self::contentTypes["addDocumentTag"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling addDocumentTag'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling addDocumentTag'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling addDocumentTag'
            );
        }

        // verify the required parameter 'tag_id_request' is set
        if (
            $tag_id_request === null ||
            (is_array($tag_id_request) && count($tag_id_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id_request when calling addDocumentTag'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tag_id_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($tag_id_request)
                );
            } else {
                $httpBody = $tag_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addGroupMember
     *
     * Add a user to a group
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\UserProjectIdRequest $user_project_id_request user_project_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupMember'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserProject
     */
    public function addGroupMember(
        $cloud_pk,
        $group_pk,
        $project_pk,
        $user_project_id_request,
        string $contentType = self::contentTypes["addGroupMember"][0]
    ) {
        list($response) = $this->addGroupMemberWithHttpInfo(
            $cloud_pk,
            $group_pk,
            $project_pk,
            $user_project_id_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation addGroupMemberWithHttpInfo
     *
     * Add a user to a group
     *
     * @param  int $cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\UserProjectIdRequest $user_project_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupMember'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserProject, HTTP status code, HTTP response headers (array of strings)
     */
    public function addGroupMemberWithHttpInfo(
        $cloud_pk,
        $group_pk,
        $project_pk,
        $user_project_id_request,
        string $contentType = self::contentTypes["addGroupMember"][0]
    ) {
        $request = $this->addGroupMemberRequest(
            $cloud_pk,
            $group_pk,
            $project_pk,
            $user_project_id_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\UserProject" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\UserProject" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\UserProject",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\UserProject";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\UserProject",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addGroupMemberAsync
     *
     * Add a user to a group
     *
     * @param  int $cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\UserProjectIdRequest $user_project_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupMemberAsync(
        $cloud_pk,
        $group_pk,
        $project_pk,
        $user_project_id_request,
        string $contentType = self::contentTypes["addGroupMember"][0]
    ) {
        return $this->addGroupMemberAsyncWithHttpInfo(
            $cloud_pk,
            $group_pk,
            $project_pk,
            $user_project_id_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addGroupMemberAsyncWithHttpInfo
     *
     * Add a user to a group
     *
     * @param  int $cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\UserProjectIdRequest $user_project_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addGroupMemberAsyncWithHttpInfo(
        $cloud_pk,
        $group_pk,
        $project_pk,
        $user_project_id_request,
        string $contentType = self::contentTypes["addGroupMember"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\UserProject";
        $request = $this->addGroupMemberRequest(
            $cloud_pk,
            $group_pk,
            $project_pk,
            $user_project_id_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addGroupMember'
     *
     * @param  int $cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\UserProjectIdRequest $user_project_id_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addGroupMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addGroupMemberRequest(
        $cloud_pk,
        $group_pk,
        $project_pk,
        $user_project_id_request,
        string $contentType = self::contentTypes["addGroupMember"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling addGroupMember'
            );
        }

        // verify the required parameter 'group_pk' is set
        if (
            $group_pk === null ||
            (is_array($group_pk) && count($group_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_pk when calling addGroupMember'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling addGroupMember'
            );
        }

        // verify the required parameter 'user_project_id_request' is set
        if (
            $user_project_id_request === null ||
            (is_array($user_project_id_request) &&
                count($user_project_id_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_project_id_request when calling addGroupMember'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($group_pk !== null) {
            $resourcePath = str_replace(
                "{" . "group_pk" . "}",
                ObjectSerializer::toPathValue($group_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user_project_id_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $user_project_id_request
                    )
                );
            } else {
                $httpBody = $user_project_id_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelCloudUserInvitation
     *
     * Cancel a pending invitation
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCloudUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelCloudUserInvitation(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["cancelCloudUserInvitation"][0]
    ) {
        $this->cancelCloudUserInvitationWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        );
    }

    /**
     * Operation cancelCloudUserInvitationWithHttpInfo
     *
     * Cancel a pending invitation
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCloudUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelCloudUserInvitationWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["cancelCloudUserInvitation"][0]
    ) {
        $request = $this->cancelCloudUserInvitationRequest(
            $cloud_pk,
            $id,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelCloudUserInvitationAsync
     *
     * Cancel a pending invitation
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCloudUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelCloudUserInvitationAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["cancelCloudUserInvitation"][0]
    ) {
        return $this->cancelCloudUserInvitationAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation cancelCloudUserInvitationAsyncWithHttpInfo
     *
     * Cancel a pending invitation
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCloudUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelCloudUserInvitationAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["cancelCloudUserInvitation"][0]
    ) {
        $returnType = "";
        $request = $this->cancelCloudUserInvitationRequest(
            $cloud_pk,
            $id,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelCloudUserInvitation'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelCloudUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelCloudUserInvitationRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["cancelCloudUserInvitation"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling cancelCloudUserInvitation'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelCloudUserInvitation'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/invitation/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelProjectUserInvitation
     *
     * Cancel a pending invitation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelProjectUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelProjectUserInvitation(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "cancelProjectUserInvitation"
        ][0]
    ) {
        $this->cancelProjectUserInvitationWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation cancelProjectUserInvitationWithHttpInfo
     *
     * Cancel a pending invitation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelProjectUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelProjectUserInvitationWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "cancelProjectUserInvitation"
        ][0]
    ) {
        $request = $this->cancelProjectUserInvitationRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelProjectUserInvitationAsync
     *
     * Cancel a pending invitation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelProjectUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelProjectUserInvitationAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "cancelProjectUserInvitation"
        ][0]
    ) {
        return $this->cancelProjectUserInvitationAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation cancelProjectUserInvitationAsyncWithHttpInfo
     *
     * Cancel a pending invitation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelProjectUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelProjectUserInvitationAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "cancelProjectUserInvitation"
        ][0]
    ) {
        $returnType = "";
        $request = $this->cancelProjectUserInvitationRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelProjectUserInvitation'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelProjectUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelProjectUserInvitationRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "cancelProjectUserInvitation"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling cancelProjectUserInvitation'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelProjectUserInvitation'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling cancelProjectUserInvitation'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/invitation/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkAccess
     *
     * Check app access from cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkAccess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function checkAccess(
        $id,
        string $contentType = self::contentTypes["checkAccess"][0]
    ) {
        $this->checkAccessWithHttpInfo($id, $contentType);
    }

    /**
     * Operation checkAccessWithHttpInfo
     *
     * Check app access from cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkAccess'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkAccessWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["checkAccess"][0]
    ) {
        $request = $this->checkAccessRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation checkAccessAsync
     *
     * Check app access from cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkAccessAsync(
        $id,
        string $contentType = self::contentTypes["checkAccess"][0]
    ) {
        return $this->checkAccessAsyncWithHttpInfo($id, $contentType)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation checkAccessAsyncWithHttpInfo
     *
     * Check app access from cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkAccessAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["checkAccess"][0]
    ) {
        $returnType = "";
        $request = $this->checkAccessRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkAccess'
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkAccess'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkAccessRequest(
        $id,
        string $contentType = self::contentTypes["checkAccess"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling checkAccess'
            );
        }

        $resourcePath = "/cloud/{id}/check-access";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation closeVisa
     *
     * Close a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function closeVisa(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["closeVisa"][0]
    ) {
        $this->closeVisaWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation closeVisaWithHttpInfo
     *
     * Close a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function closeVisaWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["closeVisa"][0]
    ) {
        $request = $this->closeVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation closeVisaAsync
     *
     * Close a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeVisaAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["closeVisa"][0]
    ) {
        return $this->closeVisaAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation closeVisaAsyncWithHttpInfo
     *
     * Close a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function closeVisaAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["closeVisa"][0]
    ) {
        $returnType = "";
        $request = $this->closeVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'closeVisa'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['closeVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function closeVisaRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["closeVisa"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling closeVisa'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling closeVisa'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling closeVisa'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling closeVisa'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/close";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createClassification
     *
     * Create a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     */
    public function createClassification(
        $cloud_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes["createClassification"][0]
    ) {
        list($response) = $this->createClassificationWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $classification_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createClassificationWithHttpInfo
     *
     * Create a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createClassificationWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes["createClassification"][0]
    ) {
        $request = $this->createClassificationRequest(
            $cloud_pk,
            $project_pk,
            $classification_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createClassificationAsync
     *
     * Create a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationAsync(
        $cloud_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes["createClassification"][0]
    ) {
        return $this->createClassificationAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $classification_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createClassificationAsyncWithHttpInfo
     *
     * Create a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes["createClassification"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification[]";
        $request = $this->createClassificationRequest(
            $cloud_pk,
            $project_pk,
            $classification_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClassification'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClassificationRequest(
        $cloud_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes["createClassification"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createClassification'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createClassification'
            );
        }

        // verify the required parameter 'classification_request' is set
        if (
            $classification_request === null ||
            (is_array($classification_request) &&
                count($classification_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $classification_request when calling createClassification'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/classification";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($classification_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $classification_request
                    )
                );
            } else {
                $httpBody = $classification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCloud
     *
     * Create a cloud
     *
     * @param  \OpenAPI\Client\Model\CloudRequest $cloud_request cloud_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCloud'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Cloud
     */
    public function createCloud(
        $cloud_request,
        string $contentType = self::contentTypes["createCloud"][0]
    ) {
        list($response) = $this->createCloudWithHttpInfo(
            $cloud_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createCloudWithHttpInfo
     *
     * Create a cloud
     *
     * @param  \OpenAPI\Client\Model\CloudRequest $cloud_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCloud'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Cloud, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCloudWithHttpInfo(
        $cloud_request,
        string $contentType = self::contentTypes["createCloud"][0]
    ) {
        $request = $this->createCloudRequest($cloud_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Cloud" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Cloud" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Cloud",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Cloud";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Cloud",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCloudAsync
     *
     * Create a cloud
     *
     * @param  \OpenAPI\Client\Model\CloudRequest $cloud_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCloudAsync(
        $cloud_request,
        string $contentType = self::contentTypes["createCloud"][0]
    ) {
        return $this->createCloudAsyncWithHttpInfo(
            $cloud_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createCloudAsyncWithHttpInfo
     *
     * Create a cloud
     *
     * @param  \OpenAPI\Client\Model\CloudRequest $cloud_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCloudAsyncWithHttpInfo(
        $cloud_request,
        string $contentType = self::contentTypes["createCloud"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Cloud";
        $request = $this->createCloudRequest($cloud_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCloud'
     *
     * @param  \OpenAPI\Client\Model\CloudRequest $cloud_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCloudRequest(
        $cloud_request,
        string $contentType = self::contentTypes["createCloud"][0]
    ) {
        // verify the required parameter 'cloud_request' is set
        if (
            $cloud_request === null ||
            (is_array($cloud_request) && count($cloud_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_request when calling createCloud'
            );
        }

        $resourcePath = "/cloud";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cloud_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($cloud_request)
                );
            } else {
                $httpBody = $cloud_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDMSTree
     *
     * Create a complete DMS tree
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\WriteFolderRequest[] $write_folder_request write_folder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDMSTree'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Folder
     */
    public function createDMSTree(
        $cloud_pk,
        $id,
        $write_folder_request,
        string $contentType = self::contentTypes["createDMSTree"][0]
    ) {
        list($response) = $this->createDMSTreeWithHttpInfo(
            $cloud_pk,
            $id,
            $write_folder_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createDMSTreeWithHttpInfo
     *
     * Create a complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\WriteFolderRequest[] $write_folder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDMSTree'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Folder, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDMSTreeWithHttpInfo(
        $cloud_pk,
        $id,
        $write_folder_request,
        string $contentType = self::contentTypes["createDMSTree"][0]
    ) {
        $request = $this->createDMSTreeRequest(
            $cloud_pk,
            $id,
            $write_folder_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Folder" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Folder" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Folder",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Folder";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Folder",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDMSTreeAsync
     *
     * Create a complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\WriteFolderRequest[] $write_folder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDMSTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDMSTreeAsync(
        $cloud_pk,
        $id,
        $write_folder_request,
        string $contentType = self::contentTypes["createDMSTree"][0]
    ) {
        return $this->createDMSTreeAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $write_folder_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createDMSTreeAsyncWithHttpInfo
     *
     * Create a complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\WriteFolderRequest[] $write_folder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDMSTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDMSTreeAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $write_folder_request,
        string $contentType = self::contentTypes["createDMSTree"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Folder";
        $request = $this->createDMSTreeRequest(
            $cloud_pk,
            $id,
            $write_folder_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDMSTree'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\WriteFolderRequest[] $write_folder_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDMSTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDMSTreeRequest(
        $cloud_pk,
        $id,
        $write_folder_request,
        string $contentType = self::contentTypes["createDMSTree"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createDMSTree'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createDMSTree'
            );
        }

        // verify the required parameter 'write_folder_request' is set
        if (
            $write_folder_request === null ||
            (is_array($write_folder_request) &&
                count($write_folder_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $write_folder_request when calling createDMSTree'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{id}/dms-tree";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($write_folder_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $write_folder_request
                    )
                );
            } else {
                $httpBody = $write_folder_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDemo
     *
     * Create a Demo project in a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDemo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Project
     */
    public function createDemo(
        $id,
        string $contentType = self::contentTypes["createDemo"][0]
    ) {
        list($response) = $this->createDemoWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation createDemoWithHttpInfo
     *
     * Create a Demo project in a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDemo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDemoWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["createDemo"][0]
    ) {
        $request = $this->createDemoRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Project" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Project" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Project",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Project";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Project",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDemoAsync
     *
     * Create a Demo project in a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDemo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDemoAsync(
        $id,
        string $contentType = self::contentTypes["createDemo"][0]
    ) {
        return $this->createDemoAsyncWithHttpInfo($id, $contentType)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation createDemoAsyncWithHttpInfo
     *
     * Create a Demo project in a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDemo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDemoAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["createDemo"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Project";
        $request = $this->createDemoRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDemo'
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDemo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDemoRequest(
        $id,
        string $contentType = self::contentTypes["createDemo"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createDemo'
            );
        }

        $resourcePath = "/cloud/{id}/create-demo";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDocument
     *
     * Create a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $name Shown name of the file (required)
     * @param  \SplFileObject $file file (required)
     * @param  int $parent_id parent_id (optional)
     * @param  string $file_name Full name of the file (optional)
     * @param  string $description Description of the file (optional)
     * @param  int $size Size of the file. (optional)
     * @param  string $model_source Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  string $ifc_source DEPRECATED: Use &#39;model_source&#39; instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  int $successor_of Old document version to replace. Only for create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document
     */
    public function createDocument(
        $cloud_pk,
        $project_pk,
        $name,
        $file,
        $parent_id = null,
        $file_name = null,
        $description = null,
        $size = null,
        $model_source = null,
        $ifc_source = null,
        $successor_of = null,
        string $contentType = self::contentTypes["createDocument"][0]
    ) {
        list($response) = $this->createDocumentWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $name,
            $file,
            $parent_id,
            $file_name,
            $description,
            $size,
            $model_source,
            $ifc_source,
            $successor_of,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createDocumentWithHttpInfo
     *
     * Create a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $name Shown name of the file (required)
     * @param  \SplFileObject $file (required)
     * @param  int $parent_id (optional)
     * @param  string $file_name Full name of the file (optional)
     * @param  string $description Description of the file (optional)
     * @param  int $size Size of the file. (optional)
     * @param  string $model_source Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  string $ifc_source DEPRECATED: Use &#39;model_source&#39; instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  int $successor_of Old document version to replace. Only for create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $name,
        $file,
        $parent_id = null,
        $file_name = null,
        $description = null,
        $size = null,
        $model_source = null,
        $ifc_source = null,
        $successor_of = null,
        string $contentType = self::contentTypes["createDocument"][0]
    ) {
        $request = $this->createDocumentRequest(
            $cloud_pk,
            $project_pk,
            $name,
            $file,
            $parent_id,
            $file_name,
            $description,
            $size,
            $model_source,
            $ifc_source,
            $successor_of,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Document" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDocumentAsync
     *
     * Create a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $name Shown name of the file (required)
     * @param  \SplFileObject $file (required)
     * @param  int $parent_id (optional)
     * @param  string $file_name Full name of the file (optional)
     * @param  string $description Description of the file (optional)
     * @param  int $size Size of the file. (optional)
     * @param  string $model_source Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  string $ifc_source DEPRECATED: Use &#39;model_source&#39; instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  int $successor_of Old document version to replace. Only for create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentAsync(
        $cloud_pk,
        $project_pk,
        $name,
        $file,
        $parent_id = null,
        $file_name = null,
        $description = null,
        $size = null,
        $model_source = null,
        $ifc_source = null,
        $successor_of = null,
        string $contentType = self::contentTypes["createDocument"][0]
    ) {
        return $this->createDocumentAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $name,
            $file,
            $parent_id,
            $file_name,
            $description,
            $size,
            $model_source,
            $ifc_source,
            $successor_of,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createDocumentAsyncWithHttpInfo
     *
     * Create a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $name Shown name of the file (required)
     * @param  \SplFileObject $file (required)
     * @param  int $parent_id (optional)
     * @param  string $file_name Full name of the file (optional)
     * @param  string $description Description of the file (optional)
     * @param  int $size Size of the file. (optional)
     * @param  string $model_source Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  string $ifc_source DEPRECATED: Use &#39;model_source&#39; instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  int $successor_of Old document version to replace. Only for create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $name,
        $file,
        $parent_id = null,
        $file_name = null,
        $description = null,
        $size = null,
        $model_source = null,
        $ifc_source = null,
        $successor_of = null,
        string $contentType = self::contentTypes["createDocument"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document";
        $request = $this->createDocumentRequest(
            $cloud_pk,
            $project_pk,
            $name,
            $file,
            $parent_id,
            $file_name,
            $description,
            $size,
            $model_source,
            $ifc_source,
            $successor_of,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocument'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $name Shown name of the file (required)
     * @param  \SplFileObject $file (required)
     * @param  int $parent_id (optional)
     * @param  string $file_name Full name of the file (optional)
     * @param  string $description Description of the file (optional)
     * @param  int $size Size of the file. (optional)
     * @param  string $model_source Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  string $ifc_source DEPRECATED: Use &#39;model_source&#39; instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...) (optional)
     * @param  int $successor_of Old document version to replace. Only for create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDocumentRequest(
        $cloud_pk,
        $project_pk,
        $name,
        $file,
        $parent_id = null,
        $file_name = null,
        $description = null,
        $size = null,
        $model_source = null,
        $ifc_source = null,
        $successor_of = null,
        string $contentType = self::contentTypes["createDocument"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createDocument'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createDocument'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling createDocument'
            );
        }
        if (strlen($name) > 512) {
            throw new \InvalidArgumentException(
                'invalid length for "$name" when calling CollaborationApi.createDocument, must be smaller than or equal to 512.'
            );
        }
        if (strlen($name) < 1) {
            throw new \InvalidArgumentException(
                'invalid length for "$name" when calling CollaborationApi.createDocument, must be bigger than or equal to 1.'
            );
        }

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling createDocument'
            );
        }

        if ($file_name !== null && strlen($file_name) > 512) {
            throw new \InvalidArgumentException(
                'invalid length for "$file_name" when calling CollaborationApi.createDocument, must be smaller than or equal to 512.'
            );
        }
        if ($file_name !== null && strlen($file_name) < 1) {
            throw new \InvalidArgumentException(
                'invalid length for "$file_name" when calling CollaborationApi.createDocument, must be bigger than or equal to 1.'
            );
        }

        if ($size !== null && $size > 9223372036854775807) {
            throw new \InvalidArgumentException(
                'invalid value for "$size" when calling CollaborationApi.createDocument, must be smaller than or equal to 9223372036854775807.'
            );
        }
        if ($size !== null && $size < 0) {
            throw new \InvalidArgumentException(
                'invalid value for "$size" when calling CollaborationApi.createDocument, must be bigger than or equal to 0.'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/document";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        // form params
        if ($parent_id !== null) {
            $formParams["parent_id"] = ObjectSerializer::toFormValue(
                $parent_id
            );
        }
        // form params
        if ($name !== null) {
            $formParams["name"] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($file_name !== null) {
            $formParams["file_name"] = ObjectSerializer::toFormValue(
                $file_name
            );
        }
        // form params
        if ($description !== null) {
            $formParams["description"] = ObjectSerializer::toFormValue(
                $description
            );
        }
        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams["file"] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams["file"][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($size !== null) {
            $formParams["size"] = ObjectSerializer::toFormValue($size);
        }
        // form params
        if ($model_source !== null) {
            $formParams["model_source"] = ObjectSerializer::toFormValue(
                $model_source
            );
        }
        // form params
        if ($ifc_source !== null) {
            $formParams["ifc_source"] = ObjectSerializer::toFormValue(
                $ifc_source
            );
        }
        // form params
        if ($successor_of !== null) {
            $formParams["successor_of"] = ObjectSerializer::toFormValue(
                $successor_of
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createFolder
     *
     * Create a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\FolderWithoutChildrenRequest $folder_without_children_request folder_without_children_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FolderWithoutChildren
     */
    public function createFolder(
        $cloud_pk,
        $project_pk,
        $folder_without_children_request,
        string $contentType = self::contentTypes["createFolder"][0]
    ) {
        list($response) = $this->createFolderWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $folder_without_children_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createFolderWithHttpInfo
     *
     * Create a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\FolderWithoutChildrenRequest $folder_without_children_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FolderWithoutChildren, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFolderWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $folder_without_children_request,
        string $contentType = self::contentTypes["createFolder"][0]
    ) {
        $request = $this->createFolderRequest(
            $cloud_pk,
            $project_pk,
            $folder_without_children_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\FolderWithoutChildren" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\FolderWithoutChildren" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\FolderWithoutChildren",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\FolderWithoutChildren";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\FolderWithoutChildren",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createFolderAsync
     *
     * Create a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\FolderWithoutChildrenRequest $folder_without_children_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFolderAsync(
        $cloud_pk,
        $project_pk,
        $folder_without_children_request,
        string $contentType = self::contentTypes["createFolder"][0]
    ) {
        return $this->createFolderAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $folder_without_children_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createFolderAsyncWithHttpInfo
     *
     * Create a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\FolderWithoutChildrenRequest $folder_without_children_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createFolderAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $folder_without_children_request,
        string $contentType = self::contentTypes["createFolder"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\FolderWithoutChildren";
        $request = $this->createFolderRequest(
            $cloud_pk,
            $project_pk,
            $folder_without_children_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createFolder'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\FolderWithoutChildrenRequest $folder_without_children_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createFolderRequest(
        $cloud_pk,
        $project_pk,
        $folder_without_children_request,
        string $contentType = self::contentTypes["createFolder"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createFolder'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createFolder'
            );
        }

        // verify the required parameter 'folder_without_children_request' is set
        if (
            $folder_without_children_request === null ||
            (is_array($folder_without_children_request) &&
                count($folder_without_children_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder_without_children_request when calling createFolder'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/folder";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($folder_without_children_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $folder_without_children_request
                    )
                );
            } else {
                $httpBody = $folder_without_children_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createManageGroup
     *
     * Create a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\GroupRequest $group_request group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManageGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Group
     */
    public function createManageGroup(
        $cloud_pk,
        $project_pk,
        $group_request,
        string $contentType = self::contentTypes["createManageGroup"][0]
    ) {
        list($response) = $this->createManageGroupWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $group_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createManageGroupWithHttpInfo
     *
     * Create a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\GroupRequest $group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManageGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function createManageGroupWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $group_request,
        string $contentType = self::contentTypes["createManageGroup"][0]
    ) {
        $request = $this->createManageGroupRequest(
            $cloud_pk,
            $project_pk,
            $group_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Group" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Group" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Group",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Group";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Group",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createManageGroupAsync
     *
     * Create a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\GroupRequest $group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createManageGroupAsync(
        $cloud_pk,
        $project_pk,
        $group_request,
        string $contentType = self::contentTypes["createManageGroup"][0]
    ) {
        return $this->createManageGroupAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $group_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createManageGroupAsyncWithHttpInfo
     *
     * Create a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\GroupRequest $group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createManageGroupAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $group_request,
        string $contentType = self::contentTypes["createManageGroup"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Group";
        $request = $this->createManageGroupRequest(
            $cloud_pk,
            $project_pk,
            $group_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createManageGroup'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\GroupRequest $group_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createManageGroupRequest(
        $cloud_pk,
        $project_pk,
        $group_request,
        string $contentType = self::contentTypes["createManageGroup"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createManageGroup'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createManageGroup'
            );
        }

        // verify the required parameter 'group_request' is set
        if (
            $group_request === null ||
            (is_array($group_request) && count($group_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_request when calling createManageGroup'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/group";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($group_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($group_request)
                );
            } else {
                $httpBody = $group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProject
     *
     * Create a project
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  \OpenAPI\Client\Model\ProjectRequest $project_request project_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Project
     */
    public function createProject(
        $cloud_pk,
        $project_request,
        string $contentType = self::contentTypes["createProject"][0]
    ) {
        list($response) = $this->createProjectWithHttpInfo(
            $cloud_pk,
            $project_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createProjectWithHttpInfo
     *
     * Create a project
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\ProjectRequest $project_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProjectWithHttpInfo(
        $cloud_pk,
        $project_request,
        string $contentType = self::contentTypes["createProject"][0]
    ) {
        $request = $this->createProjectRequest(
            $cloud_pk,
            $project_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Project" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Project" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Project",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Project";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Project",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProjectAsync
     *
     * Create a project
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\ProjectRequest $project_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectAsync(
        $cloud_pk,
        $project_request,
        string $contentType = self::contentTypes["createProject"][0]
    ) {
        return $this->createProjectAsyncWithHttpInfo(
            $cloud_pk,
            $project_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createProjectAsyncWithHttpInfo
     *
     * Create a project
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\ProjectRequest $project_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectAsyncWithHttpInfo(
        $cloud_pk,
        $project_request,
        string $contentType = self::contentTypes["createProject"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Project";
        $request = $this->createProjectRequest(
            $cloud_pk,
            $project_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProject'
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\ProjectRequest $project_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProjectRequest(
        $cloud_pk,
        $project_request,
        string $contentType = self::contentTypes["createProject"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createProject'
            );
        }

        // verify the required parameter 'project_request' is set
        if (
            $project_request === null ||
            (is_array($project_request) && count($project_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_request when calling createProject'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($project_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($project_request)
                );
            } else {
                $httpBody = $project_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProjectAccessToken
     *
     * Create a token for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectAccessTokenRequest $project_access_token_request project_access_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectAccessToken
     */
    public function createProjectAccessToken(
        $cloud_pk,
        $project_pk,
        $project_access_token_request,
        string $contentType = self::contentTypes["createProjectAccessToken"][0]
    ) {
        list($response) = $this->createProjectAccessTokenWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $project_access_token_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createProjectAccessTokenWithHttpInfo
     *
     * Create a token for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectAccessTokenRequest $project_access_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProjectAccessTokenWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $project_access_token_request,
        string $contentType = self::contentTypes["createProjectAccessToken"][0]
    ) {
        $request = $this->createProjectAccessTokenRequest(
            $cloud_pk,
            $project_pk,
            $project_access_token_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\ProjectAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectAccessToken" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProjectAccessTokenAsync
     *
     * Create a token for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectAccessTokenRequest $project_access_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectAccessTokenAsync(
        $cloud_pk,
        $project_pk,
        $project_access_token_request,
        string $contentType = self::contentTypes["createProjectAccessToken"][0]
    ) {
        return $this->createProjectAccessTokenAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $project_access_token_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createProjectAccessTokenAsyncWithHttpInfo
     *
     * Create a token for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectAccessTokenRequest $project_access_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProjectAccessTokenAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $project_access_token_request,
        string $contentType = self::contentTypes["createProjectAccessToken"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectAccessToken";
        $request = $this->createProjectAccessTokenRequest(
            $cloud_pk,
            $project_pk,
            $project_access_token_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProjectAccessToken'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectAccessTokenRequest $project_access_token_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProjectAccessTokenRequest(
        $cloud_pk,
        $project_pk,
        $project_access_token_request,
        string $contentType = self::contentTypes["createProjectAccessToken"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createProjectAccessToken'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createProjectAccessToken'
            );
        }

        // verify the required parameter 'project_access_token_request' is set
        if (
            $project_access_token_request === null ||
            (is_array($project_access_token_request) &&
                count($project_access_token_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_access_token_request when calling createProjectAccessToken'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/access-token";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($project_access_token_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $project_access_token_request
                    )
                );
            } else {
                $httpBody = $project_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTag
     *
     * Create a tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\TagRequest $tag_request tag_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Tag
     */
    public function createTag(
        $cloud_pk,
        $project_pk,
        $tag_request,
        string $contentType = self::contentTypes["createTag"][0]
    ) {
        list($response) = $this->createTagWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $tag_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createTagWithHttpInfo
     *
     * Create a tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\TagRequest $tag_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTagWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $tag_request,
        string $contentType = self::contentTypes["createTag"][0]
    ) {
        $request = $this->createTagRequest(
            $cloud_pk,
            $project_pk,
            $tag_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Tag" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Tag" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Tag",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Tag";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Tag",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTagAsync
     *
     * Create a tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\TagRequest $tag_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTagAsync(
        $cloud_pk,
        $project_pk,
        $tag_request,
        string $contentType = self::contentTypes["createTag"][0]
    ) {
        return $this->createTagAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $tag_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTagAsyncWithHttpInfo
     *
     * Create a tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\TagRequest $tag_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTagAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $tag_request,
        string $contentType = self::contentTypes["createTag"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Tag";
        $request = $this->createTagRequest(
            $cloud_pk,
            $project_pk,
            $tag_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTag'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\TagRequest $tag_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTagRequest(
        $cloud_pk,
        $project_pk,
        $tag_request,
        string $contentType = self::contentTypes["createTag"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createTag'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createTag'
            );
        }

        // verify the required parameter 'tag_request' is set
        if (
            $tag_request === null ||
            (is_array($tag_request) && count($tag_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_request when calling createTag'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/tag";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tag_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($tag_request)
                );
            } else {
                $httpBody = $tag_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createValidation
     *
     * Add a validation to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaValidationRequest $visa_validation_request visa_validation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VisaValidation
     */
    public function createValidation(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_validation_request,
        string $contentType = self::contentTypes["createValidation"][0]
    ) {
        list($response) = $this->createValidationWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $visa_validation_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createValidationWithHttpInfo
     *
     * Add a validation to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaValidationRequest $visa_validation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VisaValidation, HTTP status code, HTTP response headers (array of strings)
     */
    public function createValidationWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_validation_request,
        string $contentType = self::contentTypes["createValidation"][0]
    ) {
        $request = $this->createValidationRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $visa_validation_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\VisaValidation" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\VisaValidation" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\VisaValidation",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\VisaValidation";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\VisaValidation",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createValidationAsync
     *
     * Add a validation to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaValidationRequest $visa_validation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createValidationAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_validation_request,
        string $contentType = self::contentTypes["createValidation"][0]
    ) {
        return $this->createValidationAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $visa_validation_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createValidationAsyncWithHttpInfo
     *
     * Add a validation to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaValidationRequest $visa_validation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createValidationAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_validation_request,
        string $contentType = self::contentTypes["createValidation"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\VisaValidation";
        $request = $this->createValidationRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $visa_validation_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createValidation'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaValidationRequest $visa_validation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createValidationRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_validation_request,
        string $contentType = self::contentTypes["createValidation"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createValidation'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling createValidation'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createValidation'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling createValidation'
            );
        }

        // verify the required parameter 'visa_validation_request' is set
        if (
            $visa_validation_request === null ||
            (is_array($visa_validation_request) &&
                count($visa_validation_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_validation_request when calling createValidation'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($visa_validation_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $visa_validation_request
                    )
                );
            } else {
                $httpBody = $visa_validation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createVisa
     *
     * Create a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\VisaRequest $visa_request visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Visa
     */
    public function createVisa(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_request = null,
        string $contentType = self::contentTypes["createVisa"][0]
    ) {
        list($response) = $this->createVisaWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createVisaWithHttpInfo
     *
     * Create a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\VisaRequest $visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Visa, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVisaWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_request = null,
        string $contentType = self::contentTypes["createVisa"][0]
    ) {
        $request = $this->createVisaRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Visa" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Visa" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Visa",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Visa";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Visa",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createVisaAsync
     *
     * Create a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\VisaRequest $visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVisaAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_request = null,
        string $contentType = self::contentTypes["createVisa"][0]
    ) {
        return $this->createVisaAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createVisaAsyncWithHttpInfo
     *
     * Create a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\VisaRequest $visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVisaAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_request = null,
        string $contentType = self::contentTypes["createVisa"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Visa";
        $request = $this->createVisaRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVisa'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\VisaRequest $visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createVisaRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_request = null,
        string $contentType = self::contentTypes["createVisa"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createVisa'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling createVisa'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createVisa'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($visa_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($visa_request)
                );
            } else {
                $httpBody = $visa_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createVisaComment
     *
     * Add a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaCommentRequest $visa_comment_request visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisaComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VisaComment
     */
    public function createVisaComment(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_comment_request = null,
        string $contentType = self::contentTypes["createVisaComment"][0]
    ) {
        list($response) = $this->createVisaCommentWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $visa_comment_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createVisaCommentWithHttpInfo
     *
     * Add a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaCommentRequest $visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisaComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VisaComment, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVisaCommentWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_comment_request = null,
        string $contentType = self::contentTypes["createVisaComment"][0]
    ) {
        $request = $this->createVisaCommentRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $visa_comment_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\VisaComment" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\VisaComment" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\VisaComment",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\VisaComment";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\VisaComment",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createVisaCommentAsync
     *
     * Add a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaCommentRequest $visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVisaCommentAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_comment_request = null,
        string $contentType = self::contentTypes["createVisaComment"][0]
    ) {
        return $this->createVisaCommentAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $visa_comment_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createVisaCommentAsyncWithHttpInfo
     *
     * Add a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaCommentRequest $visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createVisaCommentAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_comment_request = null,
        string $contentType = self::contentTypes["createVisaComment"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\VisaComment";
        $request = $this->createVisaCommentRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $visa_comment_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createVisaComment'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\VisaCommentRequest $visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createVisaCommentRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        $visa_comment_request = null,
        string $contentType = self::contentTypes["createVisaComment"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createVisaComment'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling createVisaComment'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createVisaComment'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling createVisaComment'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($visa_comment_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $visa_comment_request
                    )
                );
            } else {
                $httpBody = $visa_comment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllDocumentHistory
     *
     * Delete all document history
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllDocumentHistory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAllDocumentHistory(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteAllDocumentHistory"][0]
    ) {
        $this->deleteAllDocumentHistoryWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteAllDocumentHistoryWithHttpInfo
     *
     * Delete all document history
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllDocumentHistory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllDocumentHistoryWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteAllDocumentHistory"][0]
    ) {
        $request = $this->deleteAllDocumentHistoryRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllDocumentHistoryAsync
     *
     * Delete all document history
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllDocumentHistoryAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteAllDocumentHistory"][0]
    ) {
        return $this->deleteAllDocumentHistoryAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAllDocumentHistoryAsyncWithHttpInfo
     *
     * Delete all document history
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllDocumentHistoryAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteAllDocumentHistory"][0]
    ) {
        $returnType = "";
        $request = $this->deleteAllDocumentHistoryRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllDocumentHistory'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAllDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAllDocumentHistoryRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteAllDocumentHistory"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteAllDocumentHistory'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling deleteAllDocumentHistory'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteAllDocumentHistory'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/delete";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteClassification
     *
     * Delete a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteClassification(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteClassification"][0]
    ) {
        $this->deleteClassificationWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteClassificationWithHttpInfo
     *
     * Delete a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClassificationWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteClassification"][0]
    ) {
        $request = $this->deleteClassificationRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteClassificationAsync
     *
     * Delete a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteClassificationAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteClassification"][0]
    ) {
        return $this->deleteClassificationAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteClassificationAsyncWithHttpInfo
     *
     * Delete a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteClassificationAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteClassification"][0]
    ) {
        $returnType = "";
        $request = $this->deleteClassificationRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteClassification'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteClassificationRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteClassification"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteClassification'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteClassification'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteClassification'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/classification/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCloud
     *
     * Delete a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloud'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCloud(
        $id,
        string $contentType = self::contentTypes["deleteCloud"][0]
    ) {
        $this->deleteCloudWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteCloudWithHttpInfo
     *
     * Delete a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloud'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCloudWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["deleteCloud"][0]
    ) {
        $request = $this->deleteCloudRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCloudAsync
     *
     * Delete a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCloudAsync(
        $id,
        string $contentType = self::contentTypes["deleteCloud"][0]
    ) {
        return $this->deleteCloudAsyncWithHttpInfo($id, $contentType)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation deleteCloudAsyncWithHttpInfo
     *
     * Delete a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCloudAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["deleteCloud"][0]
    ) {
        $returnType = "";
        $request = $this->deleteCloudRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCloud'
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCloudRequest(
        $id,
        string $contentType = self::contentTypes["deleteCloud"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCloud'
            );
        }

        $resourcePath = "/cloud/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCloudUser
     *
     * Remove a user from a cloud
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloudUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCloudUser(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteCloudUser"][0]
    ) {
        $this->deleteCloudUserWithHttpInfo($cloud_pk, $id, $contentType);
    }

    /**
     * Operation deleteCloudUserWithHttpInfo
     *
     * Remove a user from a cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloudUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCloudUserWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteCloudUser"][0]
    ) {
        $request = $this->deleteCloudUserRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCloudUserAsync
     *
     * Remove a user from a cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCloudUserAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteCloudUser"][0]
    ) {
        return $this->deleteCloudUserAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCloudUserAsyncWithHttpInfo
     *
     * Remove a user from a cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCloudUserAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteCloudUser"][0]
    ) {
        $returnType = "";
        $request = $this->deleteCloudUserRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCloudUser'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCloudUserRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteCloudUser"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteCloudUser'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCloudUser'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/user/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDocument
     *
     * Delete the document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDocument(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocument"][0]
    ) {
        $this->deleteDocumentWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteDocumentWithHttpInfo
     *
     * Delete the document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocument"][0]
    ) {
        $request = $this->deleteDocumentRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDocumentAsync
     *
     * Delete the document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocument"][0]
    ) {
        return $this->deleteDocumentAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteDocumentAsyncWithHttpInfo
     *
     * Delete the document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocument"][0]
    ) {
        $returnType = "";
        $request = $this->deleteDocumentRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDocument'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDocumentRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocument"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteDocument'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDocument'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteDocument'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/document/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDocumentTag
     *
     * Delete a tag from a document
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDocumentTag(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocumentTag"][0]
    ) {
        $this->deleteDocumentTagWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteDocumentTagWithHttpInfo
     *
     * Delete a tag from a document
     *
     * @param  int $cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDocumentTagWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocumentTag"][0]
    ) {
        $request = $this->deleteDocumentTagRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDocumentTagAsync
     *
     * Delete a tag from a document
     *
     * @param  int $cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentTagAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocumentTag"][0]
    ) {
        return $this->deleteDocumentTagAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteDocumentTagAsyncWithHttpInfo
     *
     * Delete a tag from a document
     *
     * @param  int $cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDocumentTagAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocumentTag"][0]
    ) {
        $returnType = "";
        $request = $this->deleteDocumentTagRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDocumentTag'
     *
     * @param  int $cloud_pk (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDocumentTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDocumentTagRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteDocumentTag"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteDocumentTag'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling deleteDocumentTag'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDocumentTag'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteDocumentTag'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/tag/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteFolder
     *
     * Delete a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFolder(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteFolder"][0]
    ) {
        $this->deleteFolderWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteFolderWithHttpInfo
     *
     * Delete a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFolderWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteFolder"][0]
    ) {
        $request = $this->deleteFolderRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFolderAsync
     *
     * Delete a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFolderAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteFolder"][0]
    ) {
        return $this->deleteFolderAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteFolderAsyncWithHttpInfo
     *
     * Delete a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFolderAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteFolder"][0]
    ) {
        $returnType = "";
        $request = $this->deleteFolderRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFolder'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFolderRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteFolder"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteFolder'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteFolder'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteFolder'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/folder/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteGroupMember
     *
     * Delete a user from a group
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupMember'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteGroupMember(
        $cloud_pk,
        $group_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteGroupMember"][0]
    ) {
        $this->deleteGroupMemberWithHttpInfo(
            $cloud_pk,
            $group_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteGroupMemberWithHttpInfo
     *
     * Delete a user from a group
     *
     * @param  int $cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupMember'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGroupMemberWithHttpInfo(
        $cloud_pk,
        $group_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteGroupMember"][0]
    ) {
        $request = $this->deleteGroupMemberRequest(
            $cloud_pk,
            $group_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteGroupMemberAsync
     *
     * Delete a user from a group
     *
     * @param  int $cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGroupMemberAsync(
        $cloud_pk,
        $group_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteGroupMember"][0]
    ) {
        return $this->deleteGroupMemberAsyncWithHttpInfo(
            $cloud_pk,
            $group_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteGroupMemberAsyncWithHttpInfo
     *
     * Delete a user from a group
     *
     * @param  int $cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGroupMemberAsyncWithHttpInfo(
        $cloud_pk,
        $group_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteGroupMember"][0]
    ) {
        $returnType = "";
        $request = $this->deleteGroupMemberRequest(
            $cloud_pk,
            $group_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteGroupMember'
     *
     * @param  int $cloud_pk (required)
     * @param  int $group_pk A unique integer value identifying this group. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGroupMember'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteGroupMemberRequest(
        $cloud_pk,
        $group_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteGroupMember"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteGroupMember'
            );
        }

        // verify the required parameter 'group_pk' is set
        if (
            $group_pk === null ||
            (is_array($group_pk) && count($group_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_pk when calling deleteGroupMember'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteGroupMember'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteGroupMember'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/group/{group_pk}/member/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($group_pk !== null) {
            $resourcePath = str_replace(
                "{" . "group_pk" . "}",
                ObjectSerializer::toPathValue($group_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteManageGroup
     *
     * Delete a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteManageGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteManageGroup(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteManageGroup"][0]
    ) {
        $this->deleteManageGroupWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteManageGroupWithHttpInfo
     *
     * Delete a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteManageGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteManageGroupWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteManageGroup"][0]
    ) {
        $request = $this->deleteManageGroupRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteManageGroupAsync
     *
     * Delete a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManageGroupAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteManageGroup"][0]
    ) {
        return $this->deleteManageGroupAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteManageGroupAsyncWithHttpInfo
     *
     * Delete a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteManageGroupAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteManageGroup"][0]
    ) {
        $returnType = "";
        $request = $this->deleteManageGroupRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteManageGroup'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteManageGroupRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteManageGroup"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteManageGroup'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteManageGroup'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteManageGroup'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/group/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProject
     *
     * Delete a project
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProject(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteProject"][0]
    ) {
        $this->deleteProjectWithHttpInfo($cloud_pk, $id, $contentType);
    }

    /**
     * Operation deleteProjectWithHttpInfo
     *
     * Delete a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteProject"][0]
    ) {
        $request = $this->deleteProjectRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectAsync
     *
     * Delete a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteProject"][0]
    ) {
        return $this->deleteProjectAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteProjectAsyncWithHttpInfo
     *
     * Delete a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteProject"][0]
    ) {
        $returnType = "";
        $request = $this->deleteProjectRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProject'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProjectRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["deleteProject"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteProject'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteProject'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProjectAccessToken
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProjectAccessToken(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteProjectAccessToken"][0]
    ) {
        $this->deleteProjectAccessTokenWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $token,
            $contentType
        );
    }

    /**
     * Operation deleteProjectAccessTokenWithHttpInfo
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectAccessTokenWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteProjectAccessToken"][0]
    ) {
        $request = $this->deleteProjectAccessTokenRequest(
            $cloud_pk,
            $project_pk,
            $token,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectAccessTokenAsync
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAccessTokenAsync(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteProjectAccessToken"][0]
    ) {
        return $this->deleteProjectAccessTokenAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $token,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteProjectAccessTokenAsyncWithHttpInfo
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectAccessTokenAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteProjectAccessToken"][0]
    ) {
        $returnType = "";
        $request = $this->deleteProjectAccessTokenRequest(
            $cloud_pk,
            $project_pk,
            $token,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProjectAccessToken'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProjectAccessTokenRequest(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteProjectAccessToken"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteProjectAccessToken'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteProjectAccessToken'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteProjectAccessToken'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProjectUser
     *
     * Remove a user from a project
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProjectUser(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteProjectUser"][0]
    ) {
        $this->deleteProjectUserWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteProjectUserWithHttpInfo
     *
     * Remove a user from a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProjectUserWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteProjectUser"][0]
    ) {
        $request = $this->deleteProjectUserRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProjectUserAsync
     *
     * Remove a user from a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectUserAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteProjectUser"][0]
    ) {
        return $this->deleteProjectUserAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteProjectUserAsyncWithHttpInfo
     *
     * Remove a user from a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProjectUserAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteProjectUser"][0]
    ) {
        $returnType = "";
        $request = $this->deleteProjectUserRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProjectUser'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProjectUserRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteProjectUser"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteProjectUser'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteProjectUser'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteProjectUser'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/user/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTag
     *
     * Delete the tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTag(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteTag"][0]
    ) {
        $this->deleteTagWithHttpInfo($cloud_pk, $id, $project_pk, $contentType);
    }

    /**
     * Operation deleteTagWithHttpInfo
     *
     * Delete the tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTagWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteTag"][0]
    ) {
        $request = $this->deleteTagRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTagAsync
     *
     * Delete the tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteTag"][0]
    ) {
        return $this->deleteTagAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteTagAsyncWithHttpInfo
     *
     * Delete the tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTagAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteTag"][0]
    ) {
        $returnType = "";
        $request = $this->deleteTagRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTag'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTagRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteTag"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteTag'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteTag'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteTag'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/tag/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteValidation
     *
     * Remove a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteValidation(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteValidation"][0]
    ) {
        $this->deleteValidationWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );
    }

    /**
     * Operation deleteValidationWithHttpInfo
     *
     * Remove a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteValidationWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteValidation"][0]
    ) {
        $request = $this->deleteValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteValidationAsync
     *
     * Remove a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteValidationAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteValidation"][0]
    ) {
        return $this->deleteValidationAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteValidationAsyncWithHttpInfo
     *
     * Remove a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteValidationAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteValidation"][0]
    ) {
        $returnType = "";
        $request = $this->deleteValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteValidation'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteValidationRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteValidation"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteValidation'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling deleteValidation'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteValidation'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteValidation'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling deleteValidation'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVisa
     *
     * Remove a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVisa(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteVisa"][0]
    ) {
        $this->deleteVisaWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteVisaWithHttpInfo
     *
     * Remove a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVisaWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteVisa"][0]
    ) {
        $request = $this->deleteVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVisaAsync
     *
     * Remove a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVisaAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteVisa"][0]
    ) {
        return $this->deleteVisaAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteVisaAsyncWithHttpInfo
     *
     * Remove a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVisaAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteVisa"][0]
    ) {
        $returnType = "";
        $request = $this->deleteVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVisa'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteVisaRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteVisa"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteVisa'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling deleteVisa'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteVisa'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteVisa'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteVisaComment
     *
     * Remove a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisaComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVisaComment(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteVisaComment"][0]
    ) {
        $this->deleteVisaCommentWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );
    }

    /**
     * Operation deleteVisaCommentWithHttpInfo
     *
     * Remove a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisaComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVisaCommentWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteVisaComment"][0]
    ) {
        $request = $this->deleteVisaCommentRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVisaCommentAsync
     *
     * Remove a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVisaCommentAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteVisaComment"][0]
    ) {
        return $this->deleteVisaCommentAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteVisaCommentAsyncWithHttpInfo
     *
     * Remove a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVisaCommentAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteVisaComment"][0]
    ) {
        $returnType = "";
        $request = $this->deleteVisaCommentRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVisaComment'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteVisaCommentRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["deleteVisaComment"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteVisaComment'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling deleteVisaComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteVisaComment'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteVisaComment'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling deleteVisaComment'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation denyUserInvitation
     *
     * Deny an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function denyUserInvitation(
        $id,
        string $contentType = self::contentTypes["denyUserInvitation"][0]
    ) {
        $this->denyUserInvitationWithHttpInfo($id, $contentType);
    }

    /**
     * Operation denyUserInvitationWithHttpInfo
     *
     * Deny an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function denyUserInvitationWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["denyUserInvitation"][0]
    ) {
        $request = $this->denyUserInvitationRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation denyUserInvitationAsync
     *
     * Deny an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function denyUserInvitationAsync(
        $id,
        string $contentType = self::contentTypes["denyUserInvitation"][0]
    ) {
        return $this->denyUserInvitationAsyncWithHttpInfo(
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation denyUserInvitationAsyncWithHttpInfo
     *
     * Deny an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function denyUserInvitationAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["denyUserInvitation"][0]
    ) {
        $returnType = "";
        $request = $this->denyUserInvitationRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'denyUserInvitation'
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function denyUserInvitationRequest(
        $id,
        string $contentType = self::contentTypes["denyUserInvitation"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling denyUserInvitation'
            );
        }

        $resourcePath = "/user/invitations/{id}/deny";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation denyValidation
     *
     * Deny a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function denyValidation(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["denyValidation"][0]
    ) {
        $this->denyValidationWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );
    }

    /**
     * Operation denyValidationWithHttpInfo
     *
     * Deny a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function denyValidationWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["denyValidation"][0]
    ) {
        $request = $this->denyValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation denyValidationAsync
     *
     * Deny a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function denyValidationAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["denyValidation"][0]
    ) {
        return $this->denyValidationAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation denyValidationAsyncWithHttpInfo
     *
     * Deny a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function denyValidationAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["denyValidation"][0]
    ) {
        $returnType = "";
        $request = $this->denyValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'denyValidation'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function denyValidationRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["denyValidation"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling denyValidation'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling denyValidation'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling denyValidation'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling denyValidation'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling denyValidation'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/deny";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClassification
     *
     * Retrieve a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification
     */
    public function getClassification(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getClassification"][0]
    ) {
        list($response) = $this->getClassificationWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getClassificationWithHttpInfo
     *
     * Retrieve a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClassificationWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getClassification"][0]
    ) {
        $request = $this->getClassificationRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClassificationAsync
     *
     * Retrieve a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClassificationAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getClassification"][0]
    ) {
        return $this->getClassificationAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getClassificationAsyncWithHttpInfo
     *
     * Retrieve a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClassificationAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getClassification"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification";
        $request = $this->getClassificationRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClassification'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClassificationRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getClassification"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getClassification'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getClassification'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getClassification'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/classification/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClassifications
     *
     * Retrieve all classifications
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     */
    public function getClassifications(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getClassifications"][0]
    ) {
        list($response) = $this->getClassificationsWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getClassificationsWithHttpInfo
     *
     * Retrieve all classifications
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getClassificationsWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getClassifications"][0]
    ) {
        $request = $this->getClassificationsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClassificationsAsync
     *
     * Retrieve all classifications
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClassificationsAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getClassifications"][0]
    ) {
        return $this->getClassificationsAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getClassificationsAsyncWithHttpInfo
     *
     * Retrieve all classifications
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClassificationsAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getClassifications"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification[]";
        $request = $this->getClassificationsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClassifications'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClassificationsRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getClassifications"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getClassifications'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getClassifications'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/classification";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloud
     *
     * Retrieve one cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloud'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Cloud
     */
    public function getCloud(
        $id,
        string $contentType = self::contentTypes["getCloud"][0]
    ) {
        list($response) = $this->getCloudWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getCloudWithHttpInfo
     *
     * Retrieve one cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloud'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Cloud, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["getCloud"][0]
    ) {
        $request = $this->getCloudRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Cloud" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Cloud" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Cloud",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Cloud";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Cloud",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudAsync
     *
     * Retrieve one cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudAsync(
        $id,
        string $contentType = self::contentTypes["getCloud"][0]
    ) {
        return $this->getCloudAsyncWithHttpInfo($id, $contentType)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation getCloudAsyncWithHttpInfo
     *
     * Retrieve one cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["getCloud"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Cloud";
        $request = $this->getCloudRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloud'
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCloudRequest(
        $id,
        string $contentType = self::contentTypes["getCloud"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCloud'
            );
        }

        $resourcePath = "/cloud/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudInvitations
     *
     * Retrieve all pending invitations in the cloud
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudInvitations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CloudInvitation[]
     */
    public function getCloudInvitations(
        $cloud_pk,
        string $contentType = self::contentTypes["getCloudInvitations"][0]
    ) {
        list($response) = $this->getCloudInvitationsWithHttpInfo(
            $cloud_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCloudInvitationsWithHttpInfo
     *
     * Retrieve all pending invitations in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudInvitations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CloudInvitation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudInvitationsWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes["getCloudInvitations"][0]
    ) {
        $request = $this->getCloudInvitationsRequest($cloud_pk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CloudInvitation[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CloudInvitation[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CloudInvitation[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CloudInvitation[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CloudInvitation[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudInvitationsAsync
     *
     * Retrieve all pending invitations in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudInvitationsAsync(
        $cloud_pk,
        string $contentType = self::contentTypes["getCloudInvitations"][0]
    ) {
        return $this->getCloudInvitationsAsyncWithHttpInfo(
            $cloud_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCloudInvitationsAsyncWithHttpInfo
     *
     * Retrieve all pending invitations in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudInvitationsAsyncWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes["getCloudInvitations"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CloudInvitation[]";
        $request = $this->getCloudInvitationsRequest($cloud_pk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudInvitations'
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCloudInvitationsRequest(
        $cloud_pk,
        string $contentType = self::contentTypes["getCloudInvitations"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCloudInvitations'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/invitation";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudSize
     *
     * Get size of the cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudSize'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Size
     */
    public function getCloudSize(
        $id,
        string $contentType = self::contentTypes["getCloudSize"][0]
    ) {
        list($response) = $this->getCloudSizeWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getCloudSizeWithHttpInfo
     *
     * Get size of the cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudSize'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Size, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudSizeWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["getCloudSize"][0]
    ) {
        $request = $this->getCloudSizeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Size" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Size" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Size",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Size";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Size",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudSizeAsync
     *
     * Get size of the cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudSize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudSizeAsync(
        $id,
        string $contentType = self::contentTypes["getCloudSize"][0]
    ) {
        return $this->getCloudSizeAsyncWithHttpInfo($id, $contentType)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation getCloudSizeAsyncWithHttpInfo
     *
     * Get size of the cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudSize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudSizeAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["getCloudSize"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Size";
        $request = $this->getCloudSizeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudSize'
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudSize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCloudSizeRequest(
        $id,
        string $contentType = self::contentTypes["getCloudSize"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCloudSize'
            );
        }

        $resourcePath = "/cloud/{id}/size";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudUser
     *
     * Retrieve a user in a cloud
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User
     */
    public function getCloudUser(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getCloudUser"][0]
    ) {
        list($response) = $this->getCloudUserWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCloudUserWithHttpInfo
     *
     * Retrieve a user in a cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudUserWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getCloudUser"][0]
    ) {
        $request = $this->getCloudUserRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\User" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\User" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\User",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\User";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\User",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudUserAsync
     *
     * Retrieve a user in a cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudUserAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getCloudUser"][0]
    ) {
        return $this->getCloudUserAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCloudUserAsyncWithHttpInfo
     *
     * Retrieve a user in a cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudUserAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getCloudUser"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\User";
        $request = $this->getCloudUserRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudUser'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCloudUserRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getCloudUser"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCloudUser'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCloudUser'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/user/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudUsers
     *
     * Retrieve all users in a cloud, or a list with a filter by email
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  string $email email (optional)
     * @param  string $email__contains email__contains (optional)
     * @param  string $email__endswith email__endswith (optional)
     * @param  string $email__startswith email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User[]
     */
    public function getCloudUsers(
        $cloud_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getCloudUsers"][0]
    ) {
        list($response) = $this->getCloudUsersWithHttpInfo(
            $cloud_pk,
            $email,
            $email__contains,
            $email__endswith,
            $email__startswith,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCloudUsersWithHttpInfo
     *
     * Retrieve all users in a cloud, or a list with a filter by email
     *
     * @param  int $cloud_pk (required)
     * @param  string $email (optional)
     * @param  string $email__contains (optional)
     * @param  string $email__endswith (optional)
     * @param  string $email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudUsersWithHttpInfo(
        $cloud_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getCloudUsers"][0]
    ) {
        $request = $this->getCloudUsersRequest(
            $cloud_pk,
            $email,
            $email__contains,
            $email__endswith,
            $email__startswith,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\User[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\User[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\User[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\User[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\User[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudUsersAsync
     *
     * Retrieve all users in a cloud, or a list with a filter by email
     *
     * @param  int $cloud_pk (required)
     * @param  string $email (optional)
     * @param  string $email__contains (optional)
     * @param  string $email__endswith (optional)
     * @param  string $email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudUsersAsync(
        $cloud_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getCloudUsers"][0]
    ) {
        return $this->getCloudUsersAsyncWithHttpInfo(
            $cloud_pk,
            $email,
            $email__contains,
            $email__endswith,
            $email__startswith,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCloudUsersAsyncWithHttpInfo
     *
     * Retrieve all users in a cloud, or a list with a filter by email
     *
     * @param  int $cloud_pk (required)
     * @param  string $email (optional)
     * @param  string $email__contains (optional)
     * @param  string $email__endswith (optional)
     * @param  string $email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudUsersAsyncWithHttpInfo(
        $cloud_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getCloudUsers"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\User[]";
        $request = $this->getCloudUsersRequest(
            $cloud_pk,
            $email,
            $email__contains,
            $email__endswith,
            $email__startswith,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudUsers'
     *
     * @param  int $cloud_pk (required)
     * @param  string $email (optional)
     * @param  string $email__contains (optional)
     * @param  string $email__endswith (optional)
     * @param  string $email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCloudUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCloudUsersRequest(
        $cloud_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getCloudUsers"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCloudUsers'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/user";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $email,
                "email", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $email__contains,
                "email__contains", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $email__endswith,
                "email__endswith", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $email__startswith,
                "email__startswith", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClouds
     *
     * Retrieve all clouds
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClouds'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Cloud[]
     */
    public function getClouds(
        string $contentType = self::contentTypes["getClouds"][0]
    ) {
        list($response) = $this->getCloudsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getCloudsWithHttpInfo
     *
     * Retrieve all clouds
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClouds'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Cloud[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudsWithHttpInfo(
        string $contentType = self::contentTypes["getClouds"][0]
    ) {
        $request = $this->getCloudsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Cloud[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Cloud[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Cloud[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Cloud[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Cloud[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudsAsync
     *
     * Retrieve all clouds
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClouds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudsAsync(
        string $contentType = self::contentTypes["getClouds"][0]
    ) {
        return $this->getCloudsAsyncWithHttpInfo($contentType)->then(function (
            $response
        ) {
            return $response[0];
        });
    }

    /**
     * Operation getCloudsAsyncWithHttpInfo
     *
     * Retrieve all clouds
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClouds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudsAsyncWithHttpInfo(
        string $contentType = self::contentTypes["getClouds"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Cloud[]";
        $request = $this->getCloudsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClouds'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClouds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCloudsRequest(
        string $contentType = self::contentTypes["getClouds"][0]
    ) {
        $resourcePath = "/cloud";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocument
     *
     * Retrieve a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document
     */
    public function getDocument(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getDocument"][0]
    ) {
        list($response) = $this->getDocumentWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getDocumentWithHttpInfo
     *
     * Retrieve a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getDocument"][0]
    ) {
        $request = $this->getDocumentRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Document" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentAsync
     *
     * Retrieve a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getDocument"][0]
    ) {
        return $this->getDocumentAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getDocumentAsyncWithHttpInfo
     *
     * Retrieve a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getDocument"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document";
        $request = $this->getDocumentRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocument'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getDocument"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getDocument'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDocument'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getDocument'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/document/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentHistories
     *
     * Retrieve all document histories
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentHistories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document[]
     */
    public function getDocumentHistories(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentHistories"][0]
    ) {
        list($response) = $this->getDocumentHistoriesWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getDocumentHistoriesWithHttpInfo
     *
     * Retrieve all document histories
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentHistories'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentHistoriesWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentHistories"][0]
    ) {
        $request = $this->getDocumentHistoriesRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Document[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentHistoriesAsync
     *
     * Retrieve all document histories
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentHistories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentHistoriesAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentHistories"][0]
    ) {
        return $this->getDocumentHistoriesAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getDocumentHistoriesAsyncWithHttpInfo
     *
     * Retrieve all document histories
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentHistories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentHistoriesAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentHistories"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document[]";
        $request = $this->getDocumentHistoriesRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentHistories'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentHistories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentHistoriesRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentHistories"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getDocumentHistories'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling getDocumentHistories'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getDocumentHistories'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocuments
     *
     * Retrieve all documents
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document[]
     */
    public function getDocuments(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocuments"][0]
    ) {
        list($response) = $this->getDocumentsWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getDocumentsWithHttpInfo
     *
     * Retrieve all documents
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentsWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocuments"][0]
    ) {
        $request = $this->getDocumentsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Document[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentsAsync
     *
     * Retrieve all documents
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocuments"][0]
    ) {
        return $this->getDocumentsAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getDocumentsAsyncWithHttpInfo
     *
     * Retrieve all documents
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocuments"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document[]";
        $request = $this->getDocumentsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocuments'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentsRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocuments"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getDocuments'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getDocuments'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/document";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolder
     *
     * Retrieve a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FolderWithoutChildren
     */
    public function getFolder(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getFolder"][0]
    ) {
        list($response) = $this->getFolderWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getFolderWithHttpInfo
     *
     * Retrieve a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FolderWithoutChildren, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getFolder"][0]
    ) {
        $request = $this->getFolderRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\FolderWithoutChildren" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\FolderWithoutChildren" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\FolderWithoutChildren",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\FolderWithoutChildren";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\FolderWithoutChildren",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFolderAsync
     *
     * Retrieve a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getFolder"][0]
    ) {
        return $this->getFolderAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getFolderAsyncWithHttpInfo
     *
     * Retrieve a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getFolder"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\FolderWithoutChildren";
        $request = $this->getFolderRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolder'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFolderRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getFolder"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getFolder'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getFolder'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getFolder'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/folder/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolderProjectUsers
     *
     * Retrieve all users in a project with the permission on the folder
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $folder_pk A unique integer value identifying this folder. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderProjectUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FolderUserProject[]
     */
    public function getFolderProjectUsers(
        $cloud_pk,
        $folder_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolderProjectUsers"][0]
    ) {
        list($response) = $this->getFolderProjectUsersWithHttpInfo(
            $cloud_pk,
            $folder_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getFolderProjectUsersWithHttpInfo
     *
     * Retrieve all users in a project with the permission on the folder
     *
     * @param  int $cloud_pk (required)
     * @param  int $folder_pk A unique integer value identifying this folder. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderProjectUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FolderUserProject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFolderProjectUsersWithHttpInfo(
        $cloud_pk,
        $folder_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolderProjectUsers"][0]
    ) {
        $request = $this->getFolderProjectUsersRequest(
            $cloud_pk,
            $folder_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\FolderUserProject[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\FolderUserProject[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\FolderUserProject[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\FolderUserProject[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\FolderUserProject[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFolderProjectUsersAsync
     *
     * Retrieve all users in a project with the permission on the folder
     *
     * @param  int $cloud_pk (required)
     * @param  int $folder_pk A unique integer value identifying this folder. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderProjectUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderProjectUsersAsync(
        $cloud_pk,
        $folder_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolderProjectUsers"][0]
    ) {
        return $this->getFolderProjectUsersAsyncWithHttpInfo(
            $cloud_pk,
            $folder_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getFolderProjectUsersAsyncWithHttpInfo
     *
     * Retrieve all users in a project with the permission on the folder
     *
     * @param  int $cloud_pk (required)
     * @param  int $folder_pk A unique integer value identifying this folder. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderProjectUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFolderProjectUsersAsyncWithHttpInfo(
        $cloud_pk,
        $folder_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolderProjectUsers"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\FolderUserProject[]";
        $request = $this->getFolderProjectUsersRequest(
            $cloud_pk,
            $folder_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolderProjectUsers'
     *
     * @param  int $cloud_pk (required)
     * @param  int $folder_pk A unique integer value identifying this folder. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolderProjectUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFolderProjectUsersRequest(
        $cloud_pk,
        $folder_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolderProjectUsers"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getFolderProjectUsers'
            );
        }

        // verify the required parameter 'folder_pk' is set
        if (
            $folder_pk === null ||
            (is_array($folder_pk) && count($folder_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder_pk when calling getFolderProjectUsers'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getFolderProjectUsers'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/user";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($folder_pk !== null) {
            $resourcePath = str_replace(
                "{" . "folder_pk" . "}",
                ObjectSerializer::toPathValue($folder_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFolders
     *
     * Retrieve all folders
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FolderWithoutChildren[]
     */
    public function getFolders(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolders"][0]
    ) {
        list($response) = $this->getFoldersWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getFoldersWithHttpInfo
     *
     * Retrieve all folders
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolders'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FolderWithoutChildren[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getFoldersWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolders"][0]
    ) {
        $request = $this->getFoldersRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\FolderWithoutChildren[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\FolderWithoutChildren[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\FolderWithoutChildren[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\FolderWithoutChildren[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\FolderWithoutChildren[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFoldersAsync
     *
     * Retrieve all folders
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFoldersAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolders"][0]
    ) {
        return $this->getFoldersAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getFoldersAsyncWithHttpInfo
     *
     * Retrieve all folders
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFoldersAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolders"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\FolderWithoutChildren[]";
        $request = $this->getFoldersRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFolders'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFolders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFoldersRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getFolders"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getFolders'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getFolders'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/folder";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroup
     *
     * Retrieve a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Group
     */
    public function getGroup(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getGroup"][0]
    ) {
        list($response) = $this->getGroupWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getGroupWithHttpInfo
     *
     * Retrieve a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getGroup"][0]
    ) {
        $request = $this->getGroupRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Group" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Group" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Group",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Group";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Group",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupAsync
     *
     * Retrieve a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getGroup"][0]
    ) {
        return $this->getGroupAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getGroupAsyncWithHttpInfo
     *
     * Retrieve a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getGroup"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Group";
        $request = $this->getGroupRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroup'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getGroup"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getGroup'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getGroup'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getGroup'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/me/group/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGroups
     *
     * Retrieve all groups
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Group[]
     */
    public function getGroups(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getGroups"][0]
    ) {
        list($response) = $this->getGroupsWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getGroupsWithHttpInfo
     *
     * Retrieve all groups
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Group[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getGroupsWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getGroups"][0]
    ) {
        $request = $this->getGroupsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Group[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Group[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Group[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Group[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Group[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGroupsAsync
     *
     * Retrieve all groups
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getGroups"][0]
    ) {
        return $this->getGroupsAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getGroupsAsyncWithHttpInfo
     *
     * Retrieve all groups
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGroupsAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getGroups"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Group[]";
        $request = $this->getGroupsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGroups'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGroupsRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getGroups"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getGroups'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getGroups'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/me/group";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManageGroup
     *
     * Retrieve a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Group
     */
    public function getManageGroup(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroup"][0]
    ) {
        list($response) = $this->getManageGroupWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getManageGroupWithHttpInfo
     *
     * Retrieve a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function getManageGroupWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroup"][0]
    ) {
        $request = $this->getManageGroupRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Group" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Group" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Group",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Group";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Group",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getManageGroupAsync
     *
     * Retrieve a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageGroupAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroup"][0]
    ) {
        return $this->getManageGroupAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getManageGroupAsyncWithHttpInfo
     *
     * Retrieve a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageGroupAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroup"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Group";
        $request = $this->getManageGroupRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManageGroup'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getManageGroupRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroup"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getManageGroup'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getManageGroup'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getManageGroup'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/group/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManageGroups
     *
     * Retrieve all groups
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Group[]
     */
    public function getManageGroups(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroups"][0]
    ) {
        list($response) = $this->getManageGroupsWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getManageGroupsWithHttpInfo
     *
     * Retrieve all groups
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Group[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getManageGroupsWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroups"][0]
    ) {
        $request = $this->getManageGroupsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Group[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Group[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Group[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Group[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Group[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getManageGroupsAsync
     *
     * Retrieve all groups
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageGroupsAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroups"][0]
    ) {
        return $this->getManageGroupsAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getManageGroupsAsyncWithHttpInfo
     *
     * Retrieve all groups
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManageGroupsAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroups"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Group[]";
        $request = $this->getManageGroupsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManageGroups'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManageGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getManageGroupsRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getManageGroups"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getManageGroups'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getManageGroups'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/group";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProject
     *
     * Retrieve a project
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectWithChildren
     */
    public function getProject(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProject"][0]
    ) {
        list($response) = $this->getProjectWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectWithHttpInfo
     *
     * Retrieve a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectWithChildren, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProject"][0]
    ) {
        $request = $this->getProjectRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProjectWithChildren" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectWithChildren" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectWithChildren",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectWithChildren";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectWithChildren",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectAsync
     *
     * Retrieve a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProject"][0]
    ) {
        return $this->getProjectAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectAsyncWithHttpInfo
     *
     * Retrieve a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProject"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectWithChildren";
        $request = $this->getProjectRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProject'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProject"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProject'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProject'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectAccessToken
     *
     * Retrieve one token created for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectAccessToken
     */
    public function getProjectAccessToken(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getProjectAccessToken"][0]
    ) {
        list($response) = $this->getProjectAccessTokenWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $token,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectAccessTokenWithHttpInfo
     *
     * Retrieve one token created for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectAccessTokenWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getProjectAccessToken"][0]
    ) {
        $request = $this->getProjectAccessTokenRequest(
            $cloud_pk,
            $project_pk,
            $token,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProjectAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectAccessToken" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectAccessTokenAsync
     *
     * Retrieve one token created for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAccessTokenAsync(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getProjectAccessToken"][0]
    ) {
        return $this->getProjectAccessTokenAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $token,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectAccessTokenAsyncWithHttpInfo
     *
     * Retrieve one token created for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAccessTokenAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getProjectAccessToken"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectAccessToken";
        $request = $this->getProjectAccessTokenRequest(
            $cloud_pk,
            $project_pk,
            $token,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectAccessToken'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectAccessTokenRequest(
        $cloud_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getProjectAccessToken"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectAccessToken'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProjectAccessToken'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getProjectAccessToken'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectAccessTokens
     *
     * Retrieve all tokens created for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessTokens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectAccessToken[]
     */
    public function getProjectAccessTokens(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectAccessTokens"][0]
    ) {
        list($response) = $this->getProjectAccessTokensWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectAccessTokensWithHttpInfo
     *
     * Retrieve all tokens created for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessTokens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectAccessToken[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectAccessTokensWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectAccessTokens"][0]
    ) {
        $request = $this->getProjectAccessTokensRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProjectAccessToken[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectAccessToken[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectAccessToken[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectAccessToken[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectAccessToken[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectAccessTokensAsync
     *
     * Retrieve all tokens created for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAccessTokensAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectAccessTokens"][0]
    ) {
        return $this->getProjectAccessTokensAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectAccessTokensAsyncWithHttpInfo
     *
     * Retrieve all tokens created for this project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectAccessTokensAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectAccessTokens"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectAccessToken[]";
        $request = $this->getProjectAccessTokensRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectAccessTokens'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectAccessTokensRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectAccessTokens"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectAccessTokens'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProjectAccessTokens'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/access-token";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectCreatorVisas
     *
     * List visas created by user
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectCreatorVisas'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Visa[]
     */
    public function getProjectCreatorVisas(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectCreatorVisas"][0]
    ) {
        list($response) = $this->getProjectCreatorVisasWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectCreatorVisasWithHttpInfo
     *
     * List visas created by user
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectCreatorVisas'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Visa[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectCreatorVisasWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectCreatorVisas"][0]
    ) {
        $request = $this->getProjectCreatorVisasRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Visa[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Visa[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Visa[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Visa[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Visa[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectCreatorVisasAsync
     *
     * List visas created by user
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectCreatorVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectCreatorVisasAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectCreatorVisas"][0]
    ) {
        return $this->getProjectCreatorVisasAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectCreatorVisasAsyncWithHttpInfo
     *
     * List visas created by user
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectCreatorVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectCreatorVisasAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectCreatorVisas"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Visa[]";
        $request = $this->getProjectCreatorVisasRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectCreatorVisas'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectCreatorVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectCreatorVisasRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectCreatorVisas"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectCreatorVisas'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProjectCreatorVisas'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/me/visa/creator";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectDMSTree
     *
     * Retrieve the complete DMS tree
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDMSTree'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Folder
     */
    public function getProjectDMSTree(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectDMSTree"][0]
    ) {
        list($response) = $this->getProjectDMSTreeWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectDMSTreeWithHttpInfo
     *
     * Retrieve the complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDMSTree'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Folder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectDMSTreeWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectDMSTree"][0]
    ) {
        $request = $this->getProjectDMSTreeRequest(
            $cloud_pk,
            $id,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Folder" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Folder" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Folder",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Folder";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Folder",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectDMSTreeAsync
     *
     * Retrieve the complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDMSTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectDMSTreeAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectDMSTree"][0]
    ) {
        return $this->getProjectDMSTreeAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectDMSTreeAsyncWithHttpInfo
     *
     * Retrieve the complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDMSTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectDMSTreeAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectDMSTree"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Folder";
        $request = $this->getProjectDMSTreeRequest(
            $cloud_pk,
            $id,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectDMSTree'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectDMSTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectDMSTreeRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectDMSTree"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectDMSTree'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProjectDMSTree'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{id}/dms-tree";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectFolderTreeSerializers
     *
     * Retrieve folder tree for all projects
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectFolderTreeSerializers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectFolderTree[]
     */
    public function getProjectFolderTreeSerializers(
        $cloud_pk,
        string $contentType = self::contentTypes[
            "getProjectFolderTreeSerializers"
        ][0]
    ) {
        list($response) = $this->getProjectFolderTreeSerializersWithHttpInfo(
            $cloud_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectFolderTreeSerializersWithHttpInfo
     *
     * Retrieve folder tree for all projects
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectFolderTreeSerializers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectFolderTree[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectFolderTreeSerializersWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes[
            "getProjectFolderTreeSerializers"
        ][0]
    ) {
        $request = $this->getProjectFolderTreeSerializersRequest(
            $cloud_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProjectFolderTree[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectFolderTree[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectFolderTree[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectFolderTree[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectFolderTree[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectFolderTreeSerializersAsync
     *
     * Retrieve folder tree for all projects
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectFolderTreeSerializers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectFolderTreeSerializersAsync(
        $cloud_pk,
        string $contentType = self::contentTypes[
            "getProjectFolderTreeSerializers"
        ][0]
    ) {
        return $this->getProjectFolderTreeSerializersAsyncWithHttpInfo(
            $cloud_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectFolderTreeSerializersAsyncWithHttpInfo
     *
     * Retrieve folder tree for all projects
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectFolderTreeSerializers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectFolderTreeSerializersAsyncWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes[
            "getProjectFolderTreeSerializers"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectFolderTree[]";
        $request = $this->getProjectFolderTreeSerializersRequest(
            $cloud_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectFolderTreeSerializers'
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectFolderTreeSerializers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectFolderTreeSerializersRequest(
        $cloud_pk,
        string $contentType = self::contentTypes[
            "getProjectFolderTreeSerializers"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectFolderTreeSerializers'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/folder-trees";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectInvitations
     *
     * Retrieve all pending invitations in the project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectInvitations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectInvitation[]
     */
    public function getProjectInvitations(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectInvitations"][0]
    ) {
        list($response) = $this->getProjectInvitationsWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectInvitationsWithHttpInfo
     *
     * Retrieve all pending invitations in the project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectInvitations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectInvitation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectInvitationsWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectInvitations"][0]
    ) {
        $request = $this->getProjectInvitationsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProjectInvitation[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectInvitation[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectInvitation[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectInvitation[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectInvitation[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectInvitationsAsync
     *
     * Retrieve all pending invitations in the project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectInvitationsAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectInvitations"][0]
    ) {
        return $this->getProjectInvitationsAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectInvitationsAsyncWithHttpInfo
     *
     * Retrieve all pending invitations in the project
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectInvitationsAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectInvitations"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectInvitation[]";
        $request = $this->getProjectInvitationsRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectInvitations'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectInvitationsRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectInvitations"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectInvitations'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProjectInvitations'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/invitation";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectSize
     *
     * Get size of all model files in the project
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSize'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectSize
     */
    public function getProjectSize(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectSize"][0]
    ) {
        list($response) = $this->getProjectSizeWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectSizeWithHttpInfo
     *
     * Get size of all model files in the project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSize'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectSize, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectSizeWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectSize"][0]
    ) {
        $request = $this->getProjectSizeRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProjectSize" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ProjectSize" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectSize",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectSize";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectSize",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectSizeAsync
     *
     * Get size of all model files in the project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectSizeAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectSize"][0]
    ) {
        return $this->getProjectSizeAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectSizeAsyncWithHttpInfo
     *
     * Get size of all model files in the project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectSizeAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectSize"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectSize";
        $request = $this->getProjectSizeRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectSize'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectSizeRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectSize"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectSize'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProjectSize'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{id}/size";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectSubTree
     *
     * Retrieve the complete projects tree of the cloud
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSubTree'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectWithChildren[]
     */
    public function getProjectSubTree(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjectSubTree"][0]
    ) {
        list($response) = $this->getProjectSubTreeWithHttpInfo(
            $cloud_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectSubTreeWithHttpInfo
     *
     * Retrieve the complete projects tree of the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSubTree'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectWithChildren[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectSubTreeWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjectSubTree"][0]
    ) {
        $request = $this->getProjectSubTreeRequest($cloud_pk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProjectWithChildren[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectWithChildren[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectWithChildren[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectWithChildren[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectWithChildren[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectSubTreeAsync
     *
     * Retrieve the complete projects tree of the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSubTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectSubTreeAsync(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjectSubTree"][0]
    ) {
        return $this->getProjectSubTreeAsyncWithHttpInfo(
            $cloud_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectSubTreeAsyncWithHttpInfo
     *
     * Retrieve the complete projects tree of the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSubTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectSubTreeAsyncWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjectSubTree"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectWithChildren[]";
        $request = $this->getProjectSubTreeRequest($cloud_pk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectSubTree'
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectSubTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectSubTreeRequest(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjectSubTree"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectSubTree'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/subtree";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectTree
     *
     * Retrieve the complete DMS tree
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectTree'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Folder
     * @deprecated
     */
    public function getProjectTree(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectTree"][0]
    ) {
        list($response) = $this->getProjectTreeWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectTreeWithHttpInfo
     *
     * Retrieve the complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectTree'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Folder, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getProjectTreeWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectTree"][0]
    ) {
        $request = $this->getProjectTreeRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Folder" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Folder" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Folder",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Folder";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Folder",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectTreeAsync
     *
     * Retrieve the complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getProjectTreeAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectTree"][0]
    ) {
        return $this->getProjectTreeAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectTreeAsyncWithHttpInfo
     *
     * Retrieve the complete DMS tree
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getProjectTreeAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectTree"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Folder";
        $request = $this->getProjectTreeRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectTree'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getProjectTreeRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["getProjectTree"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectTree'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProjectTree'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{id}/tree";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectUsers
     *
     * Retrieve all users in a project, or a list with a filter by email
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $email Filter the returned list by email (optional)
     * @param  string $email__contains Filter the returned list by email__contains (optional)
     * @param  string $email__endswith Filter the returned list by email__endswith (optional)
     * @param  string $email__startswith Filter the returned list by email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserProject[]
     */
    public function getProjectUsers(
        $cloud_pk,
        $project_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getProjectUsers"][0]
    ) {
        list($response) = $this->getProjectUsersWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $email,
            $email__contains,
            $email__endswith,
            $email__startswith,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectUsersWithHttpInfo
     *
     * Retrieve all users in a project, or a list with a filter by email
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $email Filter the returned list by email (optional)
     * @param  string $email__contains Filter the returned list by email__contains (optional)
     * @param  string $email__endswith Filter the returned list by email__endswith (optional)
     * @param  string $email__startswith Filter the returned list by email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserProject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectUsersWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getProjectUsers"][0]
    ) {
        $request = $this->getProjectUsersRequest(
            $cloud_pk,
            $project_pk,
            $email,
            $email__contains,
            $email__endswith,
            $email__startswith,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\UserProject[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\UserProject[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\UserProject[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\UserProject[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\UserProject[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectUsersAsync
     *
     * Retrieve all users in a project, or a list with a filter by email
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $email Filter the returned list by email (optional)
     * @param  string $email__contains Filter the returned list by email__contains (optional)
     * @param  string $email__endswith Filter the returned list by email__endswith (optional)
     * @param  string $email__startswith Filter the returned list by email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectUsersAsync(
        $cloud_pk,
        $project_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getProjectUsers"][0]
    ) {
        return $this->getProjectUsersAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $email,
            $email__contains,
            $email__endswith,
            $email__startswith,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectUsersAsyncWithHttpInfo
     *
     * Retrieve all users in a project, or a list with a filter by email
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $email Filter the returned list by email (optional)
     * @param  string $email__contains Filter the returned list by email__contains (optional)
     * @param  string $email__endswith Filter the returned list by email__endswith (optional)
     * @param  string $email__startswith Filter the returned list by email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectUsersAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getProjectUsers"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\UserProject[]";
        $request = $this->getProjectUsersRequest(
            $cloud_pk,
            $project_pk,
            $email,
            $email__contains,
            $email__endswith,
            $email__startswith,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectUsers'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $email Filter the returned list by email (optional)
     * @param  string $email__contains Filter the returned list by email__contains (optional)
     * @param  string $email__endswith Filter the returned list by email__endswith (optional)
     * @param  string $email__startswith Filter the returned list by email__startswith (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectUsersRequest(
        $cloud_pk,
        $project_pk,
        $email = null,
        $email__contains = null,
        $email__endswith = null,
        $email__startswith = null,
        string $contentType = self::contentTypes["getProjectUsers"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectUsers'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProjectUsers'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/user";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $email,
                "email", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $email__contains,
                "email__contains", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $email__endswith,
                "email__endswith", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $email__startswith,
                "email__startswith", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjectValidatorVisas
     *
     * List visas where user is a validator
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectValidatorVisas'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Visa[]
     */
    public function getProjectValidatorVisas(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectValidatorVisas"][0]
    ) {
        list($response) = $this->getProjectValidatorVisasWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectValidatorVisasWithHttpInfo
     *
     * List visas where user is a validator
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectValidatorVisas'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Visa[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectValidatorVisasWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectValidatorVisas"][0]
    ) {
        $request = $this->getProjectValidatorVisasRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Visa[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Visa[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Visa[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Visa[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Visa[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectValidatorVisasAsync
     *
     * List visas where user is a validator
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectValidatorVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectValidatorVisasAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectValidatorVisas"][0]
    ) {
        return $this->getProjectValidatorVisasAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectValidatorVisasAsyncWithHttpInfo
     *
     * List visas where user is a validator
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectValidatorVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectValidatorVisasAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectValidatorVisas"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Visa[]";
        $request = $this->getProjectValidatorVisasRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjectValidatorVisas'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjectValidatorVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectValidatorVisasRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProjectValidatorVisas"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjectValidatorVisas'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProjectValidatorVisas'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/me/visa/validator";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProjects
     *
     * Retrieve all projects
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Project[]
     */
    public function getProjects(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjects"][0]
    ) {
        list($response) = $this->getProjectsWithHttpInfo(
            $cloud_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProjectsWithHttpInfo
     *
     * Retrieve all projects
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Project[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProjectsWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjects"][0]
    ) {
        $request = $this->getProjectsRequest($cloud_pk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Project[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Project[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Project[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Project[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Project[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProjectsAsync
     *
     * Retrieve all projects
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectsAsync(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjects"][0]
    ) {
        return $this->getProjectsAsyncWithHttpInfo(
            $cloud_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProjectsAsyncWithHttpInfo
     *
     * Retrieve all projects
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProjectsAsyncWithHttpInfo(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjects"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Project[]";
        $request = $this->getProjectsRequest($cloud_pk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProjects'
     *
     * @param  int $cloud_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProjectsRequest(
        $cloud_pk,
        string $contentType = self::contentTypes["getProjects"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProjects'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSelfProjects
     *
     * List current user&#39;s projects
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfProjects'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Project[]
     */
    public function getSelfProjects(
        string $contentType = self::contentTypes["getSelfProjects"][0]
    ) {
        list($response) = $this->getSelfProjectsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSelfProjectsWithHttpInfo
     *
     * List current user&#39;s projects
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfProjects'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Project[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSelfProjectsWithHttpInfo(
        string $contentType = self::contentTypes["getSelfProjects"][0]
    ) {
        $request = $this->getSelfProjectsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Project[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Project[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Project[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Project[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Project[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSelfProjectsAsync
     *
     * List current user&#39;s projects
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSelfProjectsAsync(
        string $contentType = self::contentTypes["getSelfProjects"][0]
    ) {
        return $this->getSelfProjectsAsyncWithHttpInfo($contentType)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation getSelfProjectsAsyncWithHttpInfo
     *
     * List current user&#39;s projects
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSelfProjectsAsyncWithHttpInfo(
        string $contentType = self::contentTypes["getSelfProjects"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Project[]";
        $request = $this->getSelfProjectsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSelfProjects'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSelfProjectsRequest(
        string $contentType = self::contentTypes["getSelfProjects"][0]
    ) {
        $resourcePath = "/user/projects";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSelfUser
     *
     * Get info about the current user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SelfUser
     */
    public function getSelfUser(
        string $contentType = self::contentTypes["getSelfUser"][0]
    ) {
        list($response) = $this->getSelfUserWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSelfUserWithHttpInfo
     *
     * Get info about the current user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SelfUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSelfUserWithHttpInfo(
        string $contentType = self::contentTypes["getSelfUser"][0]
    ) {
        $request = $this->getSelfUserRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\SelfUser" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\SelfUser" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\SelfUser",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\SelfUser";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\SelfUser",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSelfUserAsync
     *
     * Get info about the current user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSelfUserAsync(
        string $contentType = self::contentTypes["getSelfUser"][0]
    ) {
        return $this->getSelfUserAsyncWithHttpInfo($contentType)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation getSelfUserAsyncWithHttpInfo
     *
     * Get info about the current user
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSelfUserAsyncWithHttpInfo(
        string $contentType = self::contentTypes["getSelfUser"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\SelfUser";
        $request = $this->getSelfUserRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSelfUser'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSelfUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSelfUserRequest(
        string $contentType = self::contentTypes["getSelfUser"][0]
    ) {
        $resourcePath = "/user";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTag
     *
     * Retrieve a tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Tag
     */
    public function getTag(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getTag"][0]
    ) {
        list($response) = $this->getTagWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getTagWithHttpInfo
     *
     * Retrieve a tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getTag"][0]
    ) {
        $request = $this->getTagRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Tag" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Tag" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Tag",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Tag";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Tag",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTagAsync
     *
     * Retrieve a tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getTag"][0]
    ) {
        return $this->getTagAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTagAsyncWithHttpInfo
     *
     * Retrieve a tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getTag"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Tag";
        $request = $this->getTagRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTag'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTagRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getTag"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getTag'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTag'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getTag'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/tag/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTags
     *
     * Retrieve all tags
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Tag[]
     */
    public function getTags(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getTags"][0]
    ) {
        list($response) = $this->getTagsWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getTagsWithHttpInfo
     *
     * Retrieve all tags
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTagsWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getTags"][0]
    ) {
        $request = $this->getTagsRequest($cloud_pk, $project_pk, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Tag[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Tag[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Tag[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Tag[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Tag[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTagsAsync
     *
     * Retrieve all tags
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getTags"][0]
    ) {
        return $this->getTagsAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTagsAsyncWithHttpInfo
     *
     * Retrieve all tags
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTagsAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getTags"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Tag[]";
        $request = $this->getTagsRequest($cloud_pk, $project_pk, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTags'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTagsRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getTags"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getTags'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getTags'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/tag";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserInvitation
     *
     * Retrieve an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserInvitation
     */
    public function getUserInvitation(
        $id,
        string $contentType = self::contentTypes["getUserInvitation"][0]
    ) {
        list($response) = $this->getUserInvitationWithHttpInfo(
            $id,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getUserInvitationWithHttpInfo
     *
     * Retrieve an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserInvitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserInvitationWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["getUserInvitation"][0]
    ) {
        $request = $this->getUserInvitationRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\UserInvitation" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\UserInvitation" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\UserInvitation",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\UserInvitation";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\UserInvitation",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserInvitationAsync
     *
     * Retrieve an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserInvitationAsync(
        $id,
        string $contentType = self::contentTypes["getUserInvitation"][0]
    ) {
        return $this->getUserInvitationAsyncWithHttpInfo(
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getUserInvitationAsyncWithHttpInfo
     *
     * Retrieve an invitation
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserInvitationAsyncWithHttpInfo(
        $id,
        string $contentType = self::contentTypes["getUserInvitation"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\UserInvitation";
        $request = $this->getUserInvitationRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserInvitation'
     *
     * @param  int $id A unique integer value identifying this invitation. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserInvitationRequest(
        $id,
        string $contentType = self::contentTypes["getUserInvitation"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getUserInvitation'
            );
        }

        $resourcePath = "/user/invitations/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserInvitations
     *
     * List user&#39;s invitations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserInvitation[]
     */
    public function getUserInvitations(
        string $contentType = self::contentTypes["getUserInvitations"][0]
    ) {
        list($response) = $this->getUserInvitationsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getUserInvitationsWithHttpInfo
     *
     * List user&#39;s invitations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserInvitation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserInvitationsWithHttpInfo(
        string $contentType = self::contentTypes["getUserInvitations"][0]
    ) {
        $request = $this->getUserInvitationsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\UserInvitation[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\UserInvitation[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\UserInvitation[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\UserInvitation[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\UserInvitation[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserInvitationsAsync
     *
     * List user&#39;s invitations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserInvitationsAsync(
        string $contentType = self::contentTypes["getUserInvitations"][0]
    ) {
        return $this->getUserInvitationsAsyncWithHttpInfo($contentType)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation getUserInvitationsAsyncWithHttpInfo
     *
     * List user&#39;s invitations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserInvitationsAsyncWithHttpInfo(
        string $contentType = self::contentTypes["getUserInvitations"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\UserInvitation[]";
        $request = $this->getUserInvitationsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserInvitations'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserInvitations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserInvitationsRequest(
        string $contentType = self::contentTypes["getUserInvitations"][0]
    ) {
        $resourcePath = "/user/invitations";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getValidation
     *
     * Retrieve a validation to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VisaValidation
     */
    public function getValidation(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidation"][0]
    ) {
        list($response) = $this->getValidationWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getValidationWithHttpInfo
     *
     * Retrieve a validation to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VisaValidation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getValidationWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidation"][0]
    ) {
        $request = $this->getValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\VisaValidation" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\VisaValidation" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\VisaValidation",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\VisaValidation";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\VisaValidation",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getValidationAsync
     *
     * Retrieve a validation to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getValidationAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidation"][0]
    ) {
        return $this->getValidationAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getValidationAsyncWithHttpInfo
     *
     * Retrieve a validation to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getValidationAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidation"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\VisaValidation";
        $request = $this->getValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getValidation'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getValidationRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidation"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getValidation'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling getValidation'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getValidation'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getValidation'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling getValidation'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getValidations
     *
     * List all validations to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VisaValidation[]
     */
    public function getValidations(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidations"][0]
    ) {
        list($response) = $this->getValidationsWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getValidationsWithHttpInfo
     *
     * List all validations to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VisaValidation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getValidationsWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidations"][0]
    ) {
        $request = $this->getValidationsRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\VisaValidation[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\VisaValidation[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\VisaValidation[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\VisaValidation[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\VisaValidation[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getValidationsAsync
     *
     * List all validations to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getValidationsAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidations"][0]
    ) {
        return $this->getValidationsAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getValidationsAsyncWithHttpInfo
     *
     * List all validations to a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getValidationsAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidations"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\VisaValidation[]";
        $request = $this->getValidationsRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getValidations'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getValidations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getValidationsRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getValidations"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getValidations'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling getValidations'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getValidations'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling getValidations'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVisa
     *
     * Retrieve a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Visa
     */
    public function getVisa(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getVisa"][0]
    ) {
        list($response) = $this->getVisaWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getVisaWithHttpInfo
     *
     * Retrieve a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Visa, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVisaWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getVisa"][0]
    ) {
        $request = $this->getVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Visa" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Visa" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Visa",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Visa";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Visa",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVisaAsync
     *
     * Retrieve a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisaAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getVisa"][0]
    ) {
        return $this->getVisaAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getVisaAsyncWithHttpInfo
     *
     * Retrieve a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisaAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getVisa"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Visa";
        $request = $this->getVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVisa'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVisaRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getVisa"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getVisa'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling getVisa'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getVisa'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getVisa'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVisaComment
     *
     * Retrieve a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VisaComment
     */
    public function getVisaComment(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComment"][0]
    ) {
        list($response) = $this->getVisaCommentWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getVisaCommentWithHttpInfo
     *
     * Retrieve a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VisaComment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVisaCommentWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComment"][0]
    ) {
        $request = $this->getVisaCommentRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\VisaComment" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\VisaComment" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\VisaComment",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\VisaComment";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\VisaComment",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVisaCommentAsync
     *
     * Retrieve a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisaCommentAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComment"][0]
    ) {
        return $this->getVisaCommentAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getVisaCommentAsyncWithHttpInfo
     *
     * Retrieve a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisaCommentAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComment"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\VisaComment";
        $request = $this->getVisaCommentRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVisaComment'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVisaCommentRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComment"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getVisaComment'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling getVisaComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getVisaComment'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getVisaComment'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling getVisaComment'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVisaComments
     *
     * List all comment of a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VisaComment[]
     */
    public function getVisaComments(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComments"][0]
    ) {
        list($response) = $this->getVisaCommentsWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getVisaCommentsWithHttpInfo
     *
     * List all comment of a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VisaComment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVisaCommentsWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComments"][0]
    ) {
        $request = $this->getVisaCommentsRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\VisaComment[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\VisaComment[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\VisaComment[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\VisaComment[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\VisaComment[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVisaCommentsAsync
     *
     * List all comment of a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisaCommentsAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComments"][0]
    ) {
        return $this->getVisaCommentsAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getVisaCommentsAsyncWithHttpInfo
     *
     * List all comment of a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisaCommentsAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComments"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\VisaComment[]";
        $request = $this->getVisaCommentsRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVisaComments'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisaComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVisaCommentsRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["getVisaComments"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getVisaComments'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling getVisaComments'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getVisaComments'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling getVisaComments'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVisas
     *
     * List all visas of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisas'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Visa[]
     */
    public function getVisas(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getVisas"][0]
    ) {
        list($response) = $this->getVisasWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getVisasWithHttpInfo
     *
     * List all visas of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisas'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Visa[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getVisasWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getVisas"][0]
    ) {
        $request = $this->getVisasRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Visa[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Visa[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Visa[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Visa[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Visa[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVisasAsync
     *
     * List all visas of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisasAsync(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getVisas"][0]
    ) {
        return $this->getVisasAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getVisasAsyncWithHttpInfo
     *
     * List all visas of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVisasAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getVisas"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Visa[]";
        $request = $this->getVisasRequest(
            $cloud_pk,
            $document_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVisas'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVisas'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVisasRequest(
        $cloud_pk,
        $document_pk,
        $project_pk,
        string $contentType = self::contentTypes["getVisas"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getVisas'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling getVisas'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getVisas'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inviteCloudUser
     *
     * Invite a cloud administrator
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  \OpenAPI\Client\Model\CloudInvitationRequest $cloud_invitation_request cloud_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteCloudUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CloudInvitation
     */
    public function inviteCloudUser(
        $cloud_pk,
        $cloud_invitation_request,
        string $contentType = self::contentTypes["inviteCloudUser"][0]
    ) {
        list($response) = $this->inviteCloudUserWithHttpInfo(
            $cloud_pk,
            $cloud_invitation_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation inviteCloudUserWithHttpInfo
     *
     * Invite a cloud administrator
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\CloudInvitationRequest $cloud_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteCloudUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CloudInvitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function inviteCloudUserWithHttpInfo(
        $cloud_pk,
        $cloud_invitation_request,
        string $contentType = self::contentTypes["inviteCloudUser"][0]
    ) {
        $request = $this->inviteCloudUserRequest(
            $cloud_pk,
            $cloud_invitation_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\CloudInvitation" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CloudInvitation" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CloudInvitation",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CloudInvitation";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CloudInvitation",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inviteCloudUserAsync
     *
     * Invite a cloud administrator
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\CloudInvitationRequest $cloud_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inviteCloudUserAsync(
        $cloud_pk,
        $cloud_invitation_request,
        string $contentType = self::contentTypes["inviteCloudUser"][0]
    ) {
        return $this->inviteCloudUserAsyncWithHttpInfo(
            $cloud_pk,
            $cloud_invitation_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation inviteCloudUserAsyncWithHttpInfo
     *
     * Invite a cloud administrator
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\CloudInvitationRequest $cloud_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inviteCloudUserAsyncWithHttpInfo(
        $cloud_pk,
        $cloud_invitation_request,
        string $contentType = self::contentTypes["inviteCloudUser"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CloudInvitation";
        $request = $this->inviteCloudUserRequest(
            $cloud_pk,
            $cloud_invitation_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inviteCloudUser'
     *
     * @param  int $cloud_pk (required)
     * @param  \OpenAPI\Client\Model\CloudInvitationRequest $cloud_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inviteCloudUserRequest(
        $cloud_pk,
        $cloud_invitation_request,
        string $contentType = self::contentTypes["inviteCloudUser"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling inviteCloudUser'
            );
        }

        // verify the required parameter 'cloud_invitation_request' is set
        if (
            $cloud_invitation_request === null ||
            (is_array($cloud_invitation_request) &&
                count($cloud_invitation_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_invitation_request when calling inviteCloudUser'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/invitation";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($cloud_invitation_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $cloud_invitation_request
                    )
                );
            } else {
                $httpBody = $cloud_invitation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inviteProjectUser
     *
     * Invite a project member
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectInvitationRequest $project_invitation_request project_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteProjectUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectInvitation
     */
    public function inviteProjectUser(
        $cloud_pk,
        $project_pk,
        $project_invitation_request,
        string $contentType = self::contentTypes["inviteProjectUser"][0]
    ) {
        list($response) = $this->inviteProjectUserWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $project_invitation_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation inviteProjectUserWithHttpInfo
     *
     * Invite a project member
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectInvitationRequest $project_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteProjectUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectInvitation, HTTP status code, HTTP response headers (array of strings)
     */
    public function inviteProjectUserWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $project_invitation_request,
        string $contentType = self::contentTypes["inviteProjectUser"][0]
    ) {
        $request = $this->inviteProjectUserRequest(
            $cloud_pk,
            $project_pk,
            $project_invitation_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\ProjectInvitation" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectInvitation" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectInvitation",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectInvitation";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectInvitation",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inviteProjectUserAsync
     *
     * Invite a project member
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectInvitationRequest $project_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inviteProjectUserAsync(
        $cloud_pk,
        $project_pk,
        $project_invitation_request,
        string $contentType = self::contentTypes["inviteProjectUser"][0]
    ) {
        return $this->inviteProjectUserAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $project_invitation_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation inviteProjectUserAsyncWithHttpInfo
     *
     * Invite a project member
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectInvitationRequest $project_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inviteProjectUserAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $project_invitation_request,
        string $contentType = self::contentTypes["inviteProjectUser"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectInvitation";
        $request = $this->inviteProjectUserRequest(
            $cloud_pk,
            $project_pk,
            $project_invitation_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inviteProjectUser'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ProjectInvitationRequest $project_invitation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['inviteProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function inviteProjectUserRequest(
        $cloud_pk,
        $project_pk,
        $project_invitation_request,
        string $contentType = self::contentTypes["inviteProjectUser"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling inviteProjectUser'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling inviteProjectUser'
            );
        }

        // verify the required parameter 'project_invitation_request' is set
        if (
            $project_invitation_request === null ||
            (is_array($project_invitation_request) &&
                count($project_invitation_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_invitation_request when calling inviteProjectUser'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/invitation";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($project_invitation_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $project_invitation_request
                    )
                );
            } else {
                $httpBody = $project_invitation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leaveProject
     *
     * Leave the project
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function leaveProject(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["leaveProject"][0]
    ) {
        $this->leaveProjectWithHttpInfo($cloud_pk, $id, $contentType);
    }

    /**
     * Operation leaveProjectWithHttpInfo
     *
     * Leave the project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaveProjectWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["leaveProject"][0]
    ) {
        $request = $this->leaveProjectRequest($cloud_pk, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation leaveProjectAsync
     *
     * Leave the project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveProjectAsync(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["leaveProject"][0]
    ) {
        return $this->leaveProjectAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation leaveProjectAsyncWithHttpInfo
     *
     * Leave the project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveProjectAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["leaveProject"][0]
    ) {
        $returnType = "";
        $request = $this->leaveProjectRequest($cloud_pk, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaveProject'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaveProjectRequest(
        $cloud_pk,
        $id,
        string $contentType = self::contentTypes["leaveProject"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling leaveProject'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling leaveProject'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{id}/leave";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation leaveVersionDocumentHistory
     *
     * Leave the history version
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document
     */
    public function leaveVersionDocumentHistory(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "leaveVersionDocumentHistory"
        ][0]
    ) {
        list($response) = $this->leaveVersionDocumentHistoryWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation leaveVersionDocumentHistoryWithHttpInfo
     *
     * Leave the history version
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function leaveVersionDocumentHistoryWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "leaveVersionDocumentHistory"
        ][0]
    ) {
        $request = $this->leaveVersionDocumentHistoryRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Document" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation leaveVersionDocumentHistoryAsync
     *
     * Leave the history version
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveVersionDocumentHistoryAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "leaveVersionDocumentHistory"
        ][0]
    ) {
        return $this->leaveVersionDocumentHistoryAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation leaveVersionDocumentHistoryAsyncWithHttpInfo
     *
     * Leave the history version
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function leaveVersionDocumentHistoryAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "leaveVersionDocumentHistory"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document";
        $request = $this->leaveVersionDocumentHistoryRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'leaveVersionDocumentHistory'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['leaveVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function leaveVersionDocumentHistoryRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "leaveVersionDocumentHistory"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling leaveVersionDocumentHistory'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling leaveVersionDocumentHistory'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling leaveVersionDocumentHistory'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling leaveVersionDocumentHistory'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/leave";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation makeHeadVersionDocumentHistory
     *
     * Make the head of the version
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['makeHeadVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document
     */
    public function makeHeadVersionDocumentHistory(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "makeHeadVersionDocumentHistory"
        ][0]
    ) {
        list($response) = $this->makeHeadVersionDocumentHistoryWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation makeHeadVersionDocumentHistoryWithHttpInfo
     *
     * Make the head of the version
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['makeHeadVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function makeHeadVersionDocumentHistoryWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "makeHeadVersionDocumentHistory"
        ][0]
    ) {
        $request = $this->makeHeadVersionDocumentHistoryRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Document" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation makeHeadVersionDocumentHistoryAsync
     *
     * Make the head of the version
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['makeHeadVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function makeHeadVersionDocumentHistoryAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "makeHeadVersionDocumentHistory"
        ][0]
    ) {
        return $this->makeHeadVersionDocumentHistoryAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation makeHeadVersionDocumentHistoryAsyncWithHttpInfo
     *
     * Make the head of the version
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['makeHeadVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function makeHeadVersionDocumentHistoryAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "makeHeadVersionDocumentHistory"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document";
        $request = $this->makeHeadVersionDocumentHistoryRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'makeHeadVersionDocumentHistory'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['makeHeadVersionDocumentHistory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function makeHeadVersionDocumentHistoryRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "makeHeadVersionDocumentHistory"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling makeHeadVersionDocumentHistory'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling makeHeadVersionDocumentHistory'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling makeHeadVersionDocumentHistory'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling makeHeadVersionDocumentHistory'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/history/{id}/head-version";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pauseVisa
     *
     * Pause a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function pauseVisa(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["pauseVisa"][0]
    ) {
        $this->pauseVisaWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation pauseVisaWithHttpInfo
     *
     * Pause a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function pauseVisaWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["pauseVisa"][0]
    ) {
        $request = $this->pauseVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation pauseVisaAsync
     *
     * Pause a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pauseVisaAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["pauseVisa"][0]
    ) {
        return $this->pauseVisaAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation pauseVisaAsyncWithHttpInfo
     *
     * Pause a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pauseVisaAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["pauseVisa"][0]
    ) {
        $returnType = "";
        $request = $this->pauseVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pauseVisa'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pauseVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pauseVisaRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["pauseVisa"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling pauseVisa'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling pauseVisa'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling pauseVisa'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling pauseVisa'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/pause";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetValidation
     *
     * Reset a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resetValidation(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["resetValidation"][0]
    ) {
        $this->resetValidationWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );
    }

    /**
     * Operation resetValidationWithHttpInfo
     *
     * Reset a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetValidationWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["resetValidation"][0]
    ) {
        $request = $this->resetValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation resetValidationAsync
     *
     * Reset a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetValidationAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["resetValidation"][0]
    ) {
        return $this->resetValidationAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation resetValidationAsyncWithHttpInfo
     *
     * Reset a validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetValidationAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["resetValidation"][0]
    ) {
        $returnType = "";
        $request = $this->resetValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetValidation'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetValidationRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        string $contentType = self::contentTypes["resetValidation"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling resetValidation'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling resetValidation'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling resetValidation'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling resetValidation'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling resetValidation'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}/reset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resumeVisa
     *
     * Resume a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resumeVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resumeVisa(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["resumeVisa"][0]
    ) {
        $this->resumeVisaWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation resumeVisaWithHttpInfo
     *
     * Resume a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resumeVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resumeVisaWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["resumeVisa"][0]
    ) {
        $request = $this->resumeVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation resumeVisaAsync
     *
     * Resume a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resumeVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resumeVisaAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["resumeVisa"][0]
    ) {
        return $this->resumeVisaAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation resumeVisaAsyncWithHttpInfo
     *
     * Resume a visa of a document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resumeVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resumeVisaAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["resumeVisa"][0]
    ) {
        $returnType = "";
        $request = $this->resumeVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resumeVisa'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resumeVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resumeVisaRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["resumeVisa"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling resumeVisa'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling resumeVisa'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling resumeVisa'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling resumeVisa'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}/resume";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateClassification
     *
     * Update some fields of a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedClassificationRequest $patched_classification_request patched_classification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification
     */
    public function updateClassification(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_classification_request = null,
        string $contentType = self::contentTypes["updateClassification"][0]
    ) {
        list($response) = $this->updateClassificationWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_classification_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateClassificationWithHttpInfo
     *
     * Update some fields of a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedClassificationRequest $patched_classification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClassificationWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_classification_request = null,
        string $contentType = self::contentTypes["updateClassification"][0]
    ) {
        $request = $this->updateClassificationRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_classification_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateClassificationAsync
     *
     * Update some fields of a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedClassificationRequest $patched_classification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClassificationAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_classification_request = null,
        string $contentType = self::contentTypes["updateClassification"][0]
    ) {
        return $this->updateClassificationAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_classification_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateClassificationAsyncWithHttpInfo
     *
     * Update some fields of a classification
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedClassificationRequest $patched_classification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClassificationAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_classification_request = null,
        string $contentType = self::contentTypes["updateClassification"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification";
        $request = $this->updateClassificationRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_classification_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateClassification'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedClassificationRequest $patched_classification_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateClassificationRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_classification_request = null,
        string $contentType = self::contentTypes["updateClassification"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateClassification'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateClassification'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateClassification'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/classification/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_classification_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_classification_request
                    )
                );
            } else {
                $httpBody = $patched_classification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCloud
     *
     * Update some fields of a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  \OpenAPI\Client\Model\PatchedCloudRequest $patched_cloud_request patched_cloud_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloud'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Cloud
     */
    public function updateCloud(
        $id,
        $patched_cloud_request = null,
        string $contentType = self::contentTypes["updateCloud"][0]
    ) {
        list($response) = $this->updateCloudWithHttpInfo(
            $id,
            $patched_cloud_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateCloudWithHttpInfo
     *
     * Update some fields of a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  \OpenAPI\Client\Model\PatchedCloudRequest $patched_cloud_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloud'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Cloud, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCloudWithHttpInfo(
        $id,
        $patched_cloud_request = null,
        string $contentType = self::contentTypes["updateCloud"][0]
    ) {
        $request = $this->updateCloudRequest(
            $id,
            $patched_cloud_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Cloud" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Cloud" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Cloud",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Cloud";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Cloud",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCloudAsync
     *
     * Update some fields of a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  \OpenAPI\Client\Model\PatchedCloudRequest $patched_cloud_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudAsync(
        $id,
        $patched_cloud_request = null,
        string $contentType = self::contentTypes["updateCloud"][0]
    ) {
        return $this->updateCloudAsyncWithHttpInfo(
            $id,
            $patched_cloud_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCloudAsyncWithHttpInfo
     *
     * Update some fields of a cloud
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  \OpenAPI\Client\Model\PatchedCloudRequest $patched_cloud_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudAsyncWithHttpInfo(
        $id,
        $patched_cloud_request = null,
        string $contentType = self::contentTypes["updateCloud"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Cloud";
        $request = $this->updateCloudRequest(
            $id,
            $patched_cloud_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCloud'
     *
     * @param  int $id A unique integer value identifying this cloud. (required)
     * @param  \OpenAPI\Client\Model\PatchedCloudRequest $patched_cloud_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloud'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCloudRequest(
        $id,
        $patched_cloud_request = null,
        string $contentType = self::contentTypes["updateCloud"][0]
    ) {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCloud'
            );
        }

        $resourcePath = "/cloud/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_cloud_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_cloud_request
                    )
                );
            } else {
                $httpBody = $patched_cloud_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCloudUser
     *
     * Change the user role in the cloud
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  \OpenAPI\Client\Model\PatchedUserCloudUpdateRequest $patched_user_cloud_update_request patched_user_cloud_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloudUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\User
     */
    public function updateCloudUser(
        $cloud_pk,
        $id,
        $patched_user_cloud_update_request = null,
        string $contentType = self::contentTypes["updateCloudUser"][0]
    ) {
        list($response) = $this->updateCloudUserWithHttpInfo(
            $cloud_pk,
            $id,
            $patched_user_cloud_update_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateCloudUserWithHttpInfo
     *
     * Change the user role in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  \OpenAPI\Client\Model\PatchedUserCloudUpdateRequest $patched_user_cloud_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloudUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCloudUserWithHttpInfo(
        $cloud_pk,
        $id,
        $patched_user_cloud_update_request = null,
        string $contentType = self::contentTypes["updateCloudUser"][0]
    ) {
        $request = $this->updateCloudUserRequest(
            $cloud_pk,
            $id,
            $patched_user_cloud_update_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\User" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\User" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\User",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\User";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\User",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCloudUserAsync
     *
     * Change the user role in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  \OpenAPI\Client\Model\PatchedUserCloudUpdateRequest $patched_user_cloud_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudUserAsync(
        $cloud_pk,
        $id,
        $patched_user_cloud_update_request = null,
        string $contentType = self::contentTypes["updateCloudUser"][0]
    ) {
        return $this->updateCloudUserAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $patched_user_cloud_update_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCloudUserAsyncWithHttpInfo
     *
     * Change the user role in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  \OpenAPI\Client\Model\PatchedUserCloudUpdateRequest $patched_user_cloud_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCloudUserAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $patched_user_cloud_update_request = null,
        string $contentType = self::contentTypes["updateCloudUser"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\User";
        $request = $this->updateCloudUserRequest(
            $cloud_pk,
            $id,
            $patched_user_cloud_update_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCloudUser'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this fos user. (required)
     * @param  \OpenAPI\Client\Model\PatchedUserCloudUpdateRequest $patched_user_cloud_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCloudUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCloudUserRequest(
        $cloud_pk,
        $id,
        $patched_user_cloud_update_request = null,
        string $contentType = self::contentTypes["updateCloudUser"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateCloudUser'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCloudUser'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/user/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_user_cloud_update_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_user_cloud_update_request
                    )
                );
            } else {
                $httpBody = $patched_user_cloud_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDocument
     *
     * Update some fields of the document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedDocumentRequest $patched_document_request patched_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document
     */
    public function updateDocument(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_document_request = null,
        string $contentType = self::contentTypes["updateDocument"][0]
    ) {
        list($response) = $this->updateDocumentWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_document_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateDocumentWithHttpInfo
     *
     * Update some fields of the document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedDocumentRequest $patched_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocument'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDocumentWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_document_request = null,
        string $contentType = self::contentTypes["updateDocument"][0]
    ) {
        $request = $this->updateDocumentRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_document_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Document" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDocumentAsync
     *
     * Update some fields of the document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedDocumentRequest $patched_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDocumentAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_document_request = null,
        string $contentType = self::contentTypes["updateDocument"][0]
    ) {
        return $this->updateDocumentAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_document_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateDocumentAsyncWithHttpInfo
     *
     * Update some fields of the document
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedDocumentRequest $patched_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDocumentAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_document_request = null,
        string $contentType = self::contentTypes["updateDocument"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document";
        $request = $this->updateDocumentRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_document_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDocument'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedDocumentRequest $patched_document_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDocument'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDocumentRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_document_request = null,
        string $contentType = self::contentTypes["updateDocument"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateDocument'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateDocument'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateDocument'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/document/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_document_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_document_request
                    )
                );
            } else {
                $httpBody = $patched_document_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFolder
     *
     * Update some fields of a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedFolderWithoutChildrenRequest $patched_folder_without_children_request patched_folder_without_children_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FolderWithoutChildren
     */
    public function updateFolder(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_folder_without_children_request = null,
        string $contentType = self::contentTypes["updateFolder"][0]
    ) {
        list($response) = $this->updateFolderWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_folder_without_children_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateFolderWithHttpInfo
     *
     * Update some fields of a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedFolderWithoutChildrenRequest $patched_folder_without_children_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FolderWithoutChildren, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFolderWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_folder_without_children_request = null,
        string $contentType = self::contentTypes["updateFolder"][0]
    ) {
        $request = $this->updateFolderRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_folder_without_children_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\FolderWithoutChildren" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\FolderWithoutChildren" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\FolderWithoutChildren",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\FolderWithoutChildren";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\FolderWithoutChildren",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateFolderAsync
     *
     * Update some fields of a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedFolderWithoutChildrenRequest $patched_folder_without_children_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFolderAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_folder_without_children_request = null,
        string $contentType = self::contentTypes["updateFolder"][0]
    ) {
        return $this->updateFolderAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_folder_without_children_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateFolderAsyncWithHttpInfo
     *
     * Update some fields of a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedFolderWithoutChildrenRequest $patched_folder_without_children_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFolderAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_folder_without_children_request = null,
        string $contentType = self::contentTypes["updateFolder"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\FolderWithoutChildren";
        $request = $this->updateFolderRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_folder_without_children_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFolder'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedFolderWithoutChildrenRequest $patched_folder_without_children_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateFolderRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_folder_without_children_request = null,
        string $contentType = self::contentTypes["updateFolder"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateFolder'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateFolder'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateFolder'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/folder/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_folder_without_children_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_folder_without_children_request
                    )
                );
            } else {
                $httpBody = $patched_folder_without_children_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGroupFolder
     *
     * Update the permission of a group on a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $folder_pk folder_pk (required)
     * @param  int $id A unique integer value identifying this group folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupFolderRequest $patched_group_folder_request patched_group_folder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GroupFolder
     */
    public function updateGroupFolder(
        $cloud_pk,
        $folder_pk,
        $id,
        $project_pk,
        $patched_group_folder_request = null,
        string $contentType = self::contentTypes["updateGroupFolder"][0]
    ) {
        list($response) = $this->updateGroupFolderWithHttpInfo(
            $cloud_pk,
            $folder_pk,
            $id,
            $project_pk,
            $patched_group_folder_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateGroupFolderWithHttpInfo
     *
     * Update the permission of a group on a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $folder_pk (required)
     * @param  int $id A unique integer value identifying this group folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupFolderRequest $patched_group_folder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupFolder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GroupFolder, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGroupFolderWithHttpInfo(
        $cloud_pk,
        $folder_pk,
        $id,
        $project_pk,
        $patched_group_folder_request = null,
        string $contentType = self::contentTypes["updateGroupFolder"][0]
    ) {
        $request = $this->updateGroupFolderRequest(
            $cloud_pk,
            $folder_pk,
            $id,
            $project_pk,
            $patched_group_folder_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\GroupFolder" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\GroupFolder" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\GroupFolder",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\GroupFolder";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\GroupFolder",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGroupFolderAsync
     *
     * Update the permission of a group on a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $folder_pk (required)
     * @param  int $id A unique integer value identifying this group folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupFolderRequest $patched_group_folder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupFolderAsync(
        $cloud_pk,
        $folder_pk,
        $id,
        $project_pk,
        $patched_group_folder_request = null,
        string $contentType = self::contentTypes["updateGroupFolder"][0]
    ) {
        return $this->updateGroupFolderAsyncWithHttpInfo(
            $cloud_pk,
            $folder_pk,
            $id,
            $project_pk,
            $patched_group_folder_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateGroupFolderAsyncWithHttpInfo
     *
     * Update the permission of a group on a folder
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $folder_pk (required)
     * @param  int $id A unique integer value identifying this group folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupFolderRequest $patched_group_folder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGroupFolderAsyncWithHttpInfo(
        $cloud_pk,
        $folder_pk,
        $id,
        $project_pk,
        $patched_group_folder_request = null,
        string $contentType = self::contentTypes["updateGroupFolder"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\GroupFolder";
        $request = $this->updateGroupFolderRequest(
            $cloud_pk,
            $folder_pk,
            $id,
            $project_pk,
            $patched_group_folder_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGroupFolder'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $folder_pk (required)
     * @param  int $id A unique integer value identifying this group folder. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupFolderRequest $patched_group_folder_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateGroupFolder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateGroupFolderRequest(
        $cloud_pk,
        $folder_pk,
        $id,
        $project_pk,
        $patched_group_folder_request = null,
        string $contentType = self::contentTypes["updateGroupFolder"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateGroupFolder'
            );
        }

        // verify the required parameter 'folder_pk' is set
        if (
            $folder_pk === null ||
            (is_array($folder_pk) && count($folder_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $folder_pk when calling updateGroupFolder'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateGroupFolder'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateGroupFolder'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/folder/{folder_pk}/group/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($folder_pk !== null) {
            $resourcePath = str_replace(
                "{" . "folder_pk" . "}",
                ObjectSerializer::toPathValue($folder_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_group_folder_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_group_folder_request
                    )
                );
            } else {
                $httpBody = $patched_group_folder_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateManageGroup
     *
     * Update some fields of a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupRequest $patched_group_request patched_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateManageGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Group
     */
    public function updateManageGroup(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_group_request = null,
        string $contentType = self::contentTypes["updateManageGroup"][0]
    ) {
        list($response) = $this->updateManageGroupWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_group_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateManageGroupWithHttpInfo
     *
     * Update some fields of a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupRequest $patched_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateManageGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateManageGroupWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_group_request = null,
        string $contentType = self::contentTypes["updateManageGroup"][0]
    ) {
        $request = $this->updateManageGroupRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_group_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Group" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Group" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Group",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Group";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Group",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateManageGroupAsync
     *
     * Update some fields of a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupRequest $patched_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateManageGroupAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_group_request = null,
        string $contentType = self::contentTypes["updateManageGroup"][0]
    ) {
        return $this->updateManageGroupAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_group_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateManageGroupAsyncWithHttpInfo
     *
     * Update some fields of a group
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupRequest $patched_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateManageGroupAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_group_request = null,
        string $contentType = self::contentTypes["updateManageGroup"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Group";
        $request = $this->updateManageGroupRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_group_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateManageGroup'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this group. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedGroupRequest $patched_group_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateManageGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateManageGroupRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_group_request = null,
        string $contentType = self::contentTypes["updateManageGroup"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateManageGroup'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateManageGroup'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateManageGroup'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/group/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_group_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_group_request
                    )
                );
            } else {
                $httpBody = $patched_group_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProject
     *
     * Update some fields of a project
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectRequest $patched_project_request patched_project_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Project
     */
    public function updateProject(
        $cloud_pk,
        $id,
        $patched_project_request = null,
        string $contentType = self::contentTypes["updateProject"][0]
    ) {
        list($response) = $this->updateProjectWithHttpInfo(
            $cloud_pk,
            $id,
            $patched_project_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateProjectWithHttpInfo
     *
     * Update some fields of a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectRequest $patched_project_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Project, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProjectWithHttpInfo(
        $cloud_pk,
        $id,
        $patched_project_request = null,
        string $contentType = self::contentTypes["updateProject"][0]
    ) {
        $request = $this->updateProjectRequest(
            $cloud_pk,
            $id,
            $patched_project_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Project" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Project" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Project",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Project";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Project",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProjectAsync
     *
     * Update some fields of a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectRequest $patched_project_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProjectAsync(
        $cloud_pk,
        $id,
        $patched_project_request = null,
        string $contentType = self::contentTypes["updateProject"][0]
    ) {
        return $this->updateProjectAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $patched_project_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateProjectAsyncWithHttpInfo
     *
     * Update some fields of a project
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectRequest $patched_project_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProjectAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $patched_project_request = null,
        string $contentType = self::contentTypes["updateProject"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Project";
        $request = $this->updateProjectRequest(
            $cloud_pk,
            $id,
            $patched_project_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProject'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectRequest $patched_project_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProjectRequest(
        $cloud_pk,
        $id,
        $patched_project_request = null,
        string $contentType = self::contentTypes["updateProject"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateProject'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateProject'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_project_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_project_request
                    )
                );
            } else {
                $httpBody = $patched_project_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProjectAccessToken
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectAccessTokenRequest $patched_project_access_token_request patched_project_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectAccessToken
     */
    public function updateProjectAccessToken(
        $cloud_pk,
        $project_pk,
        $token,
        $patched_project_access_token_request = null,
        string $contentType = self::contentTypes["updateProjectAccessToken"][0]
    ) {
        list($response) = $this->updateProjectAccessTokenWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $token,
            $patched_project_access_token_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateProjectAccessTokenWithHttpInfo
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectAccessTokenRequest $patched_project_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProjectAccessTokenWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $token,
        $patched_project_access_token_request = null,
        string $contentType = self::contentTypes["updateProjectAccessToken"][0]
    ) {
        $request = $this->updateProjectAccessTokenRequest(
            $cloud_pk,
            $project_pk,
            $token,
            $patched_project_access_token_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProjectAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProjectAccessToken" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProjectAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProjectAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProjectAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProjectAccessTokenAsync
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectAccessTokenRequest $patched_project_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProjectAccessTokenAsync(
        $cloud_pk,
        $project_pk,
        $token,
        $patched_project_access_token_request = null,
        string $contentType = self::contentTypes["updateProjectAccessToken"][0]
    ) {
        return $this->updateProjectAccessTokenAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $token,
            $patched_project_access_token_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateProjectAccessTokenAsyncWithHttpInfo
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectAccessTokenRequest $patched_project_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProjectAccessTokenAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $token,
        $patched_project_access_token_request = null,
        string $contentType = self::contentTypes["updateProjectAccessToken"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProjectAccessToken";
        $request = $this->updateProjectAccessTokenRequest(
            $cloud_pk,
            $project_pk,
            $token,
            $patched_project_access_token_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProjectAccessToken'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedProjectAccessTokenRequest $patched_project_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProjectAccessTokenRequest(
        $cloud_pk,
        $project_pk,
        $token,
        $patched_project_access_token_request = null,
        string $contentType = self::contentTypes["updateProjectAccessToken"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateProjectAccessToken'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateProjectAccessToken'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling updateProjectAccessToken'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/access-token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_project_access_token_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_project_access_token_request
                    )
                );
            } else {
                $httpBody = $patched_project_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProjectUser
     *
     * Change the user role in the cloud
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedUserProjectUpdateRequest $patched_user_project_update_request patched_user_project_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserProject
     */
    public function updateProjectUser(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_user_project_update_request = null,
        string $contentType = self::contentTypes["updateProjectUser"][0]
    ) {
        list($response) = $this->updateProjectUserWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_user_project_update_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateProjectUserWithHttpInfo
     *
     * Change the user role in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedUserProjectUpdateRequest $patched_user_project_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserProject, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProjectUserWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_user_project_update_request = null,
        string $contentType = self::contentTypes["updateProjectUser"][0]
    ) {
        $request = $this->updateProjectUserRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_user_project_update_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\UserProject" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\UserProject" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\UserProject",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\UserProject";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\UserProject",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProjectUserAsync
     *
     * Change the user role in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedUserProjectUpdateRequest $patched_user_project_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProjectUserAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_user_project_update_request = null,
        string $contentType = self::contentTypes["updateProjectUser"][0]
    ) {
        return $this->updateProjectUserAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_user_project_update_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateProjectUserAsyncWithHttpInfo
     *
     * Change the user role in the cloud
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedUserProjectUpdateRequest $patched_user_project_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProjectUserAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_user_project_update_request = null,
        string $contentType = self::contentTypes["updateProjectUser"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\UserProject";
        $request = $this->updateProjectUserRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_user_project_update_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProjectUser'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this user project. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedUserProjectUpdateRequest $patched_user_project_update_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProjectUserRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_user_project_update_request = null,
        string $contentType = self::contentTypes["updateProjectUser"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateProjectUser'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateProjectUser'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateProjectUser'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/user/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_user_project_update_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_user_project_update_request
                    )
                );
            } else {
                $httpBody = $patched_user_project_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTag
     *
     * Update some fields of the tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedTagRequest $patched_tag_request patched_tag_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Tag
     */
    public function updateTag(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_tag_request = null,
        string $contentType = self::contentTypes["updateTag"][0]
    ) {
        list($response) = $this->updateTagWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_tag_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateTagWithHttpInfo
     *
     * Update some fields of the tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedTagRequest $patched_tag_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTag'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTagWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_tag_request = null,
        string $contentType = self::contentTypes["updateTag"][0]
    ) {
        $request = $this->updateTagRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_tag_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Tag" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Tag" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Tag",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Tag";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Tag",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTagAsync
     *
     * Update some fields of the tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedTagRequest $patched_tag_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_tag_request = null,
        string $contentType = self::contentTypes["updateTag"][0]
    ) {
        return $this->updateTagAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_tag_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateTagAsyncWithHttpInfo
     *
     * Update some fields of the tag
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedTagRequest $patched_tag_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTagAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_tag_request = null,
        string $contentType = self::contentTypes["updateTag"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Tag";
        $request = $this->updateTagRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_tag_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTag'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this tag. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedTagRequest $patched_tag_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTagRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_tag_request = null,
        string $contentType = self::contentTypes["updateTag"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateTag'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateTag'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateTag'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/tag/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_tag_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_tag_request
                    )
                );
            } else {
                $httpBody = $patched_tag_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateValidation
     *
     * Update the validator of validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaValidationRequest $patched_visa_validation_request patched_visa_validation_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VisaValidation
     */
    public function updateValidation(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_validation_request = null,
        string $contentType = self::contentTypes["updateValidation"][0]
    ) {
        list($response) = $this->updateValidationWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $patched_visa_validation_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateValidationWithHttpInfo
     *
     * Update the validator of validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaValidationRequest $patched_visa_validation_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidation'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VisaValidation, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateValidationWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_validation_request = null,
        string $contentType = self::contentTypes["updateValidation"][0]
    ) {
        $request = $this->updateValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $patched_visa_validation_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\VisaValidation" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\VisaValidation" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\VisaValidation",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\VisaValidation";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\VisaValidation",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateValidationAsync
     *
     * Update the validator of validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaValidationRequest $patched_visa_validation_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateValidationAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_validation_request = null,
        string $contentType = self::contentTypes["updateValidation"][0]
    ) {
        return $this->updateValidationAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $patched_visa_validation_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateValidationAsyncWithHttpInfo
     *
     * Update the validator of validation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaValidationRequest $patched_visa_validation_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateValidationAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_validation_request = null,
        string $contentType = self::contentTypes["updateValidation"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\VisaValidation";
        $request = $this->updateValidationRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $patched_visa_validation_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateValidation'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa validation. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaValidationRequest $patched_visa_validation_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateValidationRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_validation_request = null,
        string $contentType = self::contentTypes["updateValidation"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateValidation'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling updateValidation'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateValidation'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateValidation'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling updateValidation'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/validation/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_visa_validation_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_visa_validation_request
                    )
                );
            } else {
                $httpBody = $patched_visa_validation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateVisa
     *
     * Update some fields of a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaRequest $patched_visa_request patched_visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Visa
     */
    public function updateVisa(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $patched_visa_request = null,
        string $contentType = self::contentTypes["updateVisa"][0]
    ) {
        list($response) = $this->updateVisaWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $patched_visa_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateVisaWithHttpInfo
     *
     * Update some fields of a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaRequest $patched_visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisa'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Visa, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVisaWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $patched_visa_request = null,
        string $contentType = self::contentTypes["updateVisa"][0]
    ) {
        $request = $this->updateVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $patched_visa_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Visa" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Visa" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Visa",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Visa";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Visa",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateVisaAsync
     *
     * Update some fields of a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaRequest $patched_visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVisaAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $patched_visa_request = null,
        string $contentType = self::contentTypes["updateVisa"][0]
    ) {
        return $this->updateVisaAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $patched_visa_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateVisaAsyncWithHttpInfo
     *
     * Update some fields of a visa
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaRequest $patched_visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVisaAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $patched_visa_request = null,
        string $contentType = self::contentTypes["updateVisa"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Visa";
        $request = $this->updateVisaRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $patched_visa_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateVisa'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaRequest $patched_visa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateVisaRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $patched_visa_request = null,
        string $contentType = self::contentTypes["updateVisa"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateVisa'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling updateVisa'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateVisa'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateVisa'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_visa_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_visa_request
                    )
                );
            } else {
                $httpBody = $patched_visa_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateVisaComment
     *
     * Update some fields of a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaCommentRequest $patched_visa_comment_request patched_visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisaComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VisaComment
     */
    public function updateVisaComment(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_comment_request = null,
        string $contentType = self::contentTypes["updateVisaComment"][0]
    ) {
        list($response) = $this->updateVisaCommentWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $patched_visa_comment_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateVisaCommentWithHttpInfo
     *
     * Update some fields of a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaCommentRequest $patched_visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisaComment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VisaComment, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVisaCommentWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_comment_request = null,
        string $contentType = self::contentTypes["updateVisaComment"][0]
    ) {
        $request = $this->updateVisaCommentRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $patched_visa_comment_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\VisaComment" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\VisaComment" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\VisaComment",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\VisaComment";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\VisaComment",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateVisaCommentAsync
     *
     * Update some fields of a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaCommentRequest $patched_visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVisaCommentAsync(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_comment_request = null,
        string $contentType = self::contentTypes["updateVisaComment"][0]
    ) {
        return $this->updateVisaCommentAsyncWithHttpInfo(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $patched_visa_comment_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateVisaCommentAsyncWithHttpInfo
     *
     * Update some fields of a comment
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaCommentRequest $patched_visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVisaCommentAsyncWithHttpInfo(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_comment_request = null,
        string $contentType = self::contentTypes["updateVisaComment"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\VisaComment";
        $request = $this->updateVisaCommentRequest(
            $cloud_pk,
            $document_pk,
            $id,
            $project_pk,
            $visa_pk,
            $patched_visa_comment_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateVisaComment'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $document_pk A unique integer value identifying this document. (required)
     * @param  int $id A unique integer value identifying this visa comment. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $visa_pk A unique integer value identifying this visa. (required)
     * @param  \OpenAPI\Client\Model\PatchedVisaCommentRequest $patched_visa_comment_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVisaComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateVisaCommentRequest(
        $cloud_pk,
        $document_pk,
        $id,
        $project_pk,
        $visa_pk,
        $patched_visa_comment_request = null,
        string $contentType = self::contentTypes["updateVisaComment"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateVisaComment'
            );
        }

        // verify the required parameter 'document_pk' is set
        if (
            $document_pk === null ||
            (is_array($document_pk) && count($document_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_pk when calling updateVisaComment'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateVisaComment'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateVisaComment'
            );
        }

        // verify the required parameter 'visa_pk' is set
        if (
            $visa_pk === null ||
            (is_array($visa_pk) && count($visa_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $visa_pk when calling updateVisaComment'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/document/{document_pk}/visa/{visa_pk}/comment/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($document_pk !== null) {
            $resourcePath = str_replace(
                "{" . "document_pk" . "}",
                ObjectSerializer::toPathValue($document_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($visa_pk !== null) {
            $resourcePath = str_replace(
                "{" . "visa_pk" . "}",
                ObjectSerializer::toPathValue($visa_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_visa_comment_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_visa_comment_request
                    )
                );
            } else {
                $httpBody = $patched_visa_comment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                "a"
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    "Failed to open the debug file: " .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
