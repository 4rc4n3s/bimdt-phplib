<?php
/**
 * ModelApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModelApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModelApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        "addModelErrors" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "bulkDeleteModelClassifications" => ["application/json"],
        "bulkDeleteModelProperties" => ["application/json"],
        "bulkDeleteModelPropertyDefinitions" => ["application/json"],
        "bulkDeleteModelUnits" => ["application/json"],
        "bulkDeletePropertySet" => ["application/json"],
        "bulkFullUpdateElements" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "bulkFullUpdateModelProperty" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "bulkRemoveClassificationsOfElement" => ["application/json"],
        "bulkRemoveDocumentsOfElement" => ["application/json"],
        "bulkRemoveElementsFromClassification" => ["application/json"],
        "bulkUpdateElements" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "bulkUpdateModelProperty" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createAccessToken" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createBuilding" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createBuildingPlan" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createClassificationElementRelations" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createClassificationsOfElement" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElement" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementPropertySet" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementPropertySetProperty" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementPropertySetPropertyDefinition" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementPropertySetPropertyDefinitionUnit" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createLayer" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createMetaBuilding" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createModel" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createModelPropertyDefinition" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createModelUnit" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createPropertySet" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createPropertySetElementRelations" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createRawElements" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createSpace" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createStorey" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createStoreyPlan" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createSystem" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createTileset" => ["application/json"],
        "createZone" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createZoneSpace" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "deleteAccessToken" => ["application/json"],
        "deleteBuilding" => ["application/json"],
        "deleteBuildingPlan" => ["application/json"],
        "deleteElement" => ["application/json"],
        "deleteLayer" => ["application/json"],
        "deleteModel" => ["application/json"],
        "deleteModelProperty" => ["application/json"],
        "deleteModelPropertyDefinition" => ["application/json"],
        "deleteModelUnit" => ["application/json"],
        "deleteModelWithoutDoc" => ["application/json"],
        "deletePropertySet" => ["application/json"],
        "deleteSpace" => ["application/json"],
        "deleteStorey" => ["application/json"],
        "deleteStoreyPlan" => ["application/json"],
        "deleteSystem" => ["application/json"],
        "deleteZone" => ["application/json"],
        "deleteZoneSpace" => ["application/json"],
        "exportIfc" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "fullUpdateElement" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "getAccessToken" => ["application/json"],
        "getAccessTokens" => ["application/json"],
        "getBuilding" => ["application/json"],
        "getBuildingPlanPositioning" => ["application/json"],
        "getBuildings" => ["application/json"],
        "getClassificationsOfElement" => ["application/json"],
        "getDocumentsOfElement" => ["application/json"],
        "getElement" => ["application/json"],
        "getElementLinkedDocuments" => ["application/json"],
        "getElementPropertySet" => ["application/json"],
        "getElementPropertySetProperties" => ["application/json"],
        "getElementPropertySetProperty" => ["application/json"],
        "getElementPropertySetPropertyDefinition" => ["application/json"],
        "getElementPropertySetPropertyDefinitionUnit" => ["application/json"],
        "getElementPropertySetPropertyDefinitionUnits" => ["application/json"],
        "getElementPropertySetPropertyDefinitions" => ["application/json"],
        "getElementPropertySets" => ["application/json"],
        "getElements" => ["application/json"],
        "getElementsFromClassification" => ["application/json"],
        "getLayer" => ["application/json"],
        "getLayers" => ["application/json"],
        "getMaterial" => ["application/json"],
        "getMaterials" => ["application/json"],
        "getModel" => ["application/json"],
        "getModelClassifications" => ["application/json"],
        "getModelMaterial" => ["application/json"],
        "getModelMaterials" => ["application/json"],
        "getModelProperties" => ["application/json"],
        "getModelProperty" => ["application/json"],
        "getModelPropertyDefinition" => ["application/json"],
        "getModelPropertyDefinitions" => ["application/json"],
        "getModelUnit" => ["application/json"],
        "getModelUnits" => ["application/json"],
        "getModels" => ["application/json"],
        "getProcessorHandler" => ["application/json"],
        "getProcessorHandlers" => ["application/json"],
        "getPropertySet" => ["application/json"],
        "getPropertySets" => ["application/json"],
        "getRawElements" => ["application/json"],
        "getSimpleElement" => ["application/json"],
        "getSimpleElements" => ["application/json"],
        "getSpace" => ["application/json"],
        "getSpaces" => ["application/json"],
        "getStorey" => ["application/json"],
        "getStoreyPlanPositioning" => ["application/json"],
        "getStoreys" => ["application/json"],
        "getSystem" => ["application/json"],
        "getSystems" => ["application/json"],
        "getTileset" => ["application/json"],
        "getZone" => ["application/json"],
        "getZoneSpace" => ["application/json"],
        "getZoneSpaces" => ["application/json"],
        "getZones" => ["application/json"],
        "linkDocumentsOfElement" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "listClassificationElementRelations" => ["application/json"],
        "mergeIfcs" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "optimizeIfc" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "removeAllElementPropertySet" => ["application/json"],
        "removeClassificationOfElement" => ["application/json"],
        "removeDocumentOfElement" => ["application/json"],
        "removeElementPropertySet" => ["application/json"],
        "removeElementPropertySetProperty" => ["application/json"],
        "removeElementPropertySetPropertyDefinition" => ["application/json"],
        "removeElementPropertySetPropertyDefinitionUnit" => [
            "application/json",
        ],
        "removeElementsFromClassification" => ["application/json"],
        "reprocessModel" => ["application/json"],
        "updateAccessToken" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateBuilding" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateBuildingPlanPositioning" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateElement" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateElementPropertySetProperty" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateLayer" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateModel" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateModelFiles" => [
            "multipart/form-data",
            "application/x-www-form-urlencoded",
        ],
        "updateModelProperty" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateModelPropertyDefinition" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateModelUnit" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateOrderBuildingPlan" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateOrderStoreyPlan" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateOrderStoreys" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateProcessorHandler" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updatePropertySet" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateSpace" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateStorey" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateStoreyPlanPositioning" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateSystem" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateZone" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateZoneSpace" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addModelErrors
     *
     * Add errors to model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addModelErrors'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelErrors
     */
    public function addModelErrors(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addModelErrors"][0]
    ) {
        list($response) = $this->addModelErrorsWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $model_errors_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation addModelErrorsWithHttpInfo
     *
     * Add errors to model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addModelErrors'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelErrors, HTTP status code, HTTP response headers (array of strings)
     */
    public function addModelErrorsWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addModelErrors"][0]
    ) {
        $request = $this->addModelErrorsRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $model_errors_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ModelErrors" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ModelErrors" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ModelErrors",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ModelErrors";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ModelErrors",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addModelErrorsAsync
     *
     * Add errors to model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addModelErrors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addModelErrorsAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addModelErrors"][0]
    ) {
        return $this->addModelErrorsAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $model_errors_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addModelErrorsAsyncWithHttpInfo
     *
     * Add errors to model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addModelErrors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addModelErrorsAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addModelErrors"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ModelErrors";
        $request = $this->addModelErrorsRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $model_errors_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addModelErrors'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addModelErrors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addModelErrorsRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addModelErrors"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling addModelErrors'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addModelErrors'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling addModelErrors'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{id}/errors";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model_errors_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $model_errors_request
                    )
                );
            } else {
                $httpBody = $model_errors_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteModelClassifications
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $model_pk model_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelClassifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteModelClassifications(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelClassifications"
        ][0]
    ) {
        $this->bulkDeleteModelClassificationsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeleteModelClassificationsWithHttpInfo
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelClassifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteModelClassificationsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelClassifications"
        ][0]
    ) {
        $request = $this->bulkDeleteModelClassificationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteModelClassificationsAsync
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteModelClassificationsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelClassifications"
        ][0]
    ) {
        return $this->bulkDeleteModelClassificationsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeleteModelClassificationsAsyncWithHttpInfo
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteModelClassificationsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelClassifications"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeleteModelClassificationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteModelClassifications'
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteModelClassificationsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelClassifications"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteModelClassifications'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkDeleteModelClassifications'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteModelClassifications'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/list_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteModelProperties
     *
     * Delete many Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteModelProperties(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelProperties"][0]
    ) {
        $this->bulkDeleteModelPropertiesWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeleteModelPropertiesWithHttpInfo
     *
     * Delete many Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteModelPropertiesWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelProperties"][0]
    ) {
        $request = $this->bulkDeleteModelPropertiesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteModelPropertiesAsync
     *
     * Delete many Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteModelPropertiesAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelProperties"][0]
    ) {
        return $this->bulkDeleteModelPropertiesAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeleteModelPropertiesAsyncWithHttpInfo
     *
     * Delete many Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteModelPropertiesAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelProperties"][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeleteModelPropertiesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteModelProperties'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteModelPropertiesRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelProperties"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteModelProperties'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkDeleteModelProperties'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteModelProperties'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteModelPropertyDefinitions
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteModelPropertyDefinitions(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelPropertyDefinitions"
        ][0]
    ) {
        $this->bulkDeleteModelPropertyDefinitionsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeleteModelPropertyDefinitionsWithHttpInfo
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteModelPropertyDefinitionsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelPropertyDefinitions"
        ][0]
    ) {
        $request = $this->bulkDeleteModelPropertyDefinitionsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteModelPropertyDefinitionsAsync
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteModelPropertyDefinitionsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelPropertyDefinitions"
        ][0]
    ) {
        return $this->bulkDeleteModelPropertyDefinitionsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeleteModelPropertyDefinitionsAsyncWithHttpInfo
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteModelPropertyDefinitionsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelPropertyDefinitions"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeleteModelPropertyDefinitionsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteModelPropertyDefinitions'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteModelPropertyDefinitionsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteModelPropertyDefinitions"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteModelPropertyDefinitions'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkDeleteModelPropertyDefinitions'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteModelPropertyDefinitions'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteModelUnits
     *
     * Delete many Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeleteModelUnits(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelUnits"][0]
    ) {
        $this->bulkDeleteModelUnitsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeleteModelUnitsWithHttpInfo
     *
     * Delete many Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeleteModelUnitsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelUnits"][0]
    ) {
        $request = $this->bulkDeleteModelUnitsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteModelUnitsAsync
     *
     * Delete many Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteModelUnitsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelUnits"][0]
    ) {
        return $this->bulkDeleteModelUnitsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeleteModelUnitsAsyncWithHttpInfo
     *
     * Delete many Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeleteModelUnitsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelUnits"][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeleteModelUnitsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteModelUnits'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteModelUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeleteModelUnitsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeleteModelUnits"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteModelUnits'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkDeleteModelUnits'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteModelUnits'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeletePropertySet
     *
     * Delete many PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkDeletePropertySet(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeletePropertySet"][0]
    ) {
        $this->bulkDeletePropertySetWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeletePropertySetWithHttpInfo
     *
     * Delete many PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkDeletePropertySetWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeletePropertySet"][0]
    ) {
        $request = $this->bulkDeletePropertySetRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeletePropertySetAsync
     *
     * Delete many PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeletePropertySetAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeletePropertySet"][0]
    ) {
        return $this->bulkDeletePropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeletePropertySetAsyncWithHttpInfo
     *
     * Delete many PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkDeletePropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeletePropertySet"][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeletePropertySetRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeletePropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkDeletePropertySetRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["bulkDeletePropertySet"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeletePropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkDeletePropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeletePropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkFullUpdateElements
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request element_request (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function bulkFullUpdateElements(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkFullUpdateElements"][0]
    ) {
        list($response) = $this->bulkFullUpdateElementsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation bulkFullUpdateElementsWithHttpInfo
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkFullUpdateElementsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkFullUpdateElements"][0]
    ) {
        $request = $this->bulkFullUpdateElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkFullUpdateElementsAsync
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkFullUpdateElementsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkFullUpdateElements"][0]
    ) {
        return $this->bulkFullUpdateElementsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkFullUpdateElementsAsyncWithHttpInfo
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkFullUpdateElementsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkFullUpdateElements"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->bulkFullUpdateElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkFullUpdateElements'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkFullUpdateElementsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkFullUpdateElements"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkFullUpdateElements'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkFullUpdateElements'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkFullUpdateElements'
            );
        }

        // verify the required parameter 'element_request' is set
        if (
            $element_request === null ||
            (is_array($element_request) && count($element_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_request when calling bulkFullUpdateElements'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/bulk_update";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($element_request)
                );
            } else {
                $httpBody = $element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkFullUpdateModelProperty
     *
     * Update some fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     */
    public function bulkFullUpdateModelProperty(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateModelProperty"
        ][0]
    ) {
        list($response) = $this->bulkFullUpdateModelPropertyWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation bulkFullUpdateModelPropertyWithHttpInfo
     *
     * Update some fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkFullUpdateModelPropertyWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateModelProperty"
        ][0]
    ) {
        $request = $this->bulkFullUpdateModelPropertyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Property[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkFullUpdateModelPropertyAsync
     *
     * Update some fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkFullUpdateModelPropertyAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateModelProperty"
        ][0]
    ) {
        return $this->bulkFullUpdateModelPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkFullUpdateModelPropertyAsyncWithHttpInfo
     *
     * Update some fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkFullUpdateModelPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateModelProperty"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property[]";
        $request = $this->bulkFullUpdateModelPropertyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkFullUpdateModelProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkFullUpdateModelPropertyRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateModelProperty"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkFullUpdateModelProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkFullUpdateModelProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkFullUpdateModelProperty'
            );
        }

        // verify the required parameter 'property_request' is set
        if (
            $property_request === null ||
            (is_array($property_request) && count($property_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_request when calling bulkFullUpdateModelProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_update";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_request
                    )
                );
            } else {
                $httpBody = $property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkRemoveClassificationsOfElement
     *
     * Remove many classifications from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkRemoveClassificationsOfElement(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElement"
        ][0]
    ) {
        $this->bulkRemoveClassificationsOfElementWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkRemoveClassificationsOfElementWithHttpInfo
     *
     * Remove many classifications from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkRemoveClassificationsOfElementWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElement"
        ][0]
    ) {
        $request = $this->bulkRemoveClassificationsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkRemoveClassificationsOfElementAsync
     *
     * Remove many classifications from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveClassificationsOfElementAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElement"
        ][0]
    ) {
        return $this->bulkRemoveClassificationsOfElementAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkRemoveClassificationsOfElementAsyncWithHttpInfo
     *
     * Remove many classifications from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveClassificationsOfElementAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElement"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkRemoveClassificationsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkRemoveClassificationsOfElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkRemoveClassificationsOfElementRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElement"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkRemoveClassificationsOfElement'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling bulkRemoveClassificationsOfElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkRemoveClassificationsOfElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkRemoveClassificationsOfElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkRemoveDocumentsOfElement
     *
     * Remove many documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkRemoveDocumentsOfElement(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElement"
        ][0]
    ) {
        $this->bulkRemoveDocumentsOfElementWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkRemoveDocumentsOfElementWithHttpInfo
     *
     * Remove many documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkRemoveDocumentsOfElementWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElement"
        ][0]
    ) {
        $request = $this->bulkRemoveDocumentsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkRemoveDocumentsOfElementAsync
     *
     * Remove many documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveDocumentsOfElementAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElement"
        ][0]
    ) {
        return $this->bulkRemoveDocumentsOfElementAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkRemoveDocumentsOfElementAsyncWithHttpInfo
     *
     * Remove many documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveDocumentsOfElementAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElement"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkRemoveDocumentsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkRemoveDocumentsOfElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkRemoveDocumentsOfElementRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElement"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkRemoveDocumentsOfElement'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling bulkRemoveDocumentsOfElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkRemoveDocumentsOfElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkRemoveDocumentsOfElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkRemoveElementsFromClassification
     *
     * Remove the classifications from all elements
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bulkRemoveElementsFromClassification(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassification"
        ][0]
    ) {
        $this->bulkRemoveElementsFromClassificationWithHttpInfo(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkRemoveElementsFromClassificationWithHttpInfo
     *
     * Remove the classifications from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkRemoveElementsFromClassificationWithHttpInfo(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassification"
        ][0]
    ) {
        $request = $this->bulkRemoveElementsFromClassificationRequest(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkRemoveElementsFromClassificationAsync
     *
     * Remove the classifications from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveElementsFromClassificationAsync(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassification"
        ][0]
    ) {
        return $this->bulkRemoveElementsFromClassificationAsyncWithHttpInfo(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkRemoveElementsFromClassificationAsyncWithHttpInfo
     *
     * Remove the classifications from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkRemoveElementsFromClassificationAsyncWithHttpInfo(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassification"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkRemoveElementsFromClassificationRequest(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkRemoveElementsFromClassification'
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkRemoveElementsFromClassificationRequest(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassification"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkRemoveElementsFromClassification'
            );
        }

        // verify the required parameter 'model_classification_pk' is set
        if (
            $model_classification_pk === null ||
            (is_array($model_classification_pk) &&
                count($model_classification_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_classification_pk when calling bulkRemoveElementsFromClassification'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkRemoveElementsFromClassification'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkRemoveElementsFromClassification'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_classification_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_classification_pk" . "}",
                ObjectSerializer::toPathValue($model_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateElements
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request element_request (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function bulkUpdateElements(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkUpdateElements"][0]
    ) {
        list($response) = $this->bulkUpdateElementsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation bulkUpdateElementsWithHttpInfo
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateElementsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkUpdateElements"][0]
    ) {
        $request = $this->bulkUpdateElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateElementsAsync
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateElementsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkUpdateElements"][0]
    ) {
        return $this->bulkUpdateElementsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkUpdateElementsAsyncWithHttpInfo
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateElementsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkUpdateElements"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->bulkUpdateElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateElements'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdateElementsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["bulkUpdateElements"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkUpdateElements'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkUpdateElements'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkUpdateElements'
            );
        }

        // verify the required parameter 'element_request' is set
        if (
            $element_request === null ||
            (is_array($element_request) && count($element_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_request when calling bulkUpdateElements'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/bulk_update";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($element_request)
                );
            } else {
                $httpBody = $element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PUT",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateModelProperty
     *
     * Update all fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     */
    public function bulkUpdateModelProperty(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes["bulkUpdateModelProperty"][0]
    ) {
        list($response) = $this->bulkUpdateModelPropertyWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation bulkUpdateModelPropertyWithHttpInfo
     *
     * Update all fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bulkUpdateModelPropertyWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes["bulkUpdateModelProperty"][0]
    ) {
        $request = $this->bulkUpdateModelPropertyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Property[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateModelPropertyAsync
     *
     * Update all fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateModelPropertyAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes["bulkUpdateModelProperty"][0]
    ) {
        return $this->bulkUpdateModelPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkUpdateModelPropertyAsyncWithHttpInfo
     *
     * Update all fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bulkUpdateModelPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes["bulkUpdateModelProperty"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property[]";
        $request = $this->bulkUpdateModelPropertyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateModelProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function bulkUpdateModelPropertyRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes["bulkUpdateModelProperty"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkUpdateModelProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling bulkUpdateModelProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkUpdateModelProperty'
            );
        }

        // verify the required parameter 'property_request' is set
        if (
            $property_request === null ||
            (is_array($property_request) && count($property_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_request when calling bulkUpdateModelProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/bulk_update";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_request
                    )
                );
            } else {
                $httpBody = $property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PUT",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccessToken
     *
     * Create a token for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     */
    public function createAccessToken(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes["createAccessToken"][0]
    ) {
        list($response) = $this->createAccessTokenWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $ifc_access_token_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createAccessTokenWithHttpInfo
     *
     * Create a token for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccessTokenWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes["createAccessToken"][0]
    ) {
        $request = $this->createAccessTokenRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $ifc_access_token_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\IfcAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\IfcAccessToken" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccessTokenAsync
     *
     * Create a token for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccessTokenAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes["createAccessToken"][0]
    ) {
        return $this->createAccessTokenAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $ifc_access_token_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAccessTokenAsyncWithHttpInfo
     *
     * Create a token for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccessTokenAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes["createAccessToken"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
        $request = $this->createAccessTokenRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $ifc_access_token_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccessToken'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAccessTokenRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes["createAccessToken"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createAccessToken'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createAccessToken'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createAccessToken'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_access_token_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_access_token_request
                    )
                );
            } else {
                $httpBody = $ifc_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBuilding
     *
     * Create a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building
     */
    public function createBuilding(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuilding"][0]
    ) {
        list($response) = $this->createBuildingWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createBuildingWithHttpInfo
     *
     * Create a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBuildingWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuilding"][0]
    ) {
        $request = $this->createBuildingRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Building" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBuildingAsync
     *
     * Create a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildingAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuilding"][0]
    ) {
        return $this->createBuildingAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createBuildingAsyncWithHttpInfo
     *
     * Create a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildingAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuilding"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building";
        $request = $this->createBuildingRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBuilding'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBuildingRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuilding"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createBuilding'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createBuilding'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createBuilding'
            );
        }

        // verify the required parameter 'storey_building_request' is set
        if (
            $storey_building_request === null ||
            (is_array($storey_building_request) &&
                count($storey_building_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_building_request when calling createBuilding'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($storey_building_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $storey_building_request
                    )
                );
            } else {
                $httpBody = $storey_building_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBuildingPlan
     *
     * Create a relation between a 2d model and a building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building
     */
    public function createBuildingPlan(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes["createBuildingPlan"][0]
    ) {
        list($response) = $this->createBuildingPlanWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $building_model_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createBuildingPlanWithHttpInfo
     *
     * Create a relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBuildingPlanWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes["createBuildingPlan"][0]
    ) {
        $request = $this->createBuildingPlanRequest(
            $building_uuid,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $building_model_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Building" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBuildingPlanAsync
     *
     * Create a relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildingPlanAsync(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes["createBuildingPlan"][0]
    ) {
        return $this->createBuildingPlanAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $building_model_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createBuildingPlanAsyncWithHttpInfo
     *
     * Create a relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildingPlanAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes["createBuildingPlan"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building";
        $request = $this->createBuildingPlanRequest(
            $building_uuid,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $building_model_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBuildingPlan'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBuildingPlanRequest(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes["createBuildingPlan"][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling createBuildingPlan'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createBuildingPlan'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createBuildingPlan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createBuildingPlan'
            );
        }

        // verify the required parameter 'building_model_plan_request' is set
        if (
            $building_model_plan_request === null ||
            (is_array($building_model_plan_request) &&
                count($building_model_plan_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_model_plan_request when calling createBuildingPlan'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/add";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($building_model_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $building_model_plan_request
                    )
                );
            } else {
                $httpBody = $building_model_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createClassificationElementRelations
     *
     * Create association between existing classification and existing element
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createClassificationElementRelations(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelations"
        ][0]
    ) {
        $this->createClassificationElementRelationsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_classification_relation_request,
            $contentType
        );
    }

    /**
     * Operation createClassificationElementRelationsWithHttpInfo
     *
     * Create association between existing classification and existing element
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClassificationElementRelationsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelations"
        ][0]
    ) {
        $request = $this->createClassificationElementRelationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_classification_relation_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createClassificationElementRelationsAsync
     *
     * Create association between existing classification and existing element
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationElementRelationsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelations"
        ][0]
    ) {
        return $this->createClassificationElementRelationsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_classification_relation_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createClassificationElementRelationsAsyncWithHttpInfo
     *
     * Create association between existing classification and existing element
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationElementRelationsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelations"
        ][0]
    ) {
        $returnType = "";
        $request = $this->createClassificationElementRelationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_classification_relation_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClassificationElementRelations'
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClassificationElementRelationsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelations"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createClassificationElementRelations'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createClassificationElementRelations'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createClassificationElementRelations'
            );
        }

        // verify the required parameter 'element_classification_relation_request' is set
        if (
            $element_classification_relation_request === null ||
            (is_array($element_classification_relation_request) &&
                count($element_classification_relation_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_classification_relation_request when calling createClassificationElementRelations'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification-element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_classification_relation_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $element_classification_relation_request
                    )
                );
            } else {
                $httpBody = $element_classification_relation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createClassificationsOfElement
     *
     * Create one or many classifications to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     */
    public function createClassificationsOfElement(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElement"
        ][0]
    ) {
        list($response) = $this->createClassificationsOfElementWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $classification_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createClassificationsOfElementWithHttpInfo
     *
     * Create one or many classifications to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createClassificationsOfElementWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElement"
        ][0]
    ) {
        $request = $this->createClassificationsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $classification_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createClassificationsOfElementAsync
     *
     * Create one or many classifications to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationsOfElementAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElement"
        ][0]
    ) {
        return $this->createClassificationsOfElementAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $classification_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createClassificationsOfElementAsyncWithHttpInfo
     *
     * Create one or many classifications to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClassificationsOfElementAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElement"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification[]";
        $request = $this->createClassificationsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $classification_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClassificationsOfElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClassificationsOfElementRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElement"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createClassificationsOfElement'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createClassificationsOfElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createClassificationsOfElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createClassificationsOfElement'
            );
        }

        // verify the required parameter 'classification_request' is set
        if (
            $classification_request === null ||
            (is_array($classification_request) &&
                count($classification_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $classification_request when calling createClassificationsOfElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($classification_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $classification_request
                    )
                );
            } else {
                $httpBody = $classification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElement
     *
     * Create an element in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request element_request (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function createElement(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElement"][0]
    ) {
        list($response) = $this->createElementWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementWithHttpInfo
     *
     * Create an element in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElement"][0]
    ) {
        $request = $this->createElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementAsync
     *
     * Create an element in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElement"][0]
    ) {
        return $this->createElementAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementAsyncWithHttpInfo
     *
     * Create an element in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElement"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->createElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElement'
            );
        }

        // verify the required parameter 'element_request' is set
        if (
            $element_request === null ||
            (is_array($element_request) && count($element_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_request when calling createElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($element_request)
                );
            } else {
                $httpBody = $element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySet
     *
     * Create a PropertySets to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function createElementPropertySet(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes["createElementPropertySet"][0]
    ) {
        list($response) = $this->createElementPropertySetWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementPropertySetWithHttpInfo
     *
     * Create a PropertySets to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementPropertySetWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes["createElementPropertySet"][0]
    ) {
        $request = $this->createElementPropertySetRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\PropertySet" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\PropertySet" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetAsync
     *
     * Create a PropertySets to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes["createElementPropertySet"][0]
    ) {
        return $this->createElementPropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_set_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementPropertySetAsyncWithHttpInfo
     *
     * Create a PropertySets to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes["createElementPropertySet"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet";
        $request = $this->createElementPropertySetRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementPropertySetRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes["createElementPropertySet"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySet'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createElementPropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_set_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_set_request
                    )
                );
            } else {
                $httpBody = $property_set_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetProperty
     *
     * Create a property to a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function createElementPropertySetProperty(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetProperty"
        ][0]
    ) {
        list($response) = $this->createElementPropertySetPropertyWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyWithHttpInfo
     *
     * Create a property to a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementPropertySetPropertyWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetProperty"
        ][0]
    ) {
        $request = $this->createElementPropertySetPropertyRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyAsync
     *
     * Create a property to a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetProperty"
        ][0]
    ) {
        return $this->createElementPropertySetPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Create a property to a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetProperty"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->createElementPropertySetPropertyRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementPropertySetPropertyRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetProperty"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetProperty'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createElementPropertySetProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetProperty'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetProperty'
            );
        }

        // verify the required parameter 'property_request' is set
        if (
            $property_request === null ||
            (is_array($property_request) && count($property_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_request when calling createElementPropertySetProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_request
                    )
                );
            } else {
                $httpBody = $property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetPropertyDefinition
     *
     * Create a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function createElementPropertySetPropertyDefinition(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinition"
        ][0]
    ) {
        list(
            $response,
        ) = $this->createElementPropertySetPropertyDefinitionWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $property_definition_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionWithHttpInfo
     *
     * Create a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementPropertySetPropertyDefinitionWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinition"
        ][0]
    ) {
        $request = $this->createElementPropertySetPropertyDefinitionRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $property_definition_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionAsync
     *
     * Create a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyDefinitionAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinition"
        ][0]
    ) {
        return $this->createElementPropertySetPropertyDefinitionAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $property_definition_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionAsyncWithHttpInfo
     *
     * Create a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyDefinitionAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinition"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
        $request = $this->createElementPropertySetPropertyDefinitionRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $property_definition_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetPropertyDefinition'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementPropertySetPropertyDefinitionRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinition"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling createElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetPropertyDefinition'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_definition_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_definition_request
                    )
                );
            } else {
                $httpBody = $property_definition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnit
     *
     * Create a Unit to a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function createElementPropertySetPropertyDefinitionUnit(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        list(
            $response,
        ) = $this->createElementPropertySetPropertyDefinitionUnitWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $unit_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitWithHttpInfo
     *
     * Create a Unit to a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function createElementPropertySetPropertyDefinitionUnitWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        $request = $this->createElementPropertySetPropertyDefinitionUnitRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $unit_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Unit" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitAsync
     *
     * Create a Unit to a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyDefinitionUnitAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        return $this->createElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $unit_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo
     *
     * Create a Unit to a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit";
        $request = $this->createElementPropertySetPropertyDefinitionUnitRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $unit_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetPropertyDefinitionUnit'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createElementPropertySetPropertyDefinitionUnitRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'propertydefinition_pk' is set
        if (
            $propertydefinition_pk === null ||
            (is_array($propertydefinition_pk) &&
                count($propertydefinition_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'unit_request' is set
        if (
            $unit_request === null ||
            (is_array($unit_request) && count($unit_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_request when calling createElementPropertySetPropertyDefinitionUnit'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertydefinition_pk" . "}",
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unit_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($unit_request)
                );
            } else {
                $httpBody = $unit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLayer
     *
     * Create a layer in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     */
    public function createLayer(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayer"][0]
    ) {
        list($response) = $this->createLayerWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $layer_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createLayerWithHttpInfo
     *
     * Create a layer in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLayerWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayer"][0]
    ) {
        $request = $this->createLayerRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $layer_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Layer" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Layer" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Layer",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Layer";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Layer",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLayerAsync
     *
     * Create a layer in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLayerAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayer"][0]
    ) {
        return $this->createLayerAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $layer_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLayerAsyncWithHttpInfo
     *
     * Create a layer in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLayerAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayer"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Layer";
        $request = $this->createLayerRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $layer_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLayer'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLayerRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayer"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createLayer'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createLayer'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createLayer'
            );
        }

        // verify the required parameter 'layer_request' is set
        if (
            $layer_request === null ||
            (is_array($layer_request) && count($layer_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $layer_request when calling createLayer'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($layer_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($layer_request)
                );
            } else {
                $httpBody = $layer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMetaBuilding
     *
     * Create an empty 3D Model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model
     */
    public function createMetaBuilding(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes["createMetaBuilding"][0]
    ) {
        list($response) = $this->createMetaBuildingWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $create_building_by_name_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createMetaBuildingWithHttpInfo
     *
     * Create an empty 3D Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMetaBuildingWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes["createMetaBuilding"][0]
    ) {
        $request = $this->createMetaBuildingRequest(
            $cloud_pk,
            $project_pk,
            $create_building_by_name_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Model" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMetaBuildingAsync
     *
     * Create an empty 3D Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMetaBuildingAsync(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes["createMetaBuilding"][0]
    ) {
        return $this->createMetaBuildingAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $create_building_by_name_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createMetaBuildingAsyncWithHttpInfo
     *
     * Create an empty 3D Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMetaBuildingAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes["createMetaBuilding"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model";
        $request = $this->createMetaBuildingRequest(
            $cloud_pk,
            $project_pk,
            $create_building_by_name_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMetaBuilding'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createMetaBuildingRequest(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes["createMetaBuilding"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createMetaBuilding'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createMetaBuilding'
            );
        }

        // verify the required parameter 'create_building_by_name_request' is set
        if (
            $create_building_by_name_request === null ||
            (is_array($create_building_by_name_request) &&
                count($create_building_by_name_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_building_by_name_request when calling createMetaBuilding'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/create-metabuilding";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_building_by_name_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $create_building_by_name_request
                    )
                );
            } else {
                $httpBody = $create_building_by_name_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createModel
     *
     * Make a PDF or Image file a Model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model
     */
    public function createModel(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createModel"][0]
    ) {
        list($response) = $this->createModelWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $create_model_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createModelWithHttpInfo
     *
     * Make a PDF or Image file a Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     */
    public function createModelWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createModel"][0]
    ) {
        $request = $this->createModelRequest(
            $cloud_pk,
            $project_pk,
            $create_model_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Model" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createModelAsync
     *
     * Make a PDF or Image file a Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createModelAsync(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createModel"][0]
    ) {
        return $this->createModelAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $create_model_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createModelAsyncWithHttpInfo
     *
     * Make a PDF or Image file a Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createModelAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createModel"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model";
        $request = $this->createModelRequest(
            $cloud_pk,
            $project_pk,
            $create_model_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createModel'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createModelRequest(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createModel"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createModel'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createModel'
            );
        }

        // verify the required parameter 'create_model_request' is set
        if (
            $create_model_request === null ||
            (is_array($create_model_request) &&
                count($create_model_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_model_request when calling createModel'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/create-model";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_model_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $create_model_request
                    )
                );
            } else {
                $httpBody = $create_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createModelPropertyDefinition
     *
     * Create a PropertyDefinition on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     */
    public function createModelPropertyDefinition(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createModelPropertyDefinition"
        ][0]
    ) {
        list($response) = $this->createModelPropertyDefinitionWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_definition_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createModelPropertyDefinitionWithHttpInfo
     *
     * Create a PropertyDefinition on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createModelPropertyDefinitionWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createModelPropertyDefinition"
        ][0]
    ) {
        $request = $this->createModelPropertyDefinitionRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_definition_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createModelPropertyDefinitionAsync
     *
     * Create a PropertyDefinition on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createModelPropertyDefinitionAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createModelPropertyDefinition"
        ][0]
    ) {
        return $this->createModelPropertyDefinitionAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_definition_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createModelPropertyDefinitionAsyncWithHttpInfo
     *
     * Create a PropertyDefinition on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createModelPropertyDefinitionAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createModelPropertyDefinition"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
        $request = $this->createModelPropertyDefinitionRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_definition_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createModelPropertyDefinition'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createModelPropertyDefinitionRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createModelPropertyDefinition"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createModelPropertyDefinition'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createModelPropertyDefinition'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createModelPropertyDefinition'
            );
        }

        // verify the required parameter 'property_definition_request' is set
        if (
            $property_definition_request === null ||
            (is_array($property_definition_request) &&
                count($property_definition_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_definition_request when calling createModelPropertyDefinition'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_definition_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_definition_request
                    )
                );
            } else {
                $httpBody = $property_definition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createModelUnit
     *
     * Create a Unit on a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     */
    public function createModelUnit(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createModelUnit"][0]
    ) {
        list($response) = $this->createModelUnitWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $unit_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createModelUnitWithHttpInfo
     *
     * Create a Unit on a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createModelUnitWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createModelUnit"][0]
    ) {
        $request = $this->createModelUnitRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $unit_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createModelUnitAsync
     *
     * Create a Unit on a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createModelUnitAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createModelUnit"][0]
    ) {
        return $this->createModelUnitAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $unit_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createModelUnitAsyncWithHttpInfo
     *
     * Create a Unit on a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createModelUnitAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createModelUnit"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit[]";
        $request = $this->createModelUnitRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $unit_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createModelUnit'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createModelUnitRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createModelUnit"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createModelUnit'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createModelUnit'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createModelUnit'
            );
        }

        // verify the required parameter 'unit_request' is set
        if (
            $unit_request === null ||
            (is_array($unit_request) && count($unit_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_request when calling createModelUnit'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unit_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($unit_request)
                );
            } else {
                $httpBody = $unit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPropertySet
     *
     * Create one or many PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     */
    public function createPropertySet(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes["createPropertySet"][0]
    ) {
        list($response) = $this->createPropertySetWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createPropertySetWithHttpInfo
     *
     * Create one or many PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createPropertySetWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes["createPropertySet"][0]
    ) {
        $request = $this->createPropertySetRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertySet[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPropertySetAsync
     *
     * Create one or many PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertySetAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes["createPropertySet"][0]
    ) {
        return $this->createPropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_set_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createPropertySetAsyncWithHttpInfo
     *
     * Create one or many PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes["createPropertySet"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet[]";
        $request = $this->createPropertySetRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPropertySetRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes["createPropertySet"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createPropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createPropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createPropertySet'
            );
        }

        // verify the required parameter 'property_set_request' is set
        if (
            $property_set_request === null ||
            (is_array($property_set_request) &&
                count($property_set_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_set_request when calling createPropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_set_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_set_request
                    )
                );
            } else {
                $httpBody = $property_set_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPropertySetElementRelations
     *
     * Create association between PropertySet and element
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createPropertySetElementRelations(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelations"
        ][0]
    ) {
        $this->createPropertySetElementRelationsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_property_set_relation_request,
            $contentType
        );
    }

    /**
     * Operation createPropertySetElementRelationsWithHttpInfo
     *
     * Create association between PropertySet and element
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPropertySetElementRelationsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelations"
        ][0]
    ) {
        $request = $this->createPropertySetElementRelationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_property_set_relation_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPropertySetElementRelationsAsync
     *
     * Create association between PropertySet and element
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertySetElementRelationsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelations"
        ][0]
    ) {
        return $this->createPropertySetElementRelationsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_property_set_relation_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createPropertySetElementRelationsAsyncWithHttpInfo
     *
     * Create association between PropertySet and element
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPropertySetElementRelationsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelations"
        ][0]
    ) {
        $returnType = "";
        $request = $this->createPropertySetElementRelationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $element_property_set_relation_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPropertySetElementRelations'
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPropertySetElementRelationsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelations"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createPropertySetElementRelations'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createPropertySetElementRelations'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createPropertySetElementRelations'
            );
        }

        // verify the required parameter 'element_property_set_relation_request' is set
        if (
            $element_property_set_relation_request === null ||
            (is_array($element_property_set_relation_request) &&
                count($element_property_set_relation_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_property_set_relation_request when calling createPropertySetElementRelations'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset-element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_property_set_relation_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $element_property_set_relation_request
                    )
                );
            } else {
                $httpBody = $element_property_set_relation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRawElements
     *
     * Create elements in an optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createRawElements(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes["createRawElements"][0]
    ) {
        $this->createRawElementsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $raw_elements_request,
            $contentType
        );
    }

    /**
     * Operation createRawElementsWithHttpInfo
     *
     * Create elements in an optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRawElementsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes["createRawElements"][0]
    ) {
        $request = $this->createRawElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $raw_elements_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createRawElementsAsync
     *
     * Create elements in an optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRawElementsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes["createRawElements"][0]
    ) {
        return $this->createRawElementsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $raw_elements_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createRawElementsAsyncWithHttpInfo
     *
     * Create elements in an optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRawElementsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes["createRawElements"][0]
    ) {
        $returnType = "";
        $request = $this->createRawElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $raw_elements_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRawElements'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRawElementsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes["createRawElements"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRawElements'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createRawElements'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRawElements'
            );
        }

        // verify the required parameter 'raw_elements_request' is set
        if (
            $raw_elements_request === null ||
            (is_array($raw_elements_request) &&
                count($raw_elements_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $raw_elements_request when calling createRawElements'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/raw";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($raw_elements_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $raw_elements_request
                    )
                );
            } else {
                $httpBody = $raw_elements_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSpace
     *
     * Create a space in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space[]
     */
    public function createSpace(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpace"][0]
    ) {
        list($response) = $this->createSpaceWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $space_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createSpaceWithHttpInfo
     *
     * Create a space in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createSpaceWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpace"][0]
    ) {
        $request = $this->createSpaceRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $space_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Space[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Space[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Space[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Space[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Space[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSpaceAsync
     *
     * Create a space in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSpaceAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpace"][0]
    ) {
        return $this->createSpaceAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $space_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSpaceAsyncWithHttpInfo
     *
     * Create a space in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSpaceAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpace"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Space[]";
        $request = $this->createSpaceRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $space_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSpace'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSpaceRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpace"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createSpace'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createSpace'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createSpace'
            );
        }

        // verify the required parameter 'space_request' is set
        if (
            $space_request === null ||
            (is_array($space_request) && count($space_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $space_request when calling createSpace'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($space_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($space_request)
                );
            } else {
                $httpBody = $space_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createStorey
     *
     * Create a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStorey'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     */
    public function createStorey(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStorey"][0]
    ) {
        list($response) = $this->createStoreyWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createStoreyWithHttpInfo
     *
     * Create a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStorey'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStoreyWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStorey"][0]
    ) {
        $request = $this->createStoreyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStoreyAsync
     *
     * Create a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStoreyAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStorey"][0]
    ) {
        return $this->createStoreyAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createStoreyAsyncWithHttpInfo
     *
     * Create a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStoreyAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStorey"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->createStoreyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStorey'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createStoreyRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStorey"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createStorey'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createStorey'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createStorey'
            );
        }

        // verify the required parameter 'storey_building_request' is set
        if (
            $storey_building_request === null ||
            (is_array($storey_building_request) &&
                count($storey_building_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_building_request when calling createStorey'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($storey_building_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $storey_building_request
                    )
                );
            } else {
                $httpBody = $storey_building_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createStoreyPlan
     *
     * Create a relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     */
    public function createStoreyPlan(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes["createStoreyPlan"][0]
    ) {
        list($response) = $this->createStoreyPlanWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $storey_model_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createStoreyPlanWithHttpInfo
     *
     * Create a relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStoreyPlanWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes["createStoreyPlan"][0]
    ) {
        $request = $this->createStoreyPlanRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $storey_model_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStoreyPlanAsync
     *
     * Create a relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStoreyPlanAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes["createStoreyPlan"][0]
    ) {
        return $this->createStoreyPlanAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $storey_model_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createStoreyPlanAsyncWithHttpInfo
     *
     * Create a relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStoreyPlanAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes["createStoreyPlan"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->createStoreyPlanRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $storey_model_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStoreyPlan'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createStoreyPlanRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes["createStoreyPlan"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createStoreyPlan'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createStoreyPlan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createStoreyPlan'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling createStoreyPlan'
            );
        }

        // verify the required parameter 'storey_model_plan_request' is set
        if (
            $storey_model_plan_request === null ||
            (is_array($storey_model_plan_request) &&
                count($storey_model_plan_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_model_plan_request when calling createStoreyPlan'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/add";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($storey_model_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $storey_model_plan_request
                    )
                );
            } else {
                $httpBody = $storey_model_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSystem
     *
     * Create a system in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     */
    public function createSystem(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystem"][0]
    ) {
        list($response) = $this->createSystemWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $system_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createSystemWithHttpInfo
     *
     * Create a system in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSystemWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystem"][0]
    ) {
        $request = $this->createSystemRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $system_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\System" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\System" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\System",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\System";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\System",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSystemAsync
     *
     * Create a system in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSystemAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystem"][0]
    ) {
        return $this->createSystemAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $system_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSystemAsyncWithHttpInfo
     *
     * Create a system in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSystemAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystem"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\System";
        $request = $this->createSystemRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $system_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSystem'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createSystemRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystem"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createSystem'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createSystem'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createSystem'
            );
        }

        // verify the required parameter 'system_request' is set
        if (
            $system_request === null ||
            (is_array($system_request) && count($system_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_request when calling createSystem'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($system_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($system_request)
                );
            } else {
                $httpBody = $system_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTileset
     *
     * Create the tileset of the model and upload all files
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTileset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createTileset(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTileset"][0]
    ) {
        $this->createTilesetWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation createTilesetWithHttpInfo
     *
     * Create the tileset of the model and upload all files
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTileset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTilesetWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTileset"][0]
    ) {
        $request = $this->createTilesetRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createTilesetAsync
     *
     * Create the tileset of the model and upload all files
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTileset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTilesetAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTileset"][0]
    ) {
        return $this->createTilesetAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTilesetAsyncWithHttpInfo
     *
     * Create the tileset of the model and upload all files
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTileset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTilesetAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTileset"][0]
    ) {
        $returnType = "";
        $request = $this->createTilesetRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTileset'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTileset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTilesetRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTileset"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createTileset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createTileset'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createTileset'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{id}/tileset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createZone
     *
     * Create a zone in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request zone_request (required)
     * @param  string $color color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone[]
     */
    public function createZone(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZone"][0]
    ) {
        list($response) = $this->createZoneWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_request,
            $color,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createZoneWithHttpInfo
     *
     * Create a zone in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createZoneWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZone"][0]
    ) {
        $request = $this->createZoneRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_request,
            $color,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Zone[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Zone[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Zone[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Zone[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Zone[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createZoneAsync
     *
     * Create a zone in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZone"][0]
    ) {
        return $this->createZoneAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_request,
            $color,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createZoneAsyncWithHttpInfo
     *
     * Create a zone in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZone"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Zone[]";
        $request = $this->createZoneRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_request,
            $color,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createZone'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createZoneRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZone"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createZone'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createZone'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createZone'
            );
        }

        // verify the required parameter 'zone_request' is set
        if (
            $zone_request === null ||
            (is_array($zone_request) && count($zone_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_request when calling createZone'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $color,
                "color", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($zone_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($zone_request)
                );
            } else {
                $httpBody = $zone_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createZoneSpace
     *
     * Create a space in a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     */
    public function createZoneSpace(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpace"][0]
    ) {
        list($response) = $this->createZoneSpaceWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_pk,
            $zone_space_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createZoneSpaceWithHttpInfo
     *
     * Create a space in a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     */
    public function createZoneSpaceWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpace"][0]
    ) {
        $request = $this->createZoneSpaceRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_pk,
            $zone_space_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\ZoneSpace" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ZoneSpace" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ZoneSpace",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ZoneSpace";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ZoneSpace",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createZoneSpaceAsync
     *
     * Create a space in a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneSpaceAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpace"][0]
    ) {
        return $this->createZoneSpaceAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_pk,
            $zone_space_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createZoneSpaceAsyncWithHttpInfo
     *
     * Create a space in a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZoneSpaceAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpace"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ZoneSpace";
        $request = $this->createZoneSpaceRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_pk,
            $zone_space_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createZoneSpace'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createZoneSpaceRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpace"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createZoneSpace'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createZoneSpace'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createZoneSpace'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling createZoneSpace'
            );
        }

        // verify the required parameter 'zone_space_request' is set
        if (
            $zone_space_request === null ||
            (is_array($zone_space_request) && count($zone_space_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_space_request when calling createZoneSpace'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($zone_space_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $zone_space_request
                    )
                );
            } else {
                $httpBody = $zone_space_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccessToken
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccessToken(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteAccessToken"][0]
    ) {
        $this->deleteAccessTokenWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $contentType
        );
    }

    /**
     * Operation deleteAccessTokenWithHttpInfo
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccessTokenWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteAccessToken"][0]
    ) {
        $request = $this->deleteAccessTokenRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccessTokenAsync
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccessTokenAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteAccessToken"][0]
    ) {
        return $this->deleteAccessTokenAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAccessTokenAsyncWithHttpInfo
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccessTokenAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteAccessToken"][0]
    ) {
        $returnType = "";
        $request = $this->deleteAccessTokenRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccessToken'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccessTokenRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["deleteAccessToken"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteAccessToken'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteAccessToken'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteAccessToken'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteAccessToken'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBuilding
     *
     * Delete a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteBuilding(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuilding"][0]
    ) {
        $this->deleteBuildingWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation deleteBuildingWithHttpInfo
     *
     * Delete a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBuildingWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuilding"][0]
    ) {
        $request = $this->deleteBuildingRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBuildingAsync
     *
     * Delete a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuildingAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuilding"][0]
    ) {
        return $this->deleteBuildingAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteBuildingAsyncWithHttpInfo
     *
     * Delete a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuildingAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuilding"][0]
    ) {
        $returnType = "";
        $request = $this->deleteBuildingRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBuilding'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBuildingRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuilding"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteBuilding'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteBuilding'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteBuilding'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteBuilding'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBuildingPlan
     *
     * Delete the relation between a 2d model and a building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteBuildingPlan(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteBuildingPlan"][0]
    ) {
        $this->deleteBuildingPlanWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteBuildingPlanWithHttpInfo
     *
     * Delete the relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBuildingPlanWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteBuildingPlan"][0]
    ) {
        $request = $this->deleteBuildingPlanRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBuildingPlanAsync
     *
     * Delete the relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuildingPlanAsync(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteBuildingPlan"][0]
    ) {
        return $this->deleteBuildingPlanAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteBuildingPlanAsyncWithHttpInfo
     *
     * Delete the relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuildingPlanAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteBuildingPlan"][0]
    ) {
        $returnType = "";
        $request = $this->deleteBuildingPlanRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBuildingPlan'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBuildingPlanRequest(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteBuildingPlan"][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling deleteBuildingPlan'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteBuildingPlan'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteBuildingPlan'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteBuildingPlan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteBuildingPlan'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteElement
     *
     * Delete an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteElement(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElement"][0]
    ) {
        $this->deleteElementWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation deleteElementWithHttpInfo
     *
     * Delete an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteElementWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElement"][0]
    ) {
        $request = $this->deleteElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteElementAsync
     *
     * Delete an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteElementAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElement"][0]
    ) {
        return $this->deleteElementAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteElementAsyncWithHttpInfo
     *
     * Delete an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteElementAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElement"][0]
    ) {
        $returnType = "";
        $request = $this->deleteElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteElementRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteElement'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLayer
     *
     * Delete a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLayer(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayer"][0]
    ) {
        $this->deleteLayerWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteLayerWithHttpInfo
     *
     * Delete a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLayerWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayer"][0]
    ) {
        $request = $this->deleteLayerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLayerAsync
     *
     * Delete a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLayerAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayer"][0]
    ) {
        return $this->deleteLayerAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLayerAsyncWithHttpInfo
     *
     * Delete a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLayerAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayer"][0]
    ) {
        $returnType = "";
        $request = $this->deleteLayerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLayer'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLayerRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayer"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteLayer'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLayer'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteLayer'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteLayer'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteModel
     *
     * Delete a model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteModel(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModel"][0]
    ) {
        $this->deleteModelWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteModelWithHttpInfo
     *
     * Delete a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModelWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModel"][0]
    ) {
        $request = $this->deleteModelRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteModelAsync
     *
     * Delete a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModel"][0]
    ) {
        return $this->deleteModelAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteModelAsyncWithHttpInfo
     *
     * Delete a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModel"][0]
    ) {
        $returnType = "";
        $request = $this->deleteModelRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteModel'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteModelRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModel"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteModel'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteModel'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteModel'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/model/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteModelProperty
     *
     * Delete a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteModelProperty(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelProperty"][0]
    ) {
        $this->deleteModelPropertyWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteModelPropertyWithHttpInfo
     *
     * Delete a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModelPropertyWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelProperty"][0]
    ) {
        $request = $this->deleteModelPropertyRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteModelPropertyAsync
     *
     * Delete a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelPropertyAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelProperty"][0]
    ) {
        return $this->deleteModelPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteModelPropertyAsyncWithHttpInfo
     *
     * Delete a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelProperty"][0]
    ) {
        $returnType = "";
        $request = $this->deleteModelPropertyRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteModelProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteModelPropertyRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelProperty"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteModelProperty'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteModelProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteModelProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteModelProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteModelPropertyDefinition
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteModelPropertyDefinition(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteModelPropertyDefinition"
        ][0]
    ) {
        $this->deleteModelPropertyDefinitionWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteModelPropertyDefinitionWithHttpInfo
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModelPropertyDefinitionWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteModelPropertyDefinition"
        ][0]
    ) {
        $request = $this->deleteModelPropertyDefinitionRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteModelPropertyDefinitionAsync
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelPropertyDefinitionAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteModelPropertyDefinition"
        ][0]
    ) {
        return $this->deleteModelPropertyDefinitionAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteModelPropertyDefinitionAsyncWithHttpInfo
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelPropertyDefinitionAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteModelPropertyDefinition"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deleteModelPropertyDefinitionRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteModelPropertyDefinition'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteModelPropertyDefinitionRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteModelPropertyDefinition"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteModelPropertyDefinition'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteModelPropertyDefinition'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteModelPropertyDefinition'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteModelPropertyDefinition'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteModelUnit
     *
     * Delete a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteModelUnit(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelUnit"][0]
    ) {
        $this->deleteModelUnitWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteModelUnitWithHttpInfo
     *
     * Delete a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModelUnitWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelUnit"][0]
    ) {
        $request = $this->deleteModelUnitRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteModelUnitAsync
     *
     * Delete a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelUnitAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelUnit"][0]
    ) {
        return $this->deleteModelUnitAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteModelUnitAsyncWithHttpInfo
     *
     * Delete a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelUnitAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelUnit"][0]
    ) {
        $returnType = "";
        $request = $this->deleteModelUnitRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteModelUnit'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteModelUnitRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelUnit"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteModelUnit'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteModelUnit'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteModelUnit'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteModelUnit'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteModelWithoutDoc
     *
     * Delete the Model without deleting the related document
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelWithoutDoc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteModelWithoutDoc(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelWithoutDoc"][0]
    ) {
        $this->deleteModelWithoutDocWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteModelWithoutDocWithHttpInfo
     *
     * Delete the Model without deleting the related document
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelWithoutDoc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModelWithoutDocWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelWithoutDoc"][0]
    ) {
        $request = $this->deleteModelWithoutDocRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteModelWithoutDocAsync
     *
     * Delete the Model without deleting the related document
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelWithoutDoc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelWithoutDocAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelWithoutDoc"][0]
    ) {
        return $this->deleteModelWithoutDocAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteModelWithoutDocAsyncWithHttpInfo
     *
     * Delete the Model without deleting the related document
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelWithoutDoc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteModelWithoutDocAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelWithoutDoc"][0]
    ) {
        $returnType = "";
        $request = $this->deleteModelWithoutDocRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteModelWithoutDoc'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteModelWithoutDoc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteModelWithoutDocRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteModelWithoutDoc"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteModelWithoutDoc'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteModelWithoutDoc'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteModelWithoutDoc'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{id}/delete-model";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePropertySet
     *
     * Delete a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePropertySet(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deletePropertySet"][0]
    ) {
        $this->deletePropertySetWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deletePropertySetWithHttpInfo
     *
     * Delete a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePropertySetWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deletePropertySet"][0]
    ) {
        $request = $this->deletePropertySetRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePropertySetAsync
     *
     * Delete a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePropertySetAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deletePropertySet"][0]
    ) {
        return $this->deletePropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deletePropertySetAsyncWithHttpInfo
     *
     * Delete a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deletePropertySet"][0]
    ) {
        $returnType = "";
        $request = $this->deletePropertySetRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePropertySetRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deletePropertySet"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deletePropertySet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deletePropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deletePropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSpace
     *
     * Delete a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSpace(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpace"][0]
    ) {
        $this->deleteSpaceWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteSpaceWithHttpInfo
     *
     * Delete a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSpaceWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpace"][0]
    ) {
        $request = $this->deleteSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSpaceAsync
     *
     * Delete a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpaceAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpace"][0]
    ) {
        return $this->deleteSpaceAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSpaceAsyncWithHttpInfo
     *
     * Delete a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSpaceAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpace"][0]
    ) {
        $returnType = "";
        $request = $this->deleteSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSpace'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSpaceRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpace"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteSpace'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteSpace'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteSpace'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteSpace'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteStorey
     *
     * Delete a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStorey'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStorey(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStorey"][0]
    ) {
        $this->deleteStoreyWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation deleteStoreyWithHttpInfo
     *
     * Delete a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStorey'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStoreyWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStorey"][0]
    ) {
        $request = $this->deleteStoreyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStoreyAsync
     *
     * Delete a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStoreyAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStorey"][0]
    ) {
        return $this->deleteStoreyAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteStoreyAsyncWithHttpInfo
     *
     * Delete a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStoreyAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStorey"][0]
    ) {
        $returnType = "";
        $request = $this->deleteStoreyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStorey'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteStoreyRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStorey"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteStorey'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteStorey'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteStorey'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteStorey'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteStoreyPlan
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteStoreyPlan(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["deleteStoreyPlan"][0]
    ) {
        $this->deleteStoreyPlanWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );
    }

    /**
     * Operation deleteStoreyPlanWithHttpInfo
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteStoreyPlanWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["deleteStoreyPlan"][0]
    ) {
        $request = $this->deleteStoreyPlanRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStoreyPlanAsync
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStoreyPlanAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["deleteStoreyPlan"][0]
    ) {
        return $this->deleteStoreyPlanAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteStoreyPlanAsyncWithHttpInfo
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteStoreyPlanAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["deleteStoreyPlan"][0]
    ) {
        $returnType = "";
        $request = $this->deleteStoreyPlanRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStoreyPlan'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteStoreyPlanRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["deleteStoreyPlan"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteStoreyPlan'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStoreyPlan'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteStoreyPlan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteStoreyPlan'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling deleteStoreyPlan'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSystem
     *
     * Delete a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSystem(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystem"][0]
    ) {
        $this->deleteSystemWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation deleteSystemWithHttpInfo
     *
     * Delete a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSystemWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystem"][0]
    ) {
        $request = $this->deleteSystemRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSystemAsync
     *
     * Delete a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSystemAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystem"][0]
    ) {
        return $this->deleteSystemAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSystemAsyncWithHttpInfo
     *
     * Delete a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSystemAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystem"][0]
    ) {
        $returnType = "";
        $request = $this->deleteSystemRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSystem'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSystemRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystem"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteSystem'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteSystem'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteSystem'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteSystem'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteZone
     *
     * Delete a zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteZone(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZone"][0]
    ) {
        $this->deleteZoneWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteZoneWithHttpInfo
     *
     * Delete a zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteZoneWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZone"][0]
    ) {
        $request = $this->deleteZoneRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteZoneAsync
     *
     * Delete a zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZone"][0]
    ) {
        return $this->deleteZoneAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteZoneAsyncWithHttpInfo
     *
     * Delete a zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZone"][0]
    ) {
        $returnType = "";
        $request = $this->deleteZoneRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteZone'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteZoneRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZone"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteZone'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteZone'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteZone'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteZone'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteZoneSpace
     *
     * Delete a space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteZoneSpace(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpace"][0]
    ) {
        $this->deleteZoneSpaceWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );
    }

    /**
     * Operation deleteZoneSpaceWithHttpInfo
     *
     * Delete a space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteZoneSpaceWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpace"][0]
    ) {
        $request = $this->deleteZoneSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteZoneSpaceAsync
     *
     * Delete a space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneSpaceAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpace"][0]
    ) {
        return $this->deleteZoneSpaceAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteZoneSpaceAsyncWithHttpInfo
     *
     * Delete a space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteZoneSpaceAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpace"][0]
    ) {
        $returnType = "";
        $request = $this->deleteZoneSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteZoneSpace'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteZoneSpaceRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpace"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteZoneSpace'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteZoneSpace'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteZoneSpace'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteZoneSpace'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling deleteZoneSpace'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportIfc
     *
     * Export IFC
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcExport
     */
    public function exportIfc(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfc"][0]
    ) {
        list($response) = $this->exportIfcWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_export_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation exportIfcWithHttpInfo
     *
     * Export IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcExport, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportIfcWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfc"][0]
    ) {
        $request = $this->exportIfcRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_export_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcExport" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcExport" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcExport",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcExport";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcExport",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportIfcAsync
     *
     * Export IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportIfcAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfc"][0]
    ) {
        return $this->exportIfcAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_export_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation exportIfcAsyncWithHttpInfo
     *
     * Export IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportIfcAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfc"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcExport";
        $request = $this->exportIfcRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_export_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportIfc'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportIfcRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfc"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling exportIfc'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling exportIfc'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling exportIfc'
            );
        }

        // verify the required parameter 'ifc_export_request' is set
        if (
            $ifc_export_request === null ||
            (is_array($ifc_export_request) && count($ifc_export_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_export_request when calling exportIfc'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{id}/export";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_export_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_export_request
                    )
                );
            } else {
                $httpBody = $ifc_export_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateElement
     *
     * Update all fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     */
    public function fullUpdateElement(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes["fullUpdateElement"][0]
    ) {
        list($response) = $this->fullUpdateElementWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $element_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation fullUpdateElementWithHttpInfo
     *
     * Update all fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     */
    public function fullUpdateElementWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes["fullUpdateElement"][0]
    ) {
        $request = $this->fullUpdateElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $element_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Element" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateElementAsync
     *
     * Update all fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateElementAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes["fullUpdateElement"][0]
    ) {
        return $this->fullUpdateElementAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $element_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation fullUpdateElementAsyncWithHttpInfo
     *
     * Update all fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fullUpdateElementAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes["fullUpdateElement"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element";
        $request = $this->fullUpdateElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $element_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fullUpdateElementRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes["fullUpdateElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling fullUpdateElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateElement'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling fullUpdateElement'
            );
        }

        // verify the required parameter 'element_request' is set
        if (
            $element_request === null ||
            (is_array($element_request) && count($element_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_request when calling fullUpdateElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($element_request)
                );
            } else {
                $httpBody = $element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PUT",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessToken
     *
     * Retrieve one token created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     */
    public function getAccessToken(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessToken"][0]
    ) {
        list($response) = $this->getAccessTokenWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getAccessTokenWithHttpInfo
     *
     * Retrieve one token created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessTokenWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessToken"][0]
    ) {
        $request = $this->getAccessTokenRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\IfcAccessToken" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessTokenAsync
     *
     * Retrieve one token created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokenAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessToken"][0]
    ) {
        return $this->getAccessTokenAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAccessTokenAsyncWithHttpInfo
     *
     * Retrieve one token created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokenAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessToken"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
        $request = $this->getAccessTokenRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessToken'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccessTokenRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessToken"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getAccessToken'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getAccessToken'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getAccessToken'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAccessToken'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessTokens
     *
     * Retrieve all tokens created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken[]
     */
    public function getAccessTokens(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokens"][0]
    ) {
        list($response) = $this->getAccessTokensWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getAccessTokensWithHttpInfo
     *
     * Retrieve all tokens created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokens'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessTokensWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokens"][0]
    ) {
        $request = $this->getAccessTokensRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcAccessToken[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\IfcAccessToken[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcAccessToken[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcAccessToken[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcAccessToken[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessTokensAsync
     *
     * Retrieve all tokens created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokensAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokens"][0]
    ) {
        return $this->getAccessTokensAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAccessTokensAsyncWithHttpInfo
     *
     * Retrieve all tokens created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessTokensAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokens"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcAccessToken[]";
        $request = $this->getAccessTokensRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessTokens'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccessTokensRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokens"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getAccessTokens'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getAccessTokens'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getAccessTokens'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBuilding
     *
     * Retrieve a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building
     */
    public function getBuilding(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuilding"][0]
    ) {
        list($response) = $this->getBuildingWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getBuildingWithHttpInfo
     *
     * Retrieve a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBuildingWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuilding"][0]
    ) {
        $request = $this->getBuildingRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Building" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBuildingAsync
     *
     * Retrieve a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBuildingAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuilding"][0]
    ) {
        return $this->getBuildingAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getBuildingAsyncWithHttpInfo
     *
     * Retrieve a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBuildingAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuilding"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building";
        $request = $this->getBuildingRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBuilding'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBuildingRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuilding"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getBuilding'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getBuilding'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getBuilding'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getBuilding'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBuildingPlanPositioning
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PositioningPlan
     */
    public function getBuildingPlanPositioning(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioning"
        ][0]
    ) {
        list($response) = $this->getBuildingPlanPositioningWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getBuildingPlanPositioningWithHttpInfo
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PositioningPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBuildingPlanPositioningWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioning"
        ][0]
    ) {
        $request = $this->getBuildingPlanPositioningRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PositioningPlan" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PositioningPlan" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PositioningPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PositioningPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PositioningPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBuildingPlanPositioningAsync
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBuildingPlanPositioningAsync(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioning"
        ][0]
    ) {
        return $this->getBuildingPlanPositioningAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getBuildingPlanPositioningAsyncWithHttpInfo
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBuildingPlanPositioningAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioning"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PositioningPlan";
        $request = $this->getBuildingPlanPositioningRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBuildingPlanPositioning'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBuildingPlanPositioningRequest(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioning"
        ][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling getBuildingPlanPositioning'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getBuildingPlanPositioning'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getBuildingPlanPositioning'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getBuildingPlanPositioning'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getBuildingPlanPositioning'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}/positioning";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBuildings
     *
     * Retrieve all buildings of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building[]
     */
    public function getBuildings(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildings"][0]
    ) {
        list($response) = $this->getBuildingsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getBuildingsWithHttpInfo
     *
     * Retrieve all buildings of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBuildingsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildings"][0]
    ) {
        $request = $this->getBuildingsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Building[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBuildingsAsync
     *
     * Retrieve all buildings of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBuildingsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildings"][0]
    ) {
        return $this->getBuildingsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getBuildingsAsyncWithHttpInfo
     *
     * Retrieve all buildings of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBuildingsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildings"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building[]";
        $request = $this->getBuildingsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBuildings'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBuildingsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildings"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getBuildings'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getBuildings'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getBuildings'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClassificationsOfElement
     *
     * Retrieve all classifications of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     */
    public function getClassificationsOfElement(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElement"
        ][0]
    ) {
        list($response) = $this->getClassificationsOfElementWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getClassificationsOfElementWithHttpInfo
     *
     * Retrieve all classifications of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getClassificationsOfElementWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElement"
        ][0]
    ) {
        $request = $this->getClassificationsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClassificationsOfElementAsync
     *
     * Retrieve all classifications of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClassificationsOfElementAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElement"
        ][0]
    ) {
        return $this->getClassificationsOfElementAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getClassificationsOfElementAsyncWithHttpInfo
     *
     * Retrieve all classifications of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClassificationsOfElementAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElement"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification[]";
        $request = $this->getClassificationsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClassificationsOfElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClassificationsOfElementRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElement"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getClassificationsOfElement'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getClassificationsOfElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getClassificationsOfElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getClassificationsOfElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentsOfElement
     *
     * Retrieve all documents of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document[]
     */
    public function getDocumentsOfElement(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentsOfElement"][0]
    ) {
        list($response) = $this->getDocumentsOfElementWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getDocumentsOfElementWithHttpInfo
     *
     * Retrieve all documents of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentsOfElementWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentsOfElement"][0]
    ) {
        $request = $this->getDocumentsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Document[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentsOfElementAsync
     *
     * Retrieve all documents of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsOfElementAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentsOfElement"][0]
    ) {
        return $this->getDocumentsOfElementAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getDocumentsOfElementAsyncWithHttpInfo
     *
     * Retrieve all documents of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDocumentsOfElementAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentsOfElement"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document[]";
        $request = $this->getDocumentsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentsOfElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDocumentsOfElementRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getDocumentsOfElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getDocumentsOfElement'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getDocumentsOfElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getDocumentsOfElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getDocumentsOfElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElement
     *
     * Retrieve an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     */
    public function getElement(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElement"][0]
    ) {
        list($response) = $this->getElementWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementWithHttpInfo
     *
     * Retrieve an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElement"][0]
    ) {
        $request = $this->getElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Element" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementAsync
     *
     * Retrieve an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElement"][0]
    ) {
        return $this->getElementAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementAsyncWithHttpInfo
     *
     * Retrieve an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElement"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element";
        $request = $this->getElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElement'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementLinkedDocuments
     *
     * Retrieve all documents linked to any element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DocumentWithElementList[]
     */
    public function getElementLinkedDocuments(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementLinkedDocuments"][0]
    ) {
        list($response) = $this->getElementLinkedDocumentsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementLinkedDocumentsWithHttpInfo
     *
     * Retrieve all documents linked to any element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocuments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DocumentWithElementList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementLinkedDocumentsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementLinkedDocuments"][0]
    ) {
        $request = $this->getElementLinkedDocumentsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\DocumentWithElementList[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\DocumentWithElementList[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\DocumentWithElementList[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\DocumentWithElementList[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\DocumentWithElementList[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementLinkedDocumentsAsync
     *
     * Retrieve all documents linked to any element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementLinkedDocumentsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementLinkedDocuments"][0]
    ) {
        return $this->getElementLinkedDocumentsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementLinkedDocumentsAsyncWithHttpInfo
     *
     * Retrieve all documents linked to any element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementLinkedDocumentsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementLinkedDocuments"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\DocumentWithElementList[]";
        $request = $this->getElementLinkedDocumentsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementLinkedDocuments'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocuments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementLinkedDocumentsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementLinkedDocuments"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementLinkedDocuments'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementLinkedDocuments'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementLinkedDocuments'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/documents";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySet
     *
     * Retrieve a PropertySet of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function getElementPropertySet(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySet"][0]
    ) {
        list($response) = $this->getElementPropertySetWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetWithHttpInfo
     *
     * Retrieve a PropertySet of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySet"][0]
    ) {
        $request = $this->getElementPropertySetRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\PropertySet" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetAsync
     *
     * Retrieve a PropertySet of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySet"][0]
    ) {
        return $this->getElementPropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetAsyncWithHttpInfo
     *
     * Retrieve a PropertySet of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySet"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet";
        $request = $this->getElementPropertySetRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySet"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySet'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementPropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetProperties
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     */
    public function getElementPropertySetProperties(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperties"
        ][0]
    ) {
        list($response) = $this->getElementPropertySetPropertiesWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertiesWithHttpInfo
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertiesWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperties"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertiesRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Property[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertiesAsync
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertiesAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperties"
        ][0]
    ) {
        return $this->getElementPropertySetPropertiesAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertiesAsyncWithHttpInfo
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertiesAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperties"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property[]";
        $request = $this->getElementPropertySetPropertiesRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetProperties'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertiesRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperties"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetProperties'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetProperties'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementPropertySetProperties'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetProperties'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetProperties'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetProperty
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function getElementPropertySetProperty(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperty"
        ][0]
    ) {
        list($response) = $this->getElementPropertySetPropertyWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyWithHttpInfo
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperty"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyAsync
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperty"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperty"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->getElementPropertySetPropertyRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetProperty"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetProperty'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetProperty'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementPropertySetProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetProperty'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinition
     *
     * Retrieve a Definition of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function getElementPropertySetPropertyDefinition(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinition"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDefinitionWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionWithHttpInfo
     *
     * Retrieve a Definition of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyDefinitionWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinition"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDefinitionRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionAsync
     *
     * Retrieve a Definition of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinition"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDefinitionAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionAsyncWithHttpInfo
     *
     * Retrieve a Definition of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinition"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
        $request = $this->getElementPropertySetPropertyDefinitionRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinition'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyDefinitionRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinition"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinition'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnit
     *
     * Retrieve a Unit of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function getElementPropertySetPropertyDefinitionUnit(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDefinitionUnitWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitWithHttpInfo
     *
     * Retrieve a Unit of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyDefinitionUnitWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDefinitionUnitRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitAsync
     *
     * Retrieve a Unit of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionUnitAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo
     *
     * Retrieve a Unit of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit";
        $request = $this->getElementPropertySetPropertyDefinitionUnitRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitionUnit'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyDefinitionUnitRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'propertydefinition_pk' is set
        if (
            $propertydefinition_pk === null ||
            (is_array($propertydefinition_pk) &&
                count($propertydefinition_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitionUnit'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertydefinition_pk" . "}",
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnits
     *
     * Retrieve all Units of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     */
    public function getElementPropertySetPropertyDefinitionUnits(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnits"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDefinitionUnitsWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsWithHttpInfo
     *
     * Retrieve all Units of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyDefinitionUnitsWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnits"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDefinitionUnitsRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsAsync
     *
     * Retrieve all Units of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionUnitsAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnits"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDefinitionUnitsAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsAsyncWithHttpInfo
     *
     * Retrieve all Units of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionUnitsAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnits"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit[]";
        $request = $this->getElementPropertySetPropertyDefinitionUnitsRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitionUnits'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyDefinitionUnitsRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnits"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }

        // verify the required parameter 'propertydefinition_pk' is set
        if (
            $propertydefinition_pk === null ||
            (is_array($propertydefinition_pk) &&
                count($propertydefinition_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitionUnits'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertydefinition_pk" . "}",
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitions
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     */
    public function getElementPropertySetPropertyDefinitions(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitions"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDefinitionsWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsWithHttpInfo
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetPropertyDefinitionsWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitions"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDefinitionsRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsAsync
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionsAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitions"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDefinitionsAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsAsyncWithHttpInfo
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetPropertyDefinitionsAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitions"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
        $request = $this->getElementPropertySetPropertyDefinitionsRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitions'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetPropertyDefinitionsRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitions"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitions'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitions'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySets
     *
     * Retrieve all PropertySets of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     */
    public function getElementPropertySets(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySets"][0]
    ) {
        list($response) = $this->getElementPropertySetsWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetsWithHttpInfo
     *
     * Retrieve all PropertySets of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementPropertySetsWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySets"][0]
    ) {
        $request = $this->getElementPropertySetsRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertySet[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetsAsync
     *
     * Retrieve all PropertySets of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetsAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySets"][0]
    ) {
        return $this->getElementPropertySetsAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetsAsyncWithHttpInfo
     *
     * Retrieve all PropertySets of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementPropertySetsAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySets"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet[]";
        $request = $this->getElementPropertySetsRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySets'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementPropertySetsRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getElementPropertySets"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySets'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySets'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementPropertySets'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySets'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElements
     *
     * Retrieve all elements of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function getElements(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElements"][0]
    ) {
        list($response) = $this->getElementsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementsWithHttpInfo
     *
     * Retrieve all elements of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElements"][0]
    ) {
        $request = $this->getElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementsAsync
     *
     * Retrieve all elements of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElements"][0]
    ) {
        return $this->getElementsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementsAsyncWithHttpInfo
     *
     * Retrieve all elements of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElements"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->getElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElements'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElements"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElements'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElements'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElements'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementsFromClassification
     *
     * Retrieve all elements with the classification
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     */
    public function getElementsFromClassification(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassification"
        ][0]
    ) {
        list($response) = $this->getElementsFromClassificationWithHttpInfo(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementsFromClassificationWithHttpInfo
     *
     * Retrieve all elements with the classification
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getElementsFromClassificationWithHttpInfo(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassification"
        ][0]
    ) {
        $request = $this->getElementsFromClassificationRequest(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementsFromClassificationAsync
     *
     * Retrieve all elements with the classification
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementsFromClassificationAsync(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassification"
        ][0]
    ) {
        return $this->getElementsFromClassificationAsyncWithHttpInfo(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementsFromClassificationAsyncWithHttpInfo
     *
     * Retrieve all elements with the classification
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getElementsFromClassificationAsyncWithHttpInfo(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassification"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->getElementsFromClassificationRequest(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementsFromClassification'
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getElementsFromClassificationRequest(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassification"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementsFromClassification'
            );
        }

        // verify the required parameter 'model_classification_pk' is set
        if (
            $model_classification_pk === null ||
            (is_array($model_classification_pk) &&
                count($model_classification_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_classification_pk when calling getElementsFromClassification'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getElementsFromClassification'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementsFromClassification'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_classification_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_classification_pk" . "}",
                ObjectSerializer::toPathValue($model_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLayer
     *
     * Retrieve a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     */
    public function getLayer(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayer"][0]
    ) {
        list($response) = $this->getLayerWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getLayerWithHttpInfo
     *
     * Retrieve a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLayerWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayer"][0]
    ) {
        $request = $this->getLayerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Layer" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Layer" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Layer",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Layer";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Layer",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLayerAsync
     *
     * Retrieve a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayerAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayer"][0]
    ) {
        return $this->getLayerAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLayerAsyncWithHttpInfo
     *
     * Retrieve a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayerAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayer"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Layer";
        $request = $this->getLayerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLayer'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLayerRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayer"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getLayer'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLayer'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getLayer'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getLayer'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLayers
     *
     * Retrieve all layers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer[]
     */
    public function getLayers(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayers"][0]
    ) {
        list($response) = $this->getLayersWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getLayersWithHttpInfo
     *
     * Retrieve all layers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLayersWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayers"][0]
    ) {
        $request = $this->getLayersRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Layer[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Layer[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Layer[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Layer[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Layer[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLayersAsync
     *
     * Retrieve all layers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayersAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayers"][0]
    ) {
        return $this->getLayersAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLayersAsyncWithHttpInfo
     *
     * Retrieve all layers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayersAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayers"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Layer[]";
        $request = $this->getLayersRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLayers'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLayersRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayers"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getLayers'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getLayers'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getLayers'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMaterial
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterial'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material
     */
    public function getMaterial(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterial"][0]
    ) {
        list($response) = $this->getMaterialWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getMaterialWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterial'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMaterialWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterial"][0]
    ) {
        $request = $this->getMaterialRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Material" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Material" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Material",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Material";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Material",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMaterialAsync
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterial'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMaterialAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterial"][0]
    ) {
        return $this->getMaterialAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getMaterialAsyncWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterial'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMaterialAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterial"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Material";
        $request = $this->getMaterialRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMaterial'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterial'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMaterialRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterial"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getMaterial'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getMaterial'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMaterial'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getMaterial'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getMaterial'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/material/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMaterials
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterials'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material[]
     */
    public function getMaterials(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterials"][0]
    ) {
        list($response) = $this->getMaterialsWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getMaterialsWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterials'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMaterialsWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterials"][0]
    ) {
        $request = $this->getMaterialsRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Material[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Material[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Material[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Material[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Material[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMaterialsAsync
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMaterialsAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterials"][0]
    ) {
        return $this->getMaterialsAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getMaterialsAsyncWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMaterialsAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterials"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Material[]";
        $request = $this->getMaterialsRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMaterials'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMaterialsRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterials"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getMaterials'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getMaterials'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getMaterials'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getMaterials'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/material";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModel
     *
     * Retrieve one model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model
     */
    public function getModel(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getModel"][0]
    ) {
        list($response) = $this->getModelWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelWithHttpInfo
     *
     * Retrieve one model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getModel"][0]
    ) {
        $request = $this->getModelRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Model" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelAsync
     *
     * Retrieve one model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getModel"][0]
    ) {
        return $this->getModelAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelAsyncWithHttpInfo
     *
     * Retrieve one model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getModel"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model";
        $request = $this->getModelRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModel'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getModel"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModel'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getModel'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModel'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/model/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelClassifications
     *
     * Retrieve all classifications in a model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $model_pk model_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelClassifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     */
    public function getModelClassifications(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelClassifications"][0]
    ) {
        list($response) = $this->getModelClassificationsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelClassificationsWithHttpInfo
     *
     * Retrieve all classifications in a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelClassifications'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelClassificationsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelClassifications"][0]
    ) {
        $request = $this->getModelClassificationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelClassificationsAsync
     *
     * Retrieve all classifications in a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelClassificationsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelClassifications"][0]
    ) {
        return $this->getModelClassificationsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelClassificationsAsyncWithHttpInfo
     *
     * Retrieve all classifications in a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelClassificationsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelClassifications"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification[]";
        $request = $this->getModelClassificationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelClassifications'
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelClassifications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelClassificationsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelClassifications"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelClassifications'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelClassifications'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelClassifications'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelMaterial
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterial'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material
     */
    public function getModelMaterial(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterial"][0]
    ) {
        list($response) = $this->getModelMaterialWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelMaterialWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterial'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelMaterialWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterial"][0]
    ) {
        $request = $this->getModelMaterialRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Material" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Material" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Material",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Material";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Material",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelMaterialAsync
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterial'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelMaterialAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterial"][0]
    ) {
        return $this->getModelMaterialAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelMaterialAsyncWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterial'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelMaterialAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterial"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Material";
        $request = $this->getModelMaterialRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelMaterial'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterial'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelMaterialRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterial"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelMaterial'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getModelMaterial'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelMaterial'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelMaterial'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/material/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelMaterials
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterials'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material[]
     */
    public function getModelMaterials(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterials"][0]
    ) {
        list($response) = $this->getModelMaterialsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelMaterialsWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterials'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelMaterialsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterials"][0]
    ) {
        $request = $this->getModelMaterialsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Material[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Material[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Material[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Material[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Material[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelMaterialsAsync
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelMaterialsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterials"][0]
    ) {
        return $this->getModelMaterialsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelMaterialsAsyncWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelMaterialsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterials"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Material[]";
        $request = $this->getModelMaterialsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelMaterials'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelMaterials'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelMaterialsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelMaterials"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelMaterials'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelMaterials'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelMaterials'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/material";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelProperties
     *
     * Retrieve all Properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     */
    public function getModelProperties(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperties"][0]
    ) {
        list($response) = $this->getModelPropertiesWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelPropertiesWithHttpInfo
     *
     * Retrieve all Properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelPropertiesWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperties"][0]
    ) {
        $request = $this->getModelPropertiesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Property[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelPropertiesAsync
     *
     * Retrieve all Properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPropertiesAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperties"][0]
    ) {
        return $this->getModelPropertiesAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelPropertiesAsyncWithHttpInfo
     *
     * Retrieve all Properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPropertiesAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperties"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property[]";
        $request = $this->getModelPropertiesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelProperties'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelPropertiesRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperties"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelProperties'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelProperties'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelProperties'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelProperty
     *
     * Retrieve a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function getModelProperty(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperty"][0]
    ) {
        list($response) = $this->getModelPropertyWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelPropertyWithHttpInfo
     *
     * Retrieve a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelPropertyWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperty"][0]
    ) {
        $request = $this->getModelPropertyRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelPropertyAsync
     *
     * Retrieve a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPropertyAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperty"][0]
    ) {
        return $this->getModelPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelPropertyAsyncWithHttpInfo
     *
     * Retrieve a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperty"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->getModelPropertyRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelPropertyRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelProperty"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelProperty'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getModelProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelPropertyDefinition
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function getModelPropertyDefinition(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinition"
        ][0]
    ) {
        list($response) = $this->getModelPropertyDefinitionWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelPropertyDefinitionWithHttpInfo
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelPropertyDefinitionWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinition"
        ][0]
    ) {
        $request = $this->getModelPropertyDefinitionRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelPropertyDefinitionAsync
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPropertyDefinitionAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinition"
        ][0]
    ) {
        return $this->getModelPropertyDefinitionAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelPropertyDefinitionAsyncWithHttpInfo
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPropertyDefinitionAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinition"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
        $request = $this->getModelPropertyDefinitionRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelPropertyDefinition'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelPropertyDefinitionRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinition"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelPropertyDefinition'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getModelPropertyDefinition'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelPropertyDefinition'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelPropertyDefinition'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelPropertyDefinitions
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     */
    public function getModelPropertyDefinitions(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinitions"
        ][0]
    ) {
        list($response) = $this->getModelPropertyDefinitionsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelPropertyDefinitionsWithHttpInfo
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelPropertyDefinitionsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinitions"
        ][0]
    ) {
        $request = $this->getModelPropertyDefinitionsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelPropertyDefinitionsAsync
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPropertyDefinitionsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinitions"
        ][0]
    ) {
        return $this->getModelPropertyDefinitionsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelPropertyDefinitionsAsyncWithHttpInfo
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelPropertyDefinitionsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinitions"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
        $request = $this->getModelPropertyDefinitionsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelPropertyDefinitions'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelPropertyDefinitions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelPropertyDefinitionsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getModelPropertyDefinitions"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelPropertyDefinitions'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelPropertyDefinitions'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelPropertyDefinitions'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelUnit
     *
     * Retrieve a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function getModelUnit(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnit"][0]
    ) {
        list($response) = $this->getModelUnitWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelUnitWithHttpInfo
     *
     * Retrieve a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelUnitWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnit"][0]
    ) {
        $request = $this->getModelUnitRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelUnitAsync
     *
     * Retrieve a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelUnitAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnit"][0]
    ) {
        return $this->getModelUnitAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelUnitAsyncWithHttpInfo
     *
     * Retrieve a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelUnitAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnit"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit";
        $request = $this->getModelUnitRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelUnit'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelUnitRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnit"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelUnit'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getModelUnit'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelUnit'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelUnit'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModelUnits
     *
     * Retrieve all Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     */
    public function getModelUnits(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnits"][0]
    ) {
        list($response) = $this->getModelUnitsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelUnitsWithHttpInfo
     *
     * Retrieve all Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnits'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelUnitsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnits"][0]
    ) {
        $request = $this->getModelUnitsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelUnitsAsync
     *
     * Retrieve all Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelUnitsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnits"][0]
    ) {
        return $this->getModelUnitsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelUnitsAsyncWithHttpInfo
     *
     * Retrieve all Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelUnitsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnits"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit[]";
        $request = $this->getModelUnitsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModelUnits'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModelUnits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelUnitsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getModelUnits"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModelUnits'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getModelUnits'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModelUnits'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModels
     *
     * Retrieve all models
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $source source (optional)
     * @param  string[] $status status (optional)
     * @param  string[] $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model[]
     */
    public function getModels(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getModels"][0]
    ) {
        list($response) = $this->getModelsWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $source,
            $status,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getModelsWithHttpInfo
     *
     * Retrieve all models
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $source (optional)
     * @param  string[] $status (optional)
     * @param  string[] $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getModelsWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getModels"][0]
    ) {
        $request = $this->getModelsRequest(
            $cloud_pk,
            $project_pk,
            $source,
            $status,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Model[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModelsAsync
     *
     * Retrieve all models
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $source (optional)
     * @param  string[] $status (optional)
     * @param  string[] $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelsAsync(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getModels"][0]
    ) {
        return $this->getModelsAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $source,
            $status,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getModelsAsyncWithHttpInfo
     *
     * Retrieve all models
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $source (optional)
     * @param  string[] $status (optional)
     * @param  string[] $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModelsAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getModels"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model[]";
        $request = $this->getModelsRequest(
            $cloud_pk,
            $project_pk,
            $source,
            $status,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModels'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $source (optional)
     * @param  string[] $status (optional)
     * @param  string[] $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModelsRequest(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getModels"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getModels'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getModels'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/model";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $source,
                "source", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $status,
                "status", // param base name
                "array", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "array", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessorHandler
     *
     * Retrieve a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler
     */
    public function getProcessorHandler(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandler"][0]
    ) {
        list($response) = $this->getProcessorHandlerWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProcessorHandlerWithHttpInfo
     *
     * Retrieve a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessorHandlerWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandler"][0]
    ) {
        $request = $this->getProcessorHandlerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProcessorHandler" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProcessorHandler" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProcessorHandler",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProcessorHandler";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProcessorHandler",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessorHandlerAsync
     *
     * Retrieve a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessorHandlerAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandler"][0]
    ) {
        return $this->getProcessorHandlerAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProcessorHandlerAsyncWithHttpInfo
     *
     * Retrieve a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessorHandlerAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandler"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProcessorHandler";
        $request = $this->getProcessorHandlerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessorHandler'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProcessorHandlerRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandler"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProcessorHandler'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProcessorHandler'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getProcessorHandler'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProcessorHandler'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessorHandlers
     *
     * Get all processor handlers
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler[]
     */
    public function getProcessorHandlers(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandlers"][0]
    ) {
        list($response) = $this->getProcessorHandlersWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProcessorHandlersWithHttpInfo
     *
     * Get all processor handlers
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessorHandlersWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandlers"][0]
    ) {
        $request = $this->getProcessorHandlersRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProcessorHandler[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProcessorHandler[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProcessorHandler[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProcessorHandler[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProcessorHandler[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessorHandlersAsync
     *
     * Get all processor handlers
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessorHandlersAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandlers"][0]
    ) {
        return $this->getProcessorHandlersAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProcessorHandlersAsyncWithHttpInfo
     *
     * Get all processor handlers
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessorHandlersAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandlers"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProcessorHandler[]";
        $request = $this->getProcessorHandlersRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessorHandlers'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProcessorHandlersRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getProcessorHandlers"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProcessorHandlers'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getProcessorHandlers'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProcessorHandlers'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertySet
     *
     * Retrieve a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function getPropertySet(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySet"][0]
    ) {
        list($response) = $this->getPropertySetWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getPropertySetWithHttpInfo
     *
     * Retrieve a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertySetWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySet"][0]
    ) {
        $request = $this->getPropertySetRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\PropertySet" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertySetAsync
     *
     * Retrieve a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertySetAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySet"][0]
    ) {
        return $this->getPropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getPropertySetAsyncWithHttpInfo
     *
     * Retrieve a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySet"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet";
        $request = $this->getPropertySetRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertySetRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySet"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getPropertySet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getPropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getPropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertySets
     *
     * Retrieve all PropertySets of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     */
    public function getPropertySets(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySets"][0]
    ) {
        list($response) = $this->getPropertySetsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getPropertySetsWithHttpInfo
     *
     * Retrieve all PropertySets of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPropertySetsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySets"][0]
    ) {
        $request = $this->getPropertySetsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertySet[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertySetsAsync
     *
     * Retrieve all PropertySets of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertySetsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySets"][0]
    ) {
        return $this->getPropertySetsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getPropertySetsAsyncWithHttpInfo
     *
     * Retrieve all PropertySets of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPropertySetsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySets"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet[]";
        $request = $this->getPropertySetsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertySets'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPropertySetsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySets"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getPropertySets'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getPropertySets'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getPropertySets'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRawElements
     *
     * Retrieve all elements in a optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RawElements
     */
    public function getRawElements(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElements"][0]
    ) {
        list($response) = $this->getRawElementsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getRawElementsWithHttpInfo
     *
     * Retrieve all elements in a optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RawElements, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRawElementsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElements"][0]
    ) {
        $request = $this->getRawElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\RawElements" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\RawElements" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\RawElements",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\RawElements";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\RawElements",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRawElementsAsync
     *
     * Retrieve all elements in a optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRawElementsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElements"][0]
    ) {
        return $this->getRawElementsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getRawElementsAsyncWithHttpInfo
     *
     * Retrieve all elements in a optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRawElementsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElements"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\RawElements";
        $request = $this->getRawElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRawElements'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRawElementsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElements"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRawElements'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getRawElements'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRawElements'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/raw";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimpleElement
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SimpleElement
     */
    public function getSimpleElement(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSimpleElement"][0]
    ) {
        list($response) = $this->getSimpleElementWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSimpleElementWithHttpInfo
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SimpleElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimpleElementWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSimpleElement"][0]
    ) {
        $request = $this->getSimpleElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\SimpleElement" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\SimpleElement" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\SimpleElement",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\SimpleElement";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\SimpleElement",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimpleElementAsync
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimpleElementAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSimpleElement"][0]
    ) {
        return $this->getSimpleElementAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSimpleElementAsyncWithHttpInfo
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimpleElementAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSimpleElement"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\SimpleElement";
        $request = $this->getSimpleElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimpleElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSimpleElementRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSimpleElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSimpleElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getSimpleElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSimpleElement'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getSimpleElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}/simple";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimpleElements
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SimpleElement
     */
    public function getSimpleElements(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSimpleElements"][0]
    ) {
        list($response) = $this->getSimpleElementsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSimpleElementsWithHttpInfo
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElements'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SimpleElement, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimpleElementsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSimpleElements"][0]
    ) {
        $request = $this->getSimpleElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\SimpleElement" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\SimpleElement" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\SimpleElement",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\SimpleElement";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\SimpleElement",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimpleElementsAsync
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimpleElementsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSimpleElements"][0]
    ) {
        return $this->getSimpleElementsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSimpleElementsAsyncWithHttpInfo
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimpleElementsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSimpleElements"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\SimpleElement";
        $request = $this->getSimpleElementsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimpleElements'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElements'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSimpleElementsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSimpleElements"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSimpleElements'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getSimpleElements'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSimpleElements'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/simple";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpace
     *
     * Retrieve one space of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space
     */
    public function getSpace(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpace"][0]
    ) {
        list($response) = $this->getSpaceWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSpaceWithHttpInfo
     *
     * Retrieve one space of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpaceWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpace"][0]
    ) {
        $request = $this->getSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Space" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Space" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Space",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Space";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Space",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpaceAsync
     *
     * Retrieve one space of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpaceAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpace"][0]
    ) {
        return $this->getSpaceAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSpaceAsyncWithHttpInfo
     *
     * Retrieve one space of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpaceAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpace"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Space";
        $request = $this->getSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpace'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpaceRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpace"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSpace'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSpace'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getSpace'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSpace'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpaces
     *
     * Retrieve all spaces of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaces'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space[]
     */
    public function getSpaces(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaces"][0]
    ) {
        list($response) = $this->getSpacesWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSpacesWithHttpInfo
     *
     * Retrieve all spaces of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaces'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSpacesWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaces"][0]
    ) {
        $request = $this->getSpacesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Space[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Space[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Space[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Space[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Space[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpacesAsync
     *
     * Retrieve all spaces of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpacesAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaces"][0]
    ) {
        return $this->getSpacesAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSpacesAsyncWithHttpInfo
     *
     * Retrieve all spaces of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSpacesAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaces"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Space[]";
        $request = $this->getSpacesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpaces'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSpacesRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaces"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSpaces'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getSpaces'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSpaces'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStorey
     *
     * Retrieve a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorey'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     */
    public function getStorey(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStorey"][0]
    ) {
        list($response) = $this->getStoreyWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getStoreyWithHttpInfo
     *
     * Retrieve a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorey'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreyWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStorey"][0]
    ) {
        $request = $this->getStoreyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreyAsync
     *
     * Retrieve a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreyAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStorey"][0]
    ) {
        return $this->getStoreyAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getStoreyAsyncWithHttpInfo
     *
     * Retrieve a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreyAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStorey"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->getStoreyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStorey'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStoreyRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStorey"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getStorey'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getStorey'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getStorey'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getStorey'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreyPlanPositioning
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PositioningPlan
     */
    public function getStoreyPlanPositioning(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["getStoreyPlanPositioning"][0]
    ) {
        list($response) = $this->getStoreyPlanPositioningWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getStoreyPlanPositioningWithHttpInfo
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PositioningPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreyPlanPositioningWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["getStoreyPlanPositioning"][0]
    ) {
        $request = $this->getStoreyPlanPositioningRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PositioningPlan" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PositioningPlan" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PositioningPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PositioningPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PositioningPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreyPlanPositioningAsync
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreyPlanPositioningAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["getStoreyPlanPositioning"][0]
    ) {
        return $this->getStoreyPlanPositioningAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getStoreyPlanPositioningAsyncWithHttpInfo
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreyPlanPositioningAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["getStoreyPlanPositioning"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PositioningPlan";
        $request = $this->getStoreyPlanPositioningRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreyPlanPositioning'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStoreyPlanPositioningRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes["getStoreyPlanPositioning"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getStoreyPlanPositioning'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStoreyPlanPositioning'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getStoreyPlanPositioning'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getStoreyPlanPositioning'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling getStoreyPlanPositioning'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}/positioning";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreys
     *
     * Retrieve all storeys of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreys'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey[]
     */
    public function getStoreys(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreys"][0]
    ) {
        list($response) = $this->getStoreysWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getStoreysWithHttpInfo
     *
     * Retrieve all storeys of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreys'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoreysWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreys"][0]
    ) {
        $request = $this->getStoreysRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreysAsync
     *
     * Retrieve all storeys of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreysAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreys"][0]
    ) {
        return $this->getStoreysAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getStoreysAsyncWithHttpInfo
     *
     * Retrieve all storeys of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoreysAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreys"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey[]";
        $request = $this->getStoreysRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreys'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStoreysRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreys"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getStoreys'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getStoreys'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getStoreys'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSystem
     *
     * Retrieve a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     */
    public function getSystem(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystem"][0]
    ) {
        list($response) = $this->getSystemWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSystemWithHttpInfo
     *
     * Retrieve a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSystemWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystem"][0]
    ) {
        $request = $this->getSystemRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\System" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\System" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\System",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\System";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\System",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSystemAsync
     *
     * Retrieve a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystem"][0]
    ) {
        return $this->getSystemAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSystemAsyncWithHttpInfo
     *
     * Retrieve a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystem"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\System";
        $request = $this->getSystemRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSystem'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSystemRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystem"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSystem'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getSystem'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSystem'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getSystem'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSystems
     *
     * Retrieve all systems of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System[]
     */
    public function getSystems(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystems"][0]
    ) {
        list($response) = $this->getSystemsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSystemsWithHttpInfo
     *
     * Retrieve all systems of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystems'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSystemsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystems"][0]
    ) {
        $request = $this->getSystemsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\System[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\System[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\System[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\System[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\System[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSystemsAsync
     *
     * Retrieve all systems of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystems"][0]
    ) {
        return $this->getSystemsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSystemsAsyncWithHttpInfo
     *
     * Retrieve all systems of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystems"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\System[]";
        $request = $this->getSystemsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSystems'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSystemsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystems"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSystems'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getSystems'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSystems'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTileset
     *
     * Retrieve the tileset of the model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $tile_format tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTileset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTileset(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTileset"][0]
    ) {
        $this->getTilesetWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $tile_format,
            $contentType
        );
    }

    /**
     * Operation getTilesetWithHttpInfo
     *
     * Retrieve the tileset of the model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTileset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTilesetWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTileset"][0]
    ) {
        $request = $this->getTilesetRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $tile_format,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getTilesetAsync
     *
     * Retrieve the tileset of the model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTileset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTilesetAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTileset"][0]
    ) {
        return $this->getTilesetAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $tile_format,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTilesetAsyncWithHttpInfo
     *
     * Retrieve the tileset of the model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTileset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTilesetAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTileset"][0]
    ) {
        $returnType = "";
        $request = $this->getTilesetRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $tile_format,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTileset'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTileset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTilesetRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTileset"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getTileset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTileset'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getTileset'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{id}/tileset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $tile_format,
                "tile_format", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZone
     *
     * Retrieve one zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone
     */
    public function getZone(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZone"][0]
    ) {
        list($response) = $this->getZoneWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getZoneWithHttpInfo
     *
     * Retrieve one zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     */
    public function getZoneWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZone"][0]
    ) {
        $request = $this->getZoneRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Zone" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Zone" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Zone",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Zone";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Zone",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneAsync
     *
     * Retrieve one zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZone"][0]
    ) {
        return $this->getZoneAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getZoneAsyncWithHttpInfo
     *
     * Retrieve one zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZone"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Zone";
        $request = $this->getZoneRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZone'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getZoneRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZone"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZone'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getZone'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getZone'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZone'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZoneSpace
     *
     * Retrieve one space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     */
    public function getZoneSpace(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpace"][0]
    ) {
        list($response) = $this->getZoneSpaceWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getZoneSpaceWithHttpInfo
     *
     * Retrieve one space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     */
    public function getZoneSpaceWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpace"][0]
    ) {
        $request = $this->getZoneSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ZoneSpace" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ZoneSpace" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ZoneSpace",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ZoneSpace";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ZoneSpace",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneSpaceAsync
     *
     * Retrieve one space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneSpaceAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpace"][0]
    ) {
        return $this->getZoneSpaceAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getZoneSpaceAsyncWithHttpInfo
     *
     * Retrieve one space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneSpaceAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpace"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ZoneSpace";
        $request = $this->getZoneSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZoneSpace'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getZoneSpaceRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpace"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZoneSpace'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getZoneSpace'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getZoneSpace'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZoneSpace'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling getZoneSpace'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZoneSpaces
     *
     * Retrieve all spaces of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaces'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace[]
     */
    public function getZoneSpaces(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaces"][0]
    ) {
        list($response) = $this->getZoneSpacesWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getZoneSpacesWithHttpInfo
     *
     * Retrieve all spaces of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaces'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getZoneSpacesWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaces"][0]
    ) {
        $request = $this->getZoneSpacesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ZoneSpace[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ZoneSpace[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ZoneSpace[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ZoneSpace[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ZoneSpace[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneSpacesAsync
     *
     * Retrieve all spaces of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneSpacesAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaces"][0]
    ) {
        return $this->getZoneSpacesAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getZoneSpacesAsyncWithHttpInfo
     *
     * Retrieve all spaces of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZoneSpacesAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaces"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ZoneSpace[]";
        $request = $this->getZoneSpacesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZoneSpaces'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaces'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getZoneSpacesRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaces"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZoneSpaces'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getZoneSpaces'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZoneSpaces'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling getZoneSpaces'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZones
     *
     * Retrieve zones of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZones'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone[]
     */
    public function getZones(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZones"][0]
    ) {
        list($response) = $this->getZonesWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $color,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getZonesWithHttpInfo
     *
     * Retrieve zones of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZones'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getZonesWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZones"][0]
    ) {
        $request = $this->getZonesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $color,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Zone[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Zone[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Zone[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Zone[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Zone[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZonesAsync
     *
     * Retrieve zones of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZones'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZonesAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZones"][0]
    ) {
        return $this->getZonesAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $color,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getZonesAsyncWithHttpInfo
     *
     * Retrieve zones of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZones'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZonesAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZones"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Zone[]";
        $request = $this->getZonesRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $color,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZones'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZones'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getZonesRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZones"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZones'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getZones'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZones'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $color,
                "color", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkDocumentsOfElement
     *
     * Link one or many documents to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document[]
     */
    public function linkDocumentsOfElement(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["linkDocumentsOfElement"][0]
    ) {
        list($response) = $this->linkDocumentsOfElementWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );
        return $response;
    }

    /**
     * Operation linkDocumentsOfElementWithHttpInfo
     *
     * Link one or many documents to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function linkDocumentsOfElementWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["linkDocumentsOfElement"][0]
    ) {
        $request = $this->linkDocumentsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Document[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation linkDocumentsOfElementAsync
     *
     * Link one or many documents to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkDocumentsOfElementAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["linkDocumentsOfElement"][0]
    ) {
        return $this->linkDocumentsOfElementAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation linkDocumentsOfElementAsyncWithHttpInfo
     *
     * Link one or many documents to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function linkDocumentsOfElementAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["linkDocumentsOfElement"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document[]";
        $request = $this->linkDocumentsOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkDocumentsOfElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function linkDocumentsOfElementRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["linkDocumentsOfElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling linkDocumentsOfElement'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling linkDocumentsOfElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling linkDocumentsOfElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling linkDocumentsOfElement'
            );
        }

        // verify the required parameter 'request_body' is set
        if (
            $request_body === null ||
            (is_array($request_body) && count($request_body) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling linkDocumentsOfElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($request_body)
                );
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listClassificationElementRelations
     *
     * List all associations between classifications and elements
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ElementClassificationRelation[]
     */
    public function listClassificationElementRelations(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelations"
        ][0]
    ) {
        list($response) = $this->listClassificationElementRelationsWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation listClassificationElementRelationsWithHttpInfo
     *
     * List all associations between classifications and elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ElementClassificationRelation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listClassificationElementRelationsWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelations"
        ][0]
    ) {
        $request = $this->listClassificationElementRelationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ElementClassificationRelation[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ElementClassificationRelation[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ElementClassificationRelation[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType =
                "\OpenAPI\Client\Model\ElementClassificationRelation[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ElementClassificationRelation[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listClassificationElementRelationsAsync
     *
     * List all associations between classifications and elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClassificationElementRelationsAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelations"
        ][0]
    ) {
        return $this->listClassificationElementRelationsAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation listClassificationElementRelationsAsyncWithHttpInfo
     *
     * List all associations between classifications and elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listClassificationElementRelationsAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelations"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ElementClassificationRelation[]";
        $request = $this->listClassificationElementRelationsRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listClassificationElementRelations'
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listClassificationElementRelationsRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelations"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling listClassificationElementRelations'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling listClassificationElementRelations'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling listClassificationElementRelations'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification-element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeIfcs
     *
     * Merge IFC files
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function mergeIfcs(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcs"][0]
    ) {
        $this->mergeIfcsWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $ifc_merge_request,
            $contentType
        );
    }

    /**
     * Operation mergeIfcsWithHttpInfo
     *
     * Merge IFC files
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mergeIfcsWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcs"][0]
    ) {
        $request = $this->mergeIfcsRequest(
            $cloud_pk,
            $project_pk,
            $ifc_merge_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation mergeIfcsAsync
     *
     * Merge IFC files
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeIfcsAsync(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcs"][0]
    ) {
        return $this->mergeIfcsAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $ifc_merge_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation mergeIfcsAsyncWithHttpInfo
     *
     * Merge IFC files
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mergeIfcsAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcs"][0]
    ) {
        $returnType = "";
        $request = $this->mergeIfcsRequest(
            $cloud_pk,
            $project_pk,
            $ifc_merge_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeIfcs'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mergeIfcsRequest(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcs"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling mergeIfcs'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling mergeIfcs'
            );
        }

        // verify the required parameter 'ifc_merge_request' is set
        if (
            $ifc_merge_request === null ||
            (is_array($ifc_merge_request) && count($ifc_merge_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_merge_request when calling mergeIfcs'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/model/merge";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_merge_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_merge_request
                    )
                );
            } else {
                $httpBody = $ifc_merge_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation optimizeIfc
     *
     * Optimize the IFC
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function optimizeIfc(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfc"][0]
    ) {
        $this->optimizeIfcWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_optimize_request,
            $contentType
        );
    }

    /**
     * Operation optimizeIfcWithHttpInfo
     *
     * Optimize the IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfc'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function optimizeIfcWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfc"][0]
    ) {
        $request = $this->optimizeIfcRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_optimize_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation optimizeIfcAsync
     *
     * Optimize the IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function optimizeIfcAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfc"][0]
    ) {
        return $this->optimizeIfcAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_optimize_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation optimizeIfcAsyncWithHttpInfo
     *
     * Optimize the IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function optimizeIfcAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfc"][0]
    ) {
        $returnType = "";
        $request = $this->optimizeIfcRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_optimize_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'optimizeIfc'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfc'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function optimizeIfcRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfc"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling optimizeIfc'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling optimizeIfc'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling optimizeIfc'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{id}/optimize";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_optimize_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_optimize_request
                    )
                );
            } else {
                $httpBody = $ifc_optimize_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeAllElementPropertySet
     *
     * Remove all property sets from element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $model_pk model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeAllElementPropertySet(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySet"
        ][0]
    ) {
        $this->removeAllElementPropertySetWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation removeAllElementPropertySetWithHttpInfo
     *
     * Remove all property sets from element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeAllElementPropertySetWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySet"
        ][0]
    ) {
        $request = $this->removeAllElementPropertySetRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeAllElementPropertySetAsync
     *
     * Remove all property sets from element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeAllElementPropertySetAsync(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySet"
        ][0]
    ) {
        return $this->removeAllElementPropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeAllElementPropertySetAsyncWithHttpInfo
     *
     * Remove all property sets from element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeAllElementPropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySet"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeAllElementPropertySetRequest(
            $cloud_pk,
            $element_uuid,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeAllElementPropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeAllElementPropertySetRequest(
        $cloud_pk,
        $element_uuid,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySet"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeAllElementPropertySet'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeAllElementPropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling removeAllElementPropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeAllElementPropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/all";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeClassificationOfElement
     *
     * Remove a classification from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeClassificationOfElement(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElement"
        ][0]
    ) {
        $this->removeClassificationOfElementWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation removeClassificationOfElementWithHttpInfo
     *
     * Remove a classification from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeClassificationOfElementWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElement"
        ][0]
    ) {
        $request = $this->removeClassificationOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeClassificationOfElementAsync
     *
     * Remove a classification from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeClassificationOfElementAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElement"
        ][0]
    ) {
        return $this->removeClassificationOfElementAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeClassificationOfElementAsyncWithHttpInfo
     *
     * Remove a classification from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeClassificationOfElementAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElement"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeClassificationOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeClassificationOfElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeClassificationOfElementRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElement"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeClassificationOfElement'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeClassificationOfElement'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeClassificationOfElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling removeClassificationOfElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeClassificationOfElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/classification/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeDocumentOfElement
     *
     * Remove a documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeDocumentOfElement(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeDocumentOfElement"][0]
    ) {
        $this->removeDocumentOfElementWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation removeDocumentOfElementWithHttpInfo
     *
     * Remove a documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeDocumentOfElementWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeDocumentOfElement"][0]
    ) {
        $request = $this->removeDocumentOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeDocumentOfElementAsync
     *
     * Remove a documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeDocumentOfElementAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeDocumentOfElement"][0]
    ) {
        return $this->removeDocumentOfElementAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeDocumentOfElementAsyncWithHttpInfo
     *
     * Remove a documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeDocumentOfElementAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeDocumentOfElement"][0]
    ) {
        $returnType = "";
        $request = $this->removeDocumentOfElementRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeDocumentOfElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeDocumentOfElementRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeDocumentOfElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeDocumentOfElement'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeDocumentOfElement'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeDocumentOfElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling removeDocumentOfElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeDocumentOfElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/documents/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySet
     *
     * Remove a PropertySet from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementPropertySet(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeElementPropertySet"][0]
    ) {
        $this->removeElementPropertySetWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation removeElementPropertySetWithHttpInfo
     *
     * Remove a PropertySet from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementPropertySetWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeElementPropertySet"][0]
    ) {
        $request = $this->removeElementPropertySetRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetAsync
     *
     * Remove a PropertySet from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeElementPropertySet"][0]
    ) {
        return $this->removeElementPropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementPropertySetAsyncWithHttpInfo
     *
     * Remove a PropertySet from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeElementPropertySet"][0]
    ) {
        $returnType = "";
        $request = $this->removeElementPropertySetRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementPropertySetRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["removeElementPropertySet"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySet'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling removeElementPropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetProperty
     *
     * Remove a property from a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementPropertySetProperty(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetProperty"
        ][0]
    ) {
        $this->removeElementPropertySetPropertyWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );
    }

    /**
     * Operation removeElementPropertySetPropertyWithHttpInfo
     *
     * Remove a property from a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementPropertySetPropertyWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetProperty"
        ][0]
    ) {
        $request = $this->removeElementPropertySetPropertyRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyAsync
     *
     * Remove a property from a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetProperty"
        ][0]
    ) {
        return $this->removeElementPropertySetPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Remove a property from a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetProperty"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementPropertySetPropertyRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementPropertySetPropertyRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetProperty"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetProperty'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetProperty'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling removeElementPropertySetProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetProperty'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinition
     *
     * Delete a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementPropertySetPropertyDefinition(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinition"
        ][0]
    ) {
        $this->removeElementPropertySetPropertyDefinitionWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionWithHttpInfo
     *
     * Delete a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementPropertySetPropertyDefinitionWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinition"
        ][0]
    ) {
        $request = $this->removeElementPropertySetPropertyDefinitionRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionAsync
     *
     * Delete a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyDefinitionAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinition"
        ][0]
    ) {
        return $this->removeElementPropertySetPropertyDefinitionAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionAsyncWithHttpInfo
     *
     * Delete a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyDefinitionAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinition"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementPropertySetPropertyDefinitionRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetPropertyDefinition'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementPropertySetPropertyDefinitionRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinition"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetPropertyDefinition'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnit
     *
     * Remove a Unit from a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementPropertySetPropertyDefinitionUnit(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        $this->removeElementPropertySetPropertyDefinitionUnitWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitWithHttpInfo
     *
     * Remove a Unit from a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementPropertySetPropertyDefinitionUnitWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        $request = $this->removeElementPropertySetPropertyDefinitionUnitRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitAsync
     *
     * Remove a Unit from a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyDefinitionUnitAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        return $this->removeElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo
     *
     * Remove a Unit from a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementPropertySetPropertyDefinitionUnitAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementPropertySetPropertyDefinitionUnitRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetPropertyDefinitionUnit'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementPropertySetPropertyDefinitionUnitRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnit"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'propertydefinition_pk' is set
        if (
            $propertydefinition_pk === null ||
            (is_array($propertydefinition_pk) &&
                count($propertydefinition_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetPropertyDefinitionUnit'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertydefinition_pk" . "}",
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementsFromClassification
     *
     * Remove the classification from all elements
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeElementsFromClassification(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassification"
        ][0]
    ) {
        $this->removeElementsFromClassificationWithHttpInfo(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation removeElementsFromClassificationWithHttpInfo
     *
     * Remove the classification from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeElementsFromClassificationWithHttpInfo(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassification"
        ][0]
    ) {
        $request = $this->removeElementsFromClassificationRequest(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementsFromClassificationAsync
     *
     * Remove the classification from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementsFromClassificationAsync(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassification"
        ][0]
    ) {
        return $this->removeElementsFromClassificationAsyncWithHttpInfo(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementsFromClassificationAsyncWithHttpInfo
     *
     * Remove the classification from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeElementsFromClassificationAsyncWithHttpInfo(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassification"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementsFromClassificationRequest(
            $cloud_pk,
            $model_classification_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementsFromClassification'
     *
     * @param  int $cloud_pk (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeElementsFromClassificationRequest(
        $cloud_pk,
        $model_classification_pk,
        $model_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassification"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementsFromClassification'
            );
        }

        // verify the required parameter 'model_classification_pk' is set
        if (
            $model_classification_pk === null ||
            (is_array($model_classification_pk) &&
                count($model_classification_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_classification_pk when calling removeElementsFromClassification'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling removeElementsFromClassification'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementsFromClassification'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling removeElementsFromClassification'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/classification/{model_classification_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_classification_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_classification_pk" . "}",
                ObjectSerializer::toPathValue($model_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reprocessModel
     *
     * Reprocess Model file
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reprocessModel(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessModel"][0]
    ) {
        $this->reprocessModelWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation reprocessModelWithHttpInfo
     *
     * Reprocess Model file
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reprocessModelWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessModel"][0]
    ) {
        $request = $this->reprocessModelRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reprocessModelAsync
     *
     * Reprocess Model file
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reprocessModelAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessModel"][0]
    ) {
        return $this->reprocessModelAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reprocessModelAsyncWithHttpInfo
     *
     * Reprocess Model file
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reprocessModelAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessModel"][0]
    ) {
        $returnType = "";
        $request = $this->reprocessModelRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reprocessModel'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reprocessModelRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessModel"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling reprocessModel'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reprocessModel'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling reprocessModel'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{id}/reprocess";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccessToken
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     */
    public function updateAccessToken(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes["updateAccessToken"][0]
    ) {
        list($response) = $this->updateAccessTokenWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $patched_ifc_access_token_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateAccessTokenWithHttpInfo
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccessTokenWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes["updateAccessToken"][0]
    ) {
        $request = $this->updateAccessTokenRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $patched_ifc_access_token_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\IfcAccessToken" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccessTokenAsync
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccessTokenAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes["updateAccessToken"][0]
    ) {
        return $this->updateAccessTokenAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $patched_ifc_access_token_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAccessTokenAsyncWithHttpInfo
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccessTokenAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes["updateAccessToken"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
        $request = $this->updateAccessTokenRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $token,
            $patched_ifc_access_token_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccessToken'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccessTokenRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes["updateAccessToken"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateAccessToken'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateAccessToken'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateAccessToken'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling updateAccessToken'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/access_token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_ifc_access_token_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_ifc_access_token_request
                    )
                );
            } else {
                $httpBody = $patched_ifc_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBuilding
     *
     * Update some fields of a building
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building
     */
    public function updateBuilding(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuilding"][0]
    ) {
        list($response) = $this->updateBuildingWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateBuildingWithHttpInfo
     *
     * Update some fields of a building
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuilding'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBuildingWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuilding"][0]
    ) {
        $request = $this->updateBuildingRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Building" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBuildingAsync
     *
     * Update some fields of a building
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBuildingAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuilding"][0]
    ) {
        return $this->updateBuildingAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateBuildingAsyncWithHttpInfo
     *
     * Update some fields of a building
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBuildingAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuilding"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building";
        $request = $this->updateBuildingRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBuilding'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuilding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBuildingRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuilding"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateBuilding'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateBuilding'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateBuilding'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateBuilding'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_storey_building_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_storey_building_request
                    )
                );
            } else {
                $httpBody = $patched_storey_building_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBuildingPlanPositioning
     *
     * Update the postioning of the plan in the building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PositioningPlan
     */
    public function updateBuildingPlanPositioning(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioning"
        ][0]
    ) {
        list($response) = $this->updateBuildingPlanPositioningWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_positioning_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateBuildingPlanPositioningWithHttpInfo
     *
     * Update the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PositioningPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBuildingPlanPositioningWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioning"
        ][0]
    ) {
        $request = $this->updateBuildingPlanPositioningRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_positioning_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PositioningPlan" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PositioningPlan" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PositioningPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PositioningPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PositioningPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBuildingPlanPositioningAsync
     *
     * Update the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBuildingPlanPositioningAsync(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioning"
        ][0]
    ) {
        return $this->updateBuildingPlanPositioningAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_positioning_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateBuildingPlanPositioningAsyncWithHttpInfo
     *
     * Update the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBuildingPlanPositioningAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioning"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PositioningPlan";
        $request = $this->updateBuildingPlanPositioningRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_positioning_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBuildingPlanPositioning'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBuildingPlanPositioningRequest(
        $building_uuid,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioning"
        ][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling updateBuildingPlanPositioning'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateBuildingPlanPositioning'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateBuildingPlanPositioning'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateBuildingPlanPositioning'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateBuildingPlanPositioning'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/{id}/positioning";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_positioning_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_positioning_plan_request
                    )
                );
            } else {
                $httpBody = $patched_positioning_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateElement
     *
     * Update some fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     */
    public function updateElement(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElement"][0]
    ) {
        list($response) = $this->updateElementWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_element_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateElementWithHttpInfo
     *
     * Update some fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElement'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateElementWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElement"][0]
    ) {
        $request = $this->updateElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_element_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Element" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateElementAsync
     *
     * Update some fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateElementAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElement"][0]
    ) {
        return $this->updateElementAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_element_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateElementAsyncWithHttpInfo
     *
     * Update some fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateElementAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElement"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element";
        $request = $this->updateElementRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_element_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateElement'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateElementRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElement"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateElement'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateElement'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateElement'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateElement'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_element_request
                    )
                );
            } else {
                $httpBody = $patched_element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateElementPropertySetProperty
     *
     * Update a property from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function updateElementPropertySetProperty(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetProperty"
        ][0]
    ) {
        list($response) = $this->updateElementPropertySetPropertyWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $patched_property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateElementPropertySetPropertyWithHttpInfo
     *
     * Update a property from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateElementPropertySetPropertyWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetProperty"
        ][0]
    ) {
        $request = $this->updateElementPropertySetPropertyRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $patched_property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateElementPropertySetPropertyAsync
     *
     * Update a property from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateElementPropertySetPropertyAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetProperty"
        ][0]
    ) {
        return $this->updateElementPropertySetPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $patched_property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateElementPropertySetPropertyAsyncWithHttpInfo
     *
     * Update a property from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateElementPropertySetPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetProperty"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->updateElementPropertySetPropertyRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $model_pk,
            $project_pk,
            $propertyset_pk,
            $patched_property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateElementPropertySetProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateElementPropertySetPropertyRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $model_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetProperty"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateElementPropertySetProperty'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling updateElementPropertySetProperty'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateElementPropertySetProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateElementPropertySetProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateElementPropertySetProperty'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling updateElementPropertySetProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_property_request
                    )
                );
            } else {
                $httpBody = $patched_property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLayer
     *
     * Update some fields of a layer
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     */
    public function updateLayer(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayer"][0]
    ) {
        list($response) = $this->updateLayerWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_layer_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateLayerWithHttpInfo
     *
     * Update some fields of a layer
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLayerWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayer"][0]
    ) {
        $request = $this->updateLayerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_layer_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Layer" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Layer" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Layer",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Layer";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Layer",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLayerAsync
     *
     * Update some fields of a layer
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLayerAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayer"][0]
    ) {
        return $this->updateLayerAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_layer_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLayerAsyncWithHttpInfo
     *
     * Update some fields of a layer
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLayerAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayer"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Layer";
        $request = $this->updateLayerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_layer_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLayer'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLayerRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayer"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateLayer'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLayer'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateLayer'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateLayer'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/layer/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_layer_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_layer_request
                    )
                );
            } else {
                $httpBody = $patched_layer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateModel
     *
     * Update some fields of a model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model
     */
    public function updateModel(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateModel"][0]
    ) {
        list($response) = $this->updateModelWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_model_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateModelWithHttpInfo
     *
     * Update some fields of a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModel'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModelWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateModel"][0]
    ) {
        $request = $this->updateModelRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_model_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Model" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateModelAsync
     *
     * Update some fields of a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateModel"][0]
    ) {
        return $this->updateModelAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_model_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateModelAsyncWithHttpInfo
     *
     * Update some fields of a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateModel"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model";
        $request = $this->updateModelRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_model_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateModel'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModel'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateModelRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateModel"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateModel'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateModel'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateModel'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/model/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_model_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_model_request
                    )
                );
            } else {
                $httpBody = $patched_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateModelFiles
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \SplFileObject $structure_file structure_file (optional)
     * @param  \SplFileObject $systems_file systems_file (optional)
     * @param  \SplFileObject $map_file map_file (optional)
     * @param  \SplFileObject $gltf_file gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file preview_file (optional)
     * @param  \SplFileObject $xkt_file xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelFiles
     */
    public function updateModelFiles(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateModelFiles"][0]
    ) {
        list($response) = $this->updateModelFilesWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $structure_file,
            $systems_file,
            $map_file,
            $gltf_file,
            $gltf_with_openings_file,
            $bvh_tree_file,
            $preview_file,
            $xkt_file,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateModelFilesWithHttpInfo
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelFiles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelFiles, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModelFilesWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateModelFiles"][0]
    ) {
        $request = $this->updateModelFilesRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $structure_file,
            $systems_file,
            $map_file,
            $gltf_file,
            $gltf_with_openings_file,
            $bvh_tree_file,
            $preview_file,
            $xkt_file,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ModelFiles" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ModelFiles" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ModelFiles",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ModelFiles";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ModelFiles",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateModelFilesAsync
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelFilesAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateModelFiles"][0]
    ) {
        return $this->updateModelFilesAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $structure_file,
            $systems_file,
            $map_file,
            $gltf_file,
            $gltf_with_openings_file,
            $bvh_tree_file,
            $preview_file,
            $xkt_file,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateModelFilesAsyncWithHttpInfo
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelFilesAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateModelFiles"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ModelFiles";
        $request = $this->updateModelFilesRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $structure_file,
            $systems_file,
            $map_file,
            $gltf_file,
            $gltf_with_openings_file,
            $bvh_tree_file,
            $preview_file,
            $xkt_file,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateModelFiles'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateModelFilesRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateModelFiles"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateModelFiles'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateModelFiles'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateModelFiles'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{id}/files";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        // form params
        if ($structure_file !== null) {
            $multipart = true;
            $formParams["structure_file"] = [];
            $paramFiles = is_array($structure_file)
                ? $structure_file
                : [$structure_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "structure_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($systems_file !== null) {
            $multipart = true;
            $formParams["systems_file"] = [];
            $paramFiles = is_array($systems_file)
                ? $systems_file
                : [$systems_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "systems_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($map_file !== null) {
            $multipart = true;
            $formParams["map_file"] = [];
            $paramFiles = is_array($map_file) ? $map_file : [$map_file];
            foreach ($paramFiles as $paramFile) {
                $formParams["map_file"][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($gltf_file !== null) {
            $multipart = true;
            $formParams["gltf_file"] = [];
            $paramFiles = is_array($gltf_file) ? $gltf_file : [$gltf_file];
            foreach ($paramFiles as $paramFile) {
                $formParams["gltf_file"][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($gltf_with_openings_file !== null) {
            $multipart = true;
            $formParams["gltf_with_openings_file"] = [];
            $paramFiles = is_array($gltf_with_openings_file)
                ? $gltf_with_openings_file
                : [$gltf_with_openings_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "gltf_with_openings_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($bvh_tree_file !== null) {
            $multipart = true;
            $formParams["bvh_tree_file"] = [];
            $paramFiles = is_array($bvh_tree_file)
                ? $bvh_tree_file
                : [$bvh_tree_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "bvh_tree_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($preview_file !== null) {
            $multipart = true;
            $formParams["preview_file"] = [];
            $paramFiles = is_array($preview_file)
                ? $preview_file
                : [$preview_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "preview_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($xkt_file !== null) {
            $multipart = true;
            $formParams["xkt_file"] = [];
            $paramFiles = is_array($xkt_file) ? $xkt_file : [$xkt_file];
            foreach ($paramFiles as $paramFile) {
                $formParams["xkt_file"][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateModelProperty
     *
     * Update some fields of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     */
    public function updateModelProperty(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes["updateModelProperty"][0]
    ) {
        list($response) = $this->updateModelPropertyWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateModelPropertyWithHttpInfo
     *
     * Update some fields of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModelPropertyWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes["updateModelProperty"][0]
    ) {
        $request = $this->updateModelPropertyRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateModelPropertyAsync
     *
     * Update some fields of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelPropertyAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes["updateModelProperty"][0]
    ) {
        return $this->updateModelPropertyAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateModelPropertyAsyncWithHttpInfo
     *
     * Update some fields of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelPropertyAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes["updateModelProperty"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->updateModelPropertyRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateModelProperty'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateModelPropertyRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes["updateModelProperty"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateModelProperty'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateModelProperty'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateModelProperty'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateModelProperty'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_property_request
                    )
                );
            } else {
                $httpBody = $patched_property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateModelPropertyDefinition
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     */
    public function updateModelPropertyDefinition(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateModelPropertyDefinition"
        ][0]
    ) {
        list($response) = $this->updateModelPropertyDefinitionWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_definition_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateModelPropertyDefinitionWithHttpInfo
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModelPropertyDefinitionWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateModelPropertyDefinition"
        ][0]
    ) {
        $request = $this->updateModelPropertyDefinitionRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_definition_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateModelPropertyDefinitionAsync
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelPropertyDefinitionAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateModelPropertyDefinition"
        ][0]
    ) {
        return $this->updateModelPropertyDefinitionAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_definition_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateModelPropertyDefinitionAsyncWithHttpInfo
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelPropertyDefinitionAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateModelPropertyDefinition"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
        $request = $this->updateModelPropertyDefinitionRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_definition_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateModelPropertyDefinition'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelPropertyDefinition'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateModelPropertyDefinitionRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateModelPropertyDefinition"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateModelPropertyDefinition'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateModelPropertyDefinition'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateModelPropertyDefinition'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateModelPropertyDefinition'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_property_definition_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_property_definition_request
                    )
                );
            } else {
                $httpBody = $patched_property_definition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateModelUnit
     *
     * Update some fields of a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     */
    public function updateModelUnit(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateModelUnit"][0]
    ) {
        list($response) = $this->updateModelUnitWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_unit_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateModelUnitWithHttpInfo
     *
     * Update some fields of a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelUnit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModelUnitWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateModelUnit"][0]
    ) {
        $request = $this->updateModelUnitRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_unit_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateModelUnitAsync
     *
     * Update some fields of a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelUnitAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateModelUnit"][0]
    ) {
        return $this->updateModelUnitAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_unit_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateModelUnitAsyncWithHttpInfo
     *
     * Update some fields of a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateModelUnitAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateModelUnit"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit";
        $request = $this->updateModelUnitRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_unit_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateModelUnit'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateModelUnit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateModelUnitRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateModelUnit"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateModelUnit'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateModelUnit'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateModelUnit'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateModelUnit'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_unit_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_unit_request
                    )
                );
            } else {
                $httpBody = $patched_unit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrderBuildingPlan
     *
     * Update order of all plan of a building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     */
    public function updateOrderBuildingPlan(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderBuildingPlan"][0]
    ) {
        list($response) = $this->updateOrderBuildingPlanWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateOrderBuildingPlanWithHttpInfo
     *
     * Update order of all plan of a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrderBuildingPlanWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderBuildingPlan"][0]
    ) {
        $request = $this->updateOrderBuildingPlanRequest(
            $building_uuid,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrderBuildingPlanAsync
     *
     * Update order of all plan of a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrderBuildingPlanAsync(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderBuildingPlan"][0]
    ) {
        return $this->updateOrderBuildingPlanAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateOrderBuildingPlanAsyncWithHttpInfo
     *
     * Update order of all plan of a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrderBuildingPlanAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderBuildingPlan"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->updateOrderBuildingPlanRequest(
            $building_uuid,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrderBuildingPlan'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrderBuildingPlanRequest(
        $building_uuid,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderBuildingPlan"][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling updateOrderBuildingPlan'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateOrderBuildingPlan'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateOrderBuildingPlan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateOrderBuildingPlan'
            );
        }

        // verify the required parameter 'request_body' is set
        if (
            $request_body === null ||
            (is_array($request_body) && count($request_body) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling updateOrderBuildingPlan'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/building/{building_uuid}/plan/order";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($request_body)
                );
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrderStoreyPlan
     *
     * Update order of all plan of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  int[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     */
    public function updateOrderStoreyPlan(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreyPlan"][0]
    ) {
        list($response) = $this->updateOrderStoreyPlanWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $request_body,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateOrderStoreyPlanWithHttpInfo
     *
     * Update order of all plan of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrderStoreyPlanWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreyPlan"][0]
    ) {
        $request = $this->updateOrderStoreyPlanRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $request_body,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrderStoreyPlanAsync
     *
     * Update order of all plan of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrderStoreyPlanAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreyPlan"][0]
    ) {
        return $this->updateOrderStoreyPlanAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $request_body,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateOrderStoreyPlanAsyncWithHttpInfo
     *
     * Update order of all plan of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrderStoreyPlanAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreyPlan"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->updateOrderStoreyPlanRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $request_body,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrderStoreyPlan'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrderStoreyPlanRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreyPlan"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateOrderStoreyPlan'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateOrderStoreyPlan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateOrderStoreyPlan'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling updateOrderStoreyPlan'
            );
        }

        // verify the required parameter 'request_body' is set
        if (
            $request_body === null ||
            (is_array($request_body) && count($request_body) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling updateOrderStoreyPlan'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/order";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($request_body)
                );
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrderStoreys
     *
     * Update order of all storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreys'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey[]
     */
    public function updateOrderStoreys(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreys"][0]
    ) {
        list($response) = $this->updateOrderStoreysWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateOrderStoreysWithHttpInfo
     *
     * Update order of all storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreys'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrderStoreysWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreys"][0]
    ) {
        $request = $this->updateOrderStoreysRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrderStoreysAsync
     *
     * Update order of all storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrderStoreysAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreys"][0]
    ) {
        return $this->updateOrderStoreysAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateOrderStoreysAsyncWithHttpInfo
     *
     * Update order of all storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrderStoreysAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreys"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey[]";
        $request = $this->updateOrderStoreysRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrderStoreys'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreys'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateOrderStoreysRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes["updateOrderStoreys"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateOrderStoreys'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateOrderStoreys'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateOrderStoreys'
            );
        }

        // verify the required parameter 'request_body' is set
        if (
            $request_body === null ||
            (is_array($request_body) && count($request_body) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling updateOrderStoreys'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/order";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($request_body)
                );
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProcessorHandler
     *
     * Update the status of a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler
     */
    public function updateProcessorHandler(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes["updateProcessorHandler"][0]
    ) {
        list($response) = $this->updateProcessorHandlerWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_processor_handler_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateProcessorHandlerWithHttpInfo
     *
     * Update the status of a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandler'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProcessorHandlerWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes["updateProcessorHandler"][0]
    ) {
        $request = $this->updateProcessorHandlerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_processor_handler_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProcessorHandler" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProcessorHandler" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProcessorHandler",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProcessorHandler";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProcessorHandler",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProcessorHandlerAsync
     *
     * Update the status of a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProcessorHandlerAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes["updateProcessorHandler"][0]
    ) {
        return $this->updateProcessorHandlerAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_processor_handler_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateProcessorHandlerAsyncWithHttpInfo
     *
     * Update the status of a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProcessorHandlerAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes["updateProcessorHandler"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProcessorHandler";
        $request = $this->updateProcessorHandlerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_processor_handler_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProcessorHandler'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandler'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProcessorHandlerRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes["updateProcessorHandler"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateProcessorHandler'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateProcessorHandler'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateProcessorHandler'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateProcessorHandler'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/processorhandler/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_processor_handler_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_processor_handler_request
                    )
                );
            } else {
                $httpBody = $patched_processor_handler_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePropertySet
     *
     * Update some fields of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     */
    public function updatePropertySet(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes["updatePropertySet"][0]
    ) {
        list($response) = $this->updatePropertySetWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_set_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updatePropertySetWithHttpInfo
     *
     * Update some fields of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePropertySetWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes["updatePropertySet"][0]
    ) {
        $request = $this->updatePropertySetRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_set_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\PropertySet" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePropertySetAsync
     *
     * Update some fields of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePropertySetAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes["updatePropertySet"][0]
    ) {
        return $this->updatePropertySetAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_set_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updatePropertySetAsyncWithHttpInfo
     *
     * Update some fields of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePropertySetAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes["updatePropertySet"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet";
        $request = $this->updatePropertySetRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_property_set_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePropertySet'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePropertySetRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes["updatePropertySet"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updatePropertySet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePropertySet'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updatePropertySet'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updatePropertySet'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_property_set_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_property_set_request
                    )
                );
            } else {
                $httpBody = $patched_property_set_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSpace
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space
     */
    public function updateSpace(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpace"][0]
    ) {
        list($response) = $this->updateSpaceWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_space_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateSpaceWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSpaceWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpace"][0]
    ) {
        $request = $this->updateSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_space_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Space" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Space" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Space",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Space";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Space",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSpaceAsync
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSpaceAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpace"][0]
    ) {
        return $this->updateSpaceAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_space_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSpaceAsyncWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSpaceAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpace"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Space";
        $request = $this->updateSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_space_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSpace'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSpaceRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpace"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateSpace'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateSpace'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateSpace'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateSpace'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_space_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_space_request
                    )
                );
            } else {
                $httpBody = $patched_space_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStorey
     *
     * Update some fields of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStorey'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     */
    public function updateStorey(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStorey"][0]
    ) {
        list($response) = $this->updateStoreyWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateStoreyWithHttpInfo
     *
     * Update some fields of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStorey'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateStoreyWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStorey"][0]
    ) {
        $request = $this->updateStoreyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStoreyAsync
     *
     * Update some fields of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreyAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStorey"][0]
    ) {
        return $this->updateStoreyAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateStoreyAsyncWithHttpInfo
     *
     * Update some fields of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreyAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStorey"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->updateStoreyRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStorey'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStorey'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateStoreyRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStorey"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateStorey'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateStorey'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateStorey'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateStorey'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_storey_building_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_storey_building_request
                    )
                );
            } else {
                $httpBody = $patched_storey_building_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStoreyPlanPositioning
     *
     * Update the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PositioningPlan
     */
    public function updateStoreyPlanPositioning(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioning"
        ][0]
    ) {
        list($response) = $this->updateStoreyPlanPositioningWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $patched_positioning_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateStoreyPlanPositioningWithHttpInfo
     *
     * Update the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PositioningPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateStoreyPlanPositioningWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioning"
        ][0]
    ) {
        $request = $this->updateStoreyPlanPositioningRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $patched_positioning_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PositioningPlan" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PositioningPlan" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PositioningPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PositioningPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PositioningPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStoreyPlanPositioningAsync
     *
     * Update the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreyPlanPositioningAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioning"
        ][0]
    ) {
        return $this->updateStoreyPlanPositioningAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $patched_positioning_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateStoreyPlanPositioningAsyncWithHttpInfo
     *
     * Update the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreyPlanPositioningAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioning"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PositioningPlan";
        $request = $this->updateStoreyPlanPositioningRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $storey_uuid,
            $patched_positioning_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStoreyPlanPositioning'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioning'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateStoreyPlanPositioningRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioning"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateStoreyPlanPositioning'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateStoreyPlanPositioning'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateStoreyPlanPositioning'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateStoreyPlanPositioning'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling updateStoreyPlanPositioning'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/storey/{storey_uuid}/plan/{id}/positioning";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_positioning_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_positioning_plan_request
                    )
                );
            } else {
                $httpBody = $patched_positioning_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSystem
     *
     * Update some fields of a system
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     */
    public function updateSystem(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystem"][0]
    ) {
        list($response) = $this->updateSystemWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_system_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateSystemWithHttpInfo
     *
     * Update some fields of a system
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystem'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSystemWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystem"][0]
    ) {
        $request = $this->updateSystemRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_system_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\System" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\System" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\System",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\System";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\System",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSystemAsync
     *
     * Update some fields of a system
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSystemAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystem"][0]
    ) {
        return $this->updateSystemAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_system_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSystemAsyncWithHttpInfo
     *
     * Update some fields of a system
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSystemAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystem"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\System";
        $request = $this->updateSystemRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $uuid,
            $patched_system_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSystem'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSystemRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystem"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateSystem'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateSystem'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateSystem'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateSystem'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/system/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_system_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_system_request
                    )
                );
            } else {
                $httpBody = $patched_system_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateZone
     *
     * Update some fields of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone
     */
    public function updateZone(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZone"][0]
    ) {
        list($response) = $this->updateZoneWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_zone_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateZoneWithHttpInfo
     *
     * Update some fields of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateZoneWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZone"][0]
    ) {
        $request = $this->updateZoneRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_zone_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Zone" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Zone" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Zone",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Zone";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Zone",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateZoneAsync
     *
     * Update some fields of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZoneAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZone"][0]
    ) {
        return $this->updateZoneAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_zone_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateZoneAsyncWithHttpInfo
     *
     * Update some fields of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZoneAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZone"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Zone";
        $request = $this->updateZoneRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_zone_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateZone'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateZoneRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZone"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateZone'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateZone'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateZone'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateZone'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_zone_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_zone_request
                    )
                );
            } else {
                $httpBody = $patched_zone_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateZoneSpace
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     */
    public function updateZoneSpace(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpace"][0]
    ) {
        list($response) = $this->updateZoneSpaceWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $patched_zone_space_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateZoneSpaceWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpace'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateZoneSpaceWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpace"][0]
    ) {
        $request = $this->updateZoneSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $patched_zone_space_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ZoneSpace" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ZoneSpace" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ZoneSpace",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ZoneSpace";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ZoneSpace",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateZoneSpaceAsync
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZoneSpaceAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpace"][0]
    ) {
        return $this->updateZoneSpaceAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $patched_zone_space_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateZoneSpaceAsyncWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZoneSpaceAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpace"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ZoneSpace";
        $request = $this->updateZoneSpaceRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $zone_pk,
            $patched_zone_space_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateZoneSpace'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpace'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateZoneSpaceRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpace"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateZoneSpace'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateZoneSpace'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateZoneSpace'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateZoneSpace'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling updateZoneSpace'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/zone/{zone_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_zone_space_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_zone_space_request
                    )
                );
            } else {
                $httpBody = $patched_zone_space_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                "a"
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    "Failed to open the debug file: " .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
