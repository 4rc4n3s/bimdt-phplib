<?php
/**
 * CheckerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CheckerApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CheckerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        "createChecker" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createCheckerResult" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createCheckplan" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createRule" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createRuleComponent" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createRuleset" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "deleteChecker" => ["application/json"],
        "deleteCheckerResult" => ["application/json"],
        "deleteCheckplan" => ["application/json"],
        "deleteRule" => ["application/json"],
        "deleteRuleComponent" => ["application/json"],
        "deleteRuleset" => ["application/json"],
        "getChecker" => ["application/json"],
        "getCheckerResult" => ["application/json"],
        "getCheckerResults" => ["application/json"],
        "getCheckers" => ["application/json"],
        "getCheckplan" => ["application/json"],
        "getCheckplans" => ["application/json"],
        "getRule" => ["application/json"],
        "getRuleComponent" => ["application/json"],
        "getRuleComponents" => ["application/json"],
        "getRules" => ["application/json"],
        "getRuleset" => ["application/json"],
        "getRulesets" => ["application/json"],
        "launchNewCheck" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateChecker" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateCheckerResult" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateCheckplan" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateRule" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateRuleComponent" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateRuleset" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createChecker
     *
     * Create a checker to a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChecker'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     */
    public function createChecker(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createChecker"][0]
    ) {
        list($response) = $this->createCheckerWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createCheckerWithHttpInfo
     *
     * Create a checker to a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChecker'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCheckerWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createChecker"][0]
    ) {
        $request = $this->createCheckerRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\IfcChecker" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcChecker" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcChecker",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcChecker";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcChecker",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCheckerAsync
     *
     * Create a checker to a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckerAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createChecker"][0]
    ) {
        return $this->createCheckerAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createCheckerAsyncWithHttpInfo
     *
     * Create a checker to a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckerAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createChecker"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcChecker";
        $request = $this->createCheckerRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createChecker'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCheckerRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createChecker"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createChecker'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createChecker'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createChecker'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_checker_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_checker_request
                    )
                );
            } else {
                $httpBody = $ifc_checker_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCheckerResult
     *
     * Create a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     */
    public function createCheckerResult(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes["createCheckerResult"][0]
    ) {
        list($response) = $this->createCheckerResultWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $checker_result_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createCheckerResultWithHttpInfo
     *
     * Create a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCheckerResultWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes["createCheckerResult"][0]
    ) {
        $request = $this->createCheckerResultRequest(
            $checker_pk,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $checker_result_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\CheckerResult" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CheckerResult" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckerResult",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckerResult";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckerResult",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCheckerResultAsync
     *
     * Create a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckerResultAsync(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes["createCheckerResult"][0]
    ) {
        return $this->createCheckerResultAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $checker_result_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createCheckerResultAsyncWithHttpInfo
     *
     * Create a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckerResultAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes["createCheckerResult"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckerResult";
        $request = $this->createCheckerResultRequest(
            $checker_pk,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $checker_result_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCheckerResult'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCheckerResultRequest(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes["createCheckerResult"][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling createCheckerResult'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createCheckerResult'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling createCheckerResult'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createCheckerResult'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($checker_result_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $checker_result_request
                    )
                );
            } else {
                $httpBody = $checker_result_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCheckplan
     *
     * Create a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckPlanRequest $check_plan_request check_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckplan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan
     */
    public function createCheckplan(
        $cloud_pk,
        $project_pk,
        $check_plan_request,
        string $contentType = self::contentTypes["createCheckplan"][0]
    ) {
        list($response) = $this->createCheckplanWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $check_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createCheckplanWithHttpInfo
     *
     * Create a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckPlanRequest $check_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckplan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCheckplanWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $check_plan_request,
        string $contentType = self::contentTypes["createCheckplan"][0]
    ) {
        $request = $this->createCheckplanRequest(
            $cloud_pk,
            $project_pk,
            $check_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\CheckPlan" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\CheckPlan" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCheckplanAsync
     *
     * Create a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckPlanRequest $check_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckplanAsync(
        $cloud_pk,
        $project_pk,
        $check_plan_request,
        string $contentType = self::contentTypes["createCheckplan"][0]
    ) {
        return $this->createCheckplanAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $check_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createCheckplanAsyncWithHttpInfo
     *
     * Create a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckPlanRequest $check_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCheckplanAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $check_plan_request,
        string $contentType = self::contentTypes["createCheckplan"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckPlan";
        $request = $this->createCheckplanRequest(
            $cloud_pk,
            $project_pk,
            $check_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCheckplan'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckPlanRequest $check_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCheckplanRequest(
        $cloud_pk,
        $project_pk,
        $check_plan_request,
        string $contentType = self::contentTypes["createCheckplan"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createCheckplan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createCheckplan'
            );
        }

        // verify the required parameter 'check_plan_request' is set
        if (
            $check_plan_request === null ||
            (is_array($check_plan_request) && count($check_plan_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_request when calling createCheckplan'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/checkplan";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($check_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $check_plan_request
                    )
                );
            } else {
                $httpBody = $check_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRule
     *
     * Create a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleRequest $rule_request rule_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule
     */
    public function createRule(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        $rule_request,
        string $contentType = self::contentTypes["createRule"][0]
    ) {
        list($response) = $this->createRuleWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_pk,
            $rule_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createRuleWithHttpInfo
     *
     * Create a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleRequest $rule_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRuleWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        $rule_request,
        string $contentType = self::contentTypes["createRule"][0]
    ) {
        $request = $this->createRuleRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_pk,
            $rule_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Rule" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Rule" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Rule",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Rule";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Rule",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRuleAsync
     *
     * Create a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleRequest $rule_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRuleAsync(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        $rule_request,
        string $contentType = self::contentTypes["createRule"][0]
    ) {
        return $this->createRuleAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_pk,
            $rule_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createRuleAsyncWithHttpInfo
     *
     * Create a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleRequest $rule_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRuleAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        $rule_request,
        string $contentType = self::contentTypes["createRule"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Rule";
        $request = $this->createRuleRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_pk,
            $rule_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRule'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleRequest $rule_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRuleRequest(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        $rule_request,
        string $contentType = self::contentTypes["createRule"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling createRule'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRule'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRule'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling createRule'
            );
        }

        // verify the required parameter 'rule_request' is set
        if (
            $rule_request === null ||
            (is_array($rule_request) && count($rule_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_request when calling createRule'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rule_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($rule_request)
                );
            } else {
                $httpBody = $rule_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRuleComponent
     *
     * Create a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleComponentRequest $rule_component_request rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleComponent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent
     */
    public function createRuleComponent(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $rule_component_request = null,
        string $contentType = self::contentTypes["createRuleComponent"][0]
    ) {
        list($response) = $this->createRuleComponentWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $rule_component_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createRuleComponentWithHttpInfo
     *
     * Create a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleComponentRequest $rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleComponent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRuleComponentWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $rule_component_request = null,
        string $contentType = self::contentTypes["createRuleComponent"][0]
    ) {
        $request = $this->createRuleComponentRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $rule_component_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\RuleComponent" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\RuleComponent" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\RuleComponent",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\RuleComponent";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\RuleComponent",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRuleComponentAsync
     *
     * Create a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleComponentRequest $rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRuleComponentAsync(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $rule_component_request = null,
        string $contentType = self::contentTypes["createRuleComponent"][0]
    ) {
        return $this->createRuleComponentAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $rule_component_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createRuleComponentAsyncWithHttpInfo
     *
     * Create a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleComponentRequest $rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRuleComponentAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $rule_component_request = null,
        string $contentType = self::contentTypes["createRuleComponent"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\RuleComponent";
        $request = $this->createRuleComponentRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $rule_component_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRuleComponent'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\RuleComponentRequest $rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRuleComponentRequest(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $rule_component_request = null,
        string $contentType = self::contentTypes["createRuleComponent"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling createRuleComponent'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRuleComponent'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRuleComponent'
            );
        }

        // verify the required parameter 'rule_pk' is set
        if (
            $rule_pk === null ||
            (is_array($rule_pk) && count($rule_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling createRuleComponent'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling createRuleComponent'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                "{" . "rule_pk" . "}",
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($rule_component_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $rule_component_request
                    )
                );
            } else {
                $httpBody = $rule_component_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRuleset
     *
     * Create a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RulesetRequest $ruleset_request ruleset_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset
     */
    public function createRuleset(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_request,
        string $contentType = self::contentTypes["createRuleset"][0]
    ) {
        list($response) = $this->createRulesetWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createRulesetWithHttpInfo
     *
     * Create a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RulesetRequest $ruleset_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRulesetWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_request,
        string $contentType = self::contentTypes["createRuleset"][0]
    ) {
        $request = $this->createRulesetRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Ruleset" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Ruleset" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Ruleset",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Ruleset";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Ruleset",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRulesetAsync
     *
     * Create a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RulesetRequest $ruleset_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRulesetAsync(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_request,
        string $contentType = self::contentTypes["createRuleset"][0]
    ) {
        return $this->createRulesetAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createRulesetAsyncWithHttpInfo
     *
     * Create a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RulesetRequest $ruleset_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRulesetAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_request,
        string $contentType = self::contentTypes["createRuleset"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Ruleset";
        $request = $this->createRulesetRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRuleset'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RulesetRequest $ruleset_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRulesetRequest(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_request,
        string $contentType = self::contentTypes["createRuleset"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling createRuleset'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRuleset'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRuleset'
            );
        }

        // verify the required parameter 'ruleset_request' is set
        if (
            $ruleset_request === null ||
            (is_array($ruleset_request) && count($ruleset_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_request when calling createRuleset'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ruleset_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($ruleset_request)
                );
            } else {
                $httpBody = $ruleset_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteChecker
     *
     * Delete a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChecker'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteChecker(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteChecker"][0]
    ) {
        $this->deleteCheckerWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteCheckerWithHttpInfo
     *
     * Delete a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChecker'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCheckerWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteChecker"][0]
    ) {
        $request = $this->deleteCheckerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCheckerAsync
     *
     * Delete a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckerAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteChecker"][0]
    ) {
        return $this->deleteCheckerAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCheckerAsyncWithHttpInfo
     *
     * Delete a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckerAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteChecker"][0]
    ) {
        $returnType = "";
        $request = $this->deleteCheckerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteChecker'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCheckerRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteChecker"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteChecker'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteChecker'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteChecker'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteChecker'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCheckerResult
     *
     * Delete a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCheckerResult(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerResult"][0]
    ) {
        $this->deleteCheckerResultWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteCheckerResultWithHttpInfo
     *
     * Delete a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCheckerResultWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerResult"][0]
    ) {
        $request = $this->deleteCheckerResultRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCheckerResultAsync
     *
     * Delete a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckerResultAsync(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerResult"][0]
    ) {
        return $this->deleteCheckerResultAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCheckerResultAsyncWithHttpInfo
     *
     * Delete a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckerResultAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerResult"][0]
    ) {
        $returnType = "";
        $request = $this->deleteCheckerResultRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCheckerResult'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCheckerResultRequest(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerResult"][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling deleteCheckerResult'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteCheckerResult'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCheckerResult'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling deleteCheckerResult'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteCheckerResult'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCheckplan
     *
     * Delete a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckplan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCheckplan(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckplan"][0]
    ) {
        $this->deleteCheckplanWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteCheckplanWithHttpInfo
     *
     * Delete a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckplan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCheckplanWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckplan"][0]
    ) {
        $request = $this->deleteCheckplanRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCheckplanAsync
     *
     * Delete a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckplanAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckplan"][0]
    ) {
        return $this->deleteCheckplanAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCheckplanAsyncWithHttpInfo
     *
     * Delete a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCheckplanAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckplan"][0]
    ) {
        $returnType = "";
        $request = $this->deleteCheckplanRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCheckplan'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCheckplanRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckplan"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteCheckplan'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCheckplan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteCheckplan'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRule
     *
     * Delete a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRule(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRule"][0]
    ) {
        $this->deleteRuleWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $contentType
        );
    }

    /**
     * Operation deleteRuleWithHttpInfo
     *
     * Delete a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRuleWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRule"][0]
    ) {
        $request = $this->deleteRuleRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRuleAsync
     *
     * Delete a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRuleAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRule"][0]
    ) {
        return $this->deleteRuleAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteRuleAsyncWithHttpInfo
     *
     * Delete a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRuleAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRule"][0]
    ) {
        $returnType = "";
        $request = $this->deleteRuleRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRule'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRuleRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRule"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling deleteRule'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteRule'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRule'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteRule'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling deleteRule'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRuleComponent
     *
     * Delete a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleComponent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRuleComponent(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRuleComponent"][0]
    ) {
        $this->deleteRuleComponentWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );
    }

    /**
     * Operation deleteRuleComponentWithHttpInfo
     *
     * Delete a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleComponent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRuleComponentWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRuleComponent"][0]
    ) {
        $request = $this->deleteRuleComponentRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRuleComponentAsync
     *
     * Delete a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRuleComponentAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRuleComponent"][0]
    ) {
        return $this->deleteRuleComponentAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteRuleComponentAsyncWithHttpInfo
     *
     * Delete a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRuleComponentAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRuleComponent"][0]
    ) {
        $returnType = "";
        $request = $this->deleteRuleComponentRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRuleComponent'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRuleComponentRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["deleteRuleComponent"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling deleteRuleComponent'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteRuleComponent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRuleComponent'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteRuleComponent'
            );
        }

        // verify the required parameter 'rule_pk' is set
        if (
            $rule_pk === null ||
            (is_array($rule_pk) && count($rule_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling deleteRuleComponent'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling deleteRuleComponent'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                "{" . "rule_pk" . "}",
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRuleset
     *
     * Delete a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRuleset(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteRuleset"][0]
    ) {
        $this->deleteRulesetWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteRulesetWithHttpInfo
     *
     * Delete a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRulesetWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteRuleset"][0]
    ) {
        $request = $this->deleteRulesetRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRulesetAsync
     *
     * Delete a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRulesetAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteRuleset"][0]
    ) {
        return $this->deleteRulesetAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteRulesetAsyncWithHttpInfo
     *
     * Delete a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRulesetAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteRuleset"][0]
    ) {
        $returnType = "";
        $request = $this->deleteRulesetRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRuleset'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRulesetRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteRuleset"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling deleteRuleset'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteRuleset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteRuleset'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteRuleset'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChecker
     *
     * Retrieve a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChecker'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     */
    public function getChecker(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getChecker"][0]
    ) {
        list($response) = $this->getCheckerWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckerWithHttpInfo
     *
     * Retrieve a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChecker'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckerWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getChecker"][0]
    ) {
        $request = $this->getCheckerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcChecker" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcChecker" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcChecker",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcChecker";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcChecker",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerAsync
     *
     * Retrieve a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getChecker"][0]
    ) {
        return $this->getCheckerAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckerAsyncWithHttpInfo
     *
     * Retrieve a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getChecker"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcChecker";
        $request = $this->getCheckerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChecker'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckerRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getChecker"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getChecker'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getChecker'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getChecker'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getChecker'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckerResult
     *
     * Retrieve one CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     */
    public function getCheckerResult(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResult"][0]
    ) {
        list($response) = $this->getCheckerResultWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckerResultWithHttpInfo
     *
     * Retrieve one CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckerResultWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResult"][0]
    ) {
        $request = $this->getCheckerResultRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckerResult" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CheckerResult" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckerResult",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckerResult";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckerResult",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerResultAsync
     *
     * Retrieve one CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerResultAsync(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResult"][0]
    ) {
        return $this->getCheckerResultAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckerResultAsyncWithHttpInfo
     *
     * Retrieve one CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerResultAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResult"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckerResult";
        $request = $this->getCheckerResultRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckerResult'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckerResultRequest(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResult"][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling getCheckerResult'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckerResult'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckerResult'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getCheckerResult'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckerResult'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckerResults
     *
     * Retrieve all CheckerResults
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult[]
     */
    public function getCheckerResults(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResults"][0]
    ) {
        list($response) = $this->getCheckerResultsWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckerResultsWithHttpInfo
     *
     * Retrieve all CheckerResults
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResults'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckerResultsWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResults"][0]
    ) {
        $request = $this->getCheckerResultsRequest(
            $checker_pk,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckerResult[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CheckerResult[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckerResult[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckerResult[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckerResult[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerResultsAsync
     *
     * Retrieve all CheckerResults
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerResultsAsync(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResults"][0]
    ) {
        return $this->getCheckerResultsAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckerResultsAsyncWithHttpInfo
     *
     * Retrieve all CheckerResults
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckerResultsAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResults"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckerResult[]";
        $request = $this->getCheckerResultsRequest(
            $checker_pk,
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckerResults'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckerResultsRequest(
        $checker_pk,
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerResults"][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling getCheckerResults'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckerResults'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getCheckerResults'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckerResults'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckers
     *
     * Retrieve all checkers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker[]
     */
    public function getCheckers(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckers"][0]
    ) {
        list($response) = $this->getCheckersWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckersWithHttpInfo
     *
     * Retrieve all checkers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckersWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckers"][0]
    ) {
        $request = $this->getCheckersRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcChecker[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcChecker[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcChecker[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcChecker[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcChecker[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckersAsync
     *
     * Retrieve all checkers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckersAsync(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckers"][0]
    ) {
        return $this->getCheckersAsyncWithHttpInfo(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckersAsyncWithHttpInfo
     *
     * Retrieve all checkers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckersAsyncWithHttpInfo(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckers"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcChecker[]";
        $request = $this->getCheckersRequest(
            $cloud_pk,
            $model_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckers'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckersRequest(
        $cloud_pk,
        $model_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckers"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckers'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling getCheckers'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckers'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckplan
     *
     * Retrieve one Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan
     */
    public function getCheckplan(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplan"][0]
    ) {
        list($response) = $this->getCheckplanWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckplanWithHttpInfo
     *
     * Retrieve one Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckplanWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplan"][0]
    ) {
        $request = $this->getCheckplanRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckPlan" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\CheckPlan" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckplanAsync
     *
     * Retrieve one Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckplanAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplan"][0]
    ) {
        return $this->getCheckplanAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckplanAsyncWithHttpInfo
     *
     * Retrieve one Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckplanAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplan"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckPlan";
        $request = $this->getCheckplanRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckplan'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckplanRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplan"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckplan'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckplan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckplan'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckplans
     *
     * Retrieve all Checkplans
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplans'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan[]
     */
    public function getCheckplans(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplans"][0]
    ) {
        list($response) = $this->getCheckplansWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckplansWithHttpInfo
     *
     * Retrieve all Checkplans
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplans'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckplansWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplans"][0]
    ) {
        $request = $this->getCheckplansRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckPlan[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\CheckPlan[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckPlan[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckPlan[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckPlan[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckplansAsync
     *
     * Retrieve all Checkplans
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckplansAsync(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplans"][0]
    ) {
        return $this->getCheckplansAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckplansAsyncWithHttpInfo
     *
     * Retrieve all Checkplans
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckplansAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplans"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckPlan[]";
        $request = $this->getCheckplansRequest(
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckplans'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckplans'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCheckplansRequest(
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckplans"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckplans'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckplans'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/checkplan";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRule
     *
     * Retrieve one Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule
     */
    public function getRule(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRule"][0]
    ) {
        list($response) = $this->getRuleWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getRuleWithHttpInfo
     *
     * Retrieve one Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRuleWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRule"][0]
    ) {
        $request = $this->getRuleRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Rule" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Rule" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Rule",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Rule";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Rule",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRuleAsync
     *
     * Retrieve one Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRule"][0]
    ) {
        return $this->getRuleAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getRuleAsyncWithHttpInfo
     *
     * Retrieve one Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRule"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Rule";
        $request = $this->getRuleRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRule'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRuleRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRule"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRule'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRule'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRule'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRule'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling getRule'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRuleComponent
     *
     * Retrieve one RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent
     */
    public function getRuleComponent(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponent"][0]
    ) {
        list($response) = $this->getRuleComponentWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getRuleComponentWithHttpInfo
     *
     * Retrieve one RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRuleComponentWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponent"][0]
    ) {
        $request = $this->getRuleComponentRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\RuleComponent" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\RuleComponent" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\RuleComponent",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\RuleComponent";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\RuleComponent",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRuleComponentAsync
     *
     * Retrieve one RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleComponentAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponent"][0]
    ) {
        return $this->getRuleComponentAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getRuleComponentAsyncWithHttpInfo
     *
     * Retrieve one RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleComponentAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponent"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\RuleComponent";
        $request = $this->getRuleComponentRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRuleComponent'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRuleComponentRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponent"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRuleComponent'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRuleComponent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRuleComponent'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRuleComponent'
            );
        }

        // verify the required parameter 'rule_pk' is set
        if (
            $rule_pk === null ||
            (is_array($rule_pk) && count($rule_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling getRuleComponent'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling getRuleComponent'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                "{" . "rule_pk" . "}",
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRuleComponents
     *
     * Retrieve all RuleComponents
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent[]
     */
    public function getRuleComponents(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponents"][0]
    ) {
        list($response) = $this->getRuleComponentsWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getRuleComponentsWithHttpInfo
     *
     * Retrieve all RuleComponents
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRuleComponentsWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponents"][0]
    ) {
        $request = $this->getRuleComponentsRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\RuleComponent[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\RuleComponent[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\RuleComponent[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\RuleComponent[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\RuleComponent[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRuleComponentsAsync
     *
     * Retrieve all RuleComponents
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleComponentsAsync(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponents"][0]
    ) {
        return $this->getRuleComponentsAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getRuleComponentsAsyncWithHttpInfo
     *
     * Retrieve all RuleComponents
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRuleComponentsAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponents"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\RuleComponent[]";
        $request = $this->getRuleComponentsRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRuleComponents'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleComponents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRuleComponentsRequest(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRuleComponents"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRuleComponents'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRuleComponents'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRuleComponents'
            );
        }

        // verify the required parameter 'rule_pk' is set
        if (
            $rule_pk === null ||
            (is_array($rule_pk) && count($rule_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling getRuleComponents'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling getRuleComponents'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                "{" . "rule_pk" . "}",
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRules
     *
     * Retrieve all Rules
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule[]
     */
    public function getRules(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRules"][0]
    ) {
        list($response) = $this->getRulesWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getRulesWithHttpInfo
     *
     * Retrieve all Rules
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRules'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRulesWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRules"][0]
    ) {
        $request = $this->getRulesRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Rule[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Rule[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Rule[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Rule[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Rule[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRulesAsync
     *
     * Retrieve all Rules
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesAsync(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRules"][0]
    ) {
        return $this->getRulesAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getRulesAsyncWithHttpInfo
     *
     * Retrieve all Rules
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRules"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Rule[]";
        $request = $this->getRulesRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $ruleset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRules'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRulesRequest(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        $ruleset_pk,
        string $contentType = self::contentTypes["getRules"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRules'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRules'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRules'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling getRules'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRuleset
     *
     * Retrieve one Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset
     */
    public function getRuleset(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getRuleset"][0]
    ) {
        list($response) = $this->getRulesetWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getRulesetWithHttpInfo
     *
     * Retrieve one Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRulesetWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getRuleset"][0]
    ) {
        $request = $this->getRulesetRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Ruleset" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Ruleset" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Ruleset",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Ruleset";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Ruleset",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRulesetAsync
     *
     * Retrieve one Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesetAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getRuleset"][0]
    ) {
        return $this->getRulesetAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getRulesetAsyncWithHttpInfo
     *
     * Retrieve one Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesetAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getRuleset"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Ruleset";
        $request = $this->getRulesetRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRuleset'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRulesetRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getRuleset"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRuleset'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRuleset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getRuleset'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRuleset'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRulesets
     *
     * Retrieve all Rulesets
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRulesets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset[]
     */
    public function getRulesets(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRulesets"][0]
    ) {
        list($response) = $this->getRulesetsWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getRulesetsWithHttpInfo
     *
     * Retrieve all Rulesets
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRulesets'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRulesetsWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRulesets"][0]
    ) {
        $request = $this->getRulesetsRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Ruleset[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Ruleset[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Ruleset[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Ruleset[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Ruleset[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRulesetsAsync
     *
     * Retrieve all Rulesets
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRulesets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesetsAsync(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRulesets"][0]
    ) {
        return $this->getRulesetsAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getRulesetsAsyncWithHttpInfo
     *
     * Retrieve all Rulesets
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRulesets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRulesetsAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRulesets"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Ruleset[]";
        $request = $this->getRulesetsRequest(
            $check_plan_pk,
            $cloud_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRulesets'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRulesets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRulesetsRequest(
        $check_plan_pk,
        $cloud_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRulesets"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling getRulesets'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRulesets'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRulesets'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation launchNewCheck
     *
     * Launch a new check on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheck'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function launchNewCheck(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheck"][0]
    ) {
        $this->launchNewCheckWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );
    }

    /**
     * Operation launchNewCheckWithHttpInfo
     *
     * Launch a new check on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheck'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function launchNewCheckWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheck"][0]
    ) {
        $request = $this->launchNewCheckRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation launchNewCheckAsync
     *
     * Launch a new check on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheck'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function launchNewCheckAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheck"][0]
    ) {
        return $this->launchNewCheckAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation launchNewCheckAsyncWithHttpInfo
     *
     * Launch a new check on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheck'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function launchNewCheckAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheck"][0]
    ) {
        $returnType = "";
        $request = $this->launchNewCheckRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'launchNewCheck'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheck'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function launchNewCheckRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheck"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling launchNewCheck'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling launchNewCheck'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling launchNewCheck'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling launchNewCheck'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}/launch-check";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_checker_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_checker_request
                    )
                );
            } else {
                $httpBody = $ifc_checker_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChecker
     *
     * Update some fields of a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChecker'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     */
    public function updateChecker(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateChecker"][0]
    ) {
        list($response) = $this->updateCheckerWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_ifc_checker_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateCheckerWithHttpInfo
     *
     * Update some fields of a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChecker'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCheckerWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateChecker"][0]
    ) {
        $request = $this->updateCheckerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_ifc_checker_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcChecker" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcChecker" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcChecker",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcChecker";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcChecker",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCheckerAsync
     *
     * Update some fields of a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckerAsync(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateChecker"][0]
    ) {
        return $this->updateCheckerAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_ifc_checker_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCheckerAsyncWithHttpInfo
     *
     * Update some fields of a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckerAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateChecker"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcChecker";
        $request = $this->updateCheckerRequest(
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_ifc_checker_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChecker'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChecker'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCheckerRequest(
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateChecker"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateChecker'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateChecker'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateChecker'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateChecker'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_ifc_checker_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_ifc_checker_request
                    )
                );
            } else {
                $httpBody = $patched_ifc_checker_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCheckerResult
     *
     * Update some fields of a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     */
    public function updateCheckerResult(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes["updateCheckerResult"][0]
    ) {
        list($response) = $this->updateCheckerResultWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_checker_result_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateCheckerResultWithHttpInfo
     *
     * Update some fields of a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResult'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCheckerResultWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes["updateCheckerResult"][0]
    ) {
        $request = $this->updateCheckerResultRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_checker_result_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckerResult" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CheckerResult" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckerResult",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckerResult";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckerResult",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCheckerResultAsync
     *
     * Update some fields of a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckerResultAsync(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes["updateCheckerResult"][0]
    ) {
        return $this->updateCheckerResultAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_checker_result_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCheckerResultAsyncWithHttpInfo
     *
     * Update some fields of a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckerResultAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes["updateCheckerResult"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckerResult";
        $request = $this->updateCheckerResultRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $model_pk,
            $project_pk,
            $patched_checker_result_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCheckerResult'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $model_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResult'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCheckerResultRequest(
        $checker_pk,
        $cloud_pk,
        $id,
        $model_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes["updateCheckerResult"][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling updateCheckerResult'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateCheckerResult'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCheckerResult'
            );
        }

        // verify the required parameter 'model_pk' is set
        if (
            $model_pk === null ||
            (is_array($model_pk) && count($model_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_pk when calling updateCheckerResult'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateCheckerResult'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/model/{model_pk}/checker/{checker_pk}/result/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($model_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_pk" . "}",
                ObjectSerializer::toPathValue($model_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_checker_result_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_checker_result_request
                    )
                );
            } else {
                $httpBody = $patched_checker_result_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCheckplan
     *
     * Update some fields of a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckPlanRequest $patched_check_plan_request patched_check_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckplan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckPlan
     */
    public function updateCheckplan(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_check_plan_request = null,
        string $contentType = self::contentTypes["updateCheckplan"][0]
    ) {
        list($response) = $this->updateCheckplanWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_check_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateCheckplanWithHttpInfo
     *
     * Update some fields of a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckPlanRequest $patched_check_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckplan'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCheckplanWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_check_plan_request = null,
        string $contentType = self::contentTypes["updateCheckplan"][0]
    ) {
        $request = $this->updateCheckplanRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_check_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckPlan" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\CheckPlan" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCheckplanAsync
     *
     * Update some fields of a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckPlanRequest $patched_check_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckplanAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_check_plan_request = null,
        string $contentType = self::contentTypes["updateCheckplan"][0]
    ) {
        return $this->updateCheckplanAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_check_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCheckplanAsyncWithHttpInfo
     *
     * Update some fields of a Checkplan
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckPlanRequest $patched_check_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCheckplanAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_check_plan_request = null,
        string $contentType = self::contentTypes["updateCheckplan"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckPlan";
        $request = $this->updateCheckplanRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_check_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCheckplan'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this check plan. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckPlanRequest $patched_check_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckplan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCheckplanRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_check_plan_request = null,
        string $contentType = self::contentTypes["updateCheckplan"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateCheckplan'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCheckplan'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateCheckplan'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_check_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_check_plan_request
                    )
                );
            } else {
                $httpBody = $patched_check_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRule
     *
     * Update some fields of a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleRequest $patched_rule_request patched_rule_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Rule
     */
    public function updateRule(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        $patched_rule_request = null,
        string $contentType = self::contentTypes["updateRule"][0]
    ) {
        list($response) = $this->updateRuleWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $patched_rule_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateRuleWithHttpInfo
     *
     * Update some fields of a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleRequest $patched_rule_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRule'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Rule, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRuleWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        $patched_rule_request = null,
        string $contentType = self::contentTypes["updateRule"][0]
    ) {
        $request = $this->updateRuleRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $patched_rule_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Rule" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Rule" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Rule",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Rule";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Rule",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRuleAsync
     *
     * Update some fields of a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleRequest $patched_rule_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRuleAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        $patched_rule_request = null,
        string $contentType = self::contentTypes["updateRule"][0]
    ) {
        return $this->updateRuleAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $patched_rule_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateRuleAsyncWithHttpInfo
     *
     * Update some fields of a Rule
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleRequest $patched_rule_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRuleAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        $patched_rule_request = null,
        string $contentType = self::contentTypes["updateRule"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Rule";
        $request = $this->updateRuleRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $ruleset_pk,
            $patched_rule_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRule'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleRequest $patched_rule_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRule'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRuleRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $ruleset_pk,
        $patched_rule_request = null,
        string $contentType = self::contentTypes["updateRule"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling updateRule'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateRule'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateRule'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateRule'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling updateRule'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_rule_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_rule_request
                    )
                );
            } else {
                $httpBody = $patched_rule_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRuleComponent
     *
     * Update some fields of a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleComponentRequest $patched_rule_component_request patched_rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleComponent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RuleComponent
     */
    public function updateRuleComponent(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $patched_rule_component_request = null,
        string $contentType = self::contentTypes["updateRuleComponent"][0]
    ) {
        list($response) = $this->updateRuleComponentWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $patched_rule_component_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateRuleComponentWithHttpInfo
     *
     * Update some fields of a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleComponentRequest $patched_rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleComponent'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RuleComponent, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRuleComponentWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $patched_rule_component_request = null,
        string $contentType = self::contentTypes["updateRuleComponent"][0]
    ) {
        $request = $this->updateRuleComponentRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $patched_rule_component_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\RuleComponent" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\RuleComponent" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\RuleComponent",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\RuleComponent";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\RuleComponent",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRuleComponentAsync
     *
     * Update some fields of a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleComponentRequest $patched_rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRuleComponentAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $patched_rule_component_request = null,
        string $contentType = self::contentTypes["updateRuleComponent"][0]
    ) {
        return $this->updateRuleComponentAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $patched_rule_component_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateRuleComponentAsyncWithHttpInfo
     *
     * Update some fields of a RuleComponent
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleComponentRequest $patched_rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRuleComponentAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $patched_rule_component_request = null,
        string $contentType = self::contentTypes["updateRuleComponent"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\RuleComponent";
        $request = $this->updateRuleComponentRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $rule_pk,
            $ruleset_pk,
            $patched_rule_component_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRuleComponent'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this rule component. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $rule_pk A unique integer value identifying this rule. (required)
     * @param  int $ruleset_pk A unique integer value identifying this ruleset. (required)
     * @param  \OpenAPI\Client\Model\PatchedRuleComponentRequest $patched_rule_component_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleComponent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRuleComponentRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $rule_pk,
        $ruleset_pk,
        $patched_rule_component_request = null,
        string $contentType = self::contentTypes["updateRuleComponent"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling updateRuleComponent'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateRuleComponent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateRuleComponent'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateRuleComponent'
            );
        }

        // verify the required parameter 'rule_pk' is set
        if (
            $rule_pk === null ||
            (is_array($rule_pk) && count($rule_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rule_pk when calling updateRuleComponent'
            );
        }

        // verify the required parameter 'ruleset_pk' is set
        if (
            $ruleset_pk === null ||
            (is_array($ruleset_pk) && count($ruleset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ruleset_pk when calling updateRuleComponent'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{ruleset_pk}/rule/{rule_pk}/rulecomponent/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($rule_pk !== null) {
            $resourcePath = str_replace(
                "{" . "rule_pk" . "}",
                ObjectSerializer::toPathValue($rule_pk),
                $resourcePath
            );
        }
        // path params
        if ($ruleset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ruleset_pk" . "}",
                ObjectSerializer::toPathValue($ruleset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_rule_component_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_rule_component_request
                    )
                );
            } else {
                $httpBody = $patched_rule_component_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRuleset
     *
     * Update some fields of a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedRulesetRequest $patched_ruleset_request patched_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Ruleset
     */
    public function updateRuleset(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $patched_ruleset_request = null,
        string $contentType = self::contentTypes["updateRuleset"][0]
    ) {
        list($response) = $this->updateRulesetWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $patched_ruleset_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateRulesetWithHttpInfo
     *
     * Update some fields of a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedRulesetRequest $patched_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Ruleset, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRulesetWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $patched_ruleset_request = null,
        string $contentType = self::contentTypes["updateRuleset"][0]
    ) {
        $request = $this->updateRulesetRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $patched_ruleset_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Ruleset" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Ruleset" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Ruleset",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Ruleset";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Ruleset",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRulesetAsync
     *
     * Update some fields of a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedRulesetRequest $patched_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRulesetAsync(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $patched_ruleset_request = null,
        string $contentType = self::contentTypes["updateRuleset"][0]
    ) {
        return $this->updateRulesetAsyncWithHttpInfo(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $patched_ruleset_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateRulesetAsyncWithHttpInfo
     *
     * Update some fields of a Ruleset
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedRulesetRequest $patched_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRulesetAsyncWithHttpInfo(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $patched_ruleset_request = null,
        string $contentType = self::contentTypes["updateRuleset"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Ruleset";
        $request = $this->updateRulesetRequest(
            $check_plan_pk,
            $cloud_pk,
            $id,
            $project_pk,
            $patched_ruleset_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRuleset'
     *
     * @param  int $check_plan_pk A unique integer value identifying this check plan. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ruleset. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedRulesetRequest $patched_ruleset_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRuleset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRulesetRequest(
        $check_plan_pk,
        $cloud_pk,
        $id,
        $project_pk,
        $patched_ruleset_request = null,
        string $contentType = self::contentTypes["updateRuleset"][0]
    ) {
        // verify the required parameter 'check_plan_pk' is set
        if (
            $check_plan_pk === null ||
            (is_array($check_plan_pk) && count($check_plan_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $check_plan_pk when calling updateRuleset'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateRuleset'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateRuleset'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateRuleset'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/checkplan/{check_plan_pk}/ruleset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($check_plan_pk !== null) {
            $resourcePath = str_replace(
                "{" . "check_plan_pk" . "}",
                ObjectSerializer::toPathValue($check_plan_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_ruleset_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_ruleset_request
                    )
                );
            } else {
                $httpBody = $patched_ruleset_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                "a"
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    "Failed to open the debug file: " .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
