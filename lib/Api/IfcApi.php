<?php
/**
 * IfcApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * IfcApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IfcApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        "addIfcErrorsDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "bulkDeleteIfcClassificationsDeprecated" => ["application/json"],
        "bulkDeleteIfcPropertiesDeprecated" => ["application/json"],
        "bulkDeleteIfcPropertyDefinitionsDeprecated" => ["application/json"],
        "bulkDeleteIfcUnitsDeprecated" => ["application/json"],
        "bulkDeletePropertySetDeprecated" => ["application/json"],
        "bulkFullUpdateElementsDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "bulkFullUpdateIfcPropertyDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "bulkRemoveClassificationsOfElementDeprecated" => ["application/json"],
        "bulkRemoveDocumentsOfElementDeprecated" => ["application/json"],
        "bulkRemoveElementsFromClassificationDeprecated" => [
            "application/json",
        ],
        "bulkUpdateElementsDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "bulkUpdateIfcPropertyDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createAccessTokenDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createBuildingDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createBuildingPlanDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createCheckerDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createCheckerResultDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createClassificationElementRelationsDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createClassificationsOfElementDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementPropertySetDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementPropertySetPropertyDefinitionDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementPropertySetPropertyDefinitionUnitDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createElementPropertySetPropertyDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createIfcDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createIfcPropertyDefinitionDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createIfcUnitDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createLayerDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createMetaBuildingDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createPropertySetDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createPropertySetElementRelationsDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createRawElementsDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createSpaceDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createStoreyDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createStoreyPlanDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createSystemDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createTilesetDeprecated" => ["application/json"],
        "createZoneDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "createZoneSpaceDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "deleteAccessTokenDeprecated" => ["application/json"],
        "deleteBuildingDeprecated" => ["application/json"],
        "deleteBuildingPlanDeprecated" => ["application/json"],
        "deleteCheckerDeprecated" => ["application/json"],
        "deleteCheckerResultDeprecated" => ["application/json"],
        "deleteElementDeprecated" => ["application/json"],
        "deleteIfcDeprecated" => ["application/json"],
        "deleteIfcPropertyDefinitionDeprecated" => ["application/json"],
        "deleteIfcPropertyDeprecated" => ["application/json"],
        "deleteIfcUnitDeprecated" => ["application/json"],
        "deleteIfcWithoutDocDeprecated" => ["application/json"],
        "deleteLayerDeprecated" => ["application/json"],
        "deletePropertySetDeprecated" => ["application/json"],
        "deleteSpaceDeprecated" => ["application/json"],
        "deleteStoreyDeprecated" => ["application/json"],
        "deleteStoreyPlanDeprecated" => ["application/json"],
        "deleteSystemDeprecated" => ["application/json"],
        "deleteZoneDeprecated" => ["application/json"],
        "deleteZoneSpaceDeprecated" => ["application/json"],
        "exportIfcDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "fullUpdateElementDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "getAccessTokenDeprecated" => ["application/json"],
        "getAccessTokensDeprecated" => ["application/json"],
        "getBuildingDeprecated" => ["application/json"],
        "getBuildingPlanPositioningDeprecated" => ["application/json"],
        "getBuildingsDeprecated" => ["application/json"],
        "getCheckerDeprecated" => ["application/json"],
        "getCheckerResultDeprecated" => ["application/json"],
        "getCheckerResultsDeprecated" => ["application/json"],
        "getCheckersDeprecated" => ["application/json"],
        "getClassificationsOfElementDeprecated" => ["application/json"],
        "getDocumentsOfElementDeprecated" => ["application/json"],
        "getElementDeprecated" => ["application/json"],
        "getElementLinkedDocumentsDeprecated" => ["application/json"],
        "getElementPropertySetDeprecated" => ["application/json"],
        "getElementPropertySetPropertiesDeprecated" => ["application/json"],
        "getElementPropertySetPropertyDefinitionDeprecated" => [
            "application/json",
        ],
        "getElementPropertySetPropertyDefinitionUnitDeprecated" => [
            "application/json",
        ],
        "getElementPropertySetPropertyDefinitionUnitsDeprecated" => [
            "application/json",
        ],
        "getElementPropertySetPropertyDefinitionsDeprecated" => [
            "application/json",
        ],
        "getElementPropertySetPropertyDeprecated" => ["application/json"],
        "getElementPropertySetsDeprecated" => ["application/json"],
        "getElementsDeprecated" => ["application/json"],
        "getElementsFromClassificationDeprecated" => ["application/json"],
        "getIfcClassificationsDeprecated" => ["application/json"],
        "getIfcDeprecated" => ["application/json"],
        "getIfcMaterialDeprecated" => ["application/json"],
        "getIfcMaterialsDeprecated" => ["application/json"],
        "getIfcPropertiesDeprecated" => ["application/json"],
        "getIfcPropertyDefinitionDeprecated" => ["application/json"],
        "getIfcPropertyDefinitionsDeprecated" => ["application/json"],
        "getIfcPropertyDeprecated" => ["application/json"],
        "getIfcUnitDeprecated" => ["application/json"],
        "getIfcUnitsDeprecated" => ["application/json"],
        "getIfcsDeprecated" => ["application/json"],
        "getLayerDeprecated" => ["application/json"],
        "getLayersDeprecated" => ["application/json"],
        "getMaterialDeprecated" => ["application/json"],
        "getMaterialsDeprecated" => ["application/json"],
        "getProcessorHandlerDeprecated" => ["application/json"],
        "getProcessorHandlersDeprecated" => ["application/json"],
        "getPropertySetDeprecated" => ["application/json"],
        "getPropertySetsDeprecated" => ["application/json"],
        "getRawElementsDeprecated" => ["application/json"],
        "getSimpleElementDeprecated" => ["application/json"],
        "getSimpleElementsDeprecated" => ["application/json"],
        "getSpaceDeprecated" => ["application/json"],
        "getSpacesDeprecated" => ["application/json"],
        "getStoreyDeprecated" => ["application/json"],
        "getStoreyPlanPositioningDeprecated" => ["application/json"],
        "getStoreysDeprecated" => ["application/json"],
        "getSystemDeprecated" => ["application/json"],
        "getSystemsDeprecated" => ["application/json"],
        "getTilesetDeprecated" => ["application/json"],
        "getZoneDeprecated" => ["application/json"],
        "getZoneSpaceDeprecated" => ["application/json"],
        "getZoneSpacesDeprecated" => ["application/json"],
        "getZonesDeprecated" => ["application/json"],
        "launchNewCheckDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "linkDocumentsOfElementDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "listClassificationElementRelationsDeprecated" => ["application/json"],
        "mergeIfcsDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "optimizeIfcDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "removeAllElementPropertySetDeprecated" => ["application/json"],
        "removeClassificationOfElementDeprecated" => ["application/json"],
        "removeDocumentOfElementDeprecated" => ["application/json"],
        "removeElementPropertySetDeprecated" => ["application/json"],
        "removeElementPropertySetPropertyDefinitionDeprecated" => [
            "application/json",
        ],
        "removeElementPropertySetPropertyDefinitionUnitDeprecated" => [
            "application/json",
        ],
        "removeElementPropertySetPropertyDeprecated" => ["application/json"],
        "removeElementsFromClassificationDeprecated" => ["application/json"],
        "reprocessIfcDeprecated" => ["application/json"],
        "updateAccessTokenDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateBuildingDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateBuildingPlanPositioningDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateCheckerDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateCheckerResultDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateElementDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateElementPropertySetPropertyDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateIfcDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateIfcFilesDeprecated" => [
            "multipart/form-data",
            "application/x-www-form-urlencoded",
        ],
        "updateIfcPropertyDefinitionDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateIfcPropertyDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateIfcUnitDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateLayerDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateOrderBuildingPlanDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateOrderStoreyPlanDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateOrderStoreysDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateProcessorHandlerDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updatePropertySetDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateSpaceDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateStoreyDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateStoreyPlanPositioningDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateSystemDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateZoneDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
        "updateZoneSpaceDeprecated" => [
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data",
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addIfcErrorsDeprecated
     *
     * Add errors to model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIfcErrorsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelErrors
     * @deprecated
     */
    public function addIfcErrorsDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addIfcErrorsDeprecated"][0]
    ) {
        list($response) = $this->addIfcErrorsDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $model_errors_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation addIfcErrorsDeprecatedWithHttpInfo
     *
     * Add errors to model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIfcErrorsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelErrors, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function addIfcErrorsDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addIfcErrorsDeprecated"][0]
    ) {
        $request = $this->addIfcErrorsDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $model_errors_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ModelErrors" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ModelErrors" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ModelErrors",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ModelErrors";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ModelErrors",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addIfcErrorsDeprecatedAsync
     *
     * Add errors to model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIfcErrorsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function addIfcErrorsDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addIfcErrorsDeprecated"][0]
    ) {
        return $this->addIfcErrorsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $model_errors_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addIfcErrorsDeprecatedAsyncWithHttpInfo
     *
     * Add errors to model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIfcErrorsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function addIfcErrorsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addIfcErrorsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ModelErrors";
        $request = $this->addIfcErrorsDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $model_errors_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addIfcErrorsDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\ModelErrorsRequest $model_errors_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addIfcErrorsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function addIfcErrorsDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $model_errors_request = null,
        string $contentType = self::contentTypes["addIfcErrorsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling addIfcErrorsDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addIfcErrorsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling addIfcErrorsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/errors";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($model_errors_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $model_errors_request
                    )
                );
            } else {
                $httpBody = $model_errors_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteIfcClassificationsDeprecated
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $ifc_pk ifc_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function bulkDeleteIfcClassificationsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcClassificationsDeprecated"
        ][0]
    ) {
        $this->bulkDeleteIfcClassificationsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeleteIfcClassificationsDeprecatedWithHttpInfo
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkDeleteIfcClassificationsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcClassificationsDeprecated"
        ][0]
    ) {
        $request = $this->bulkDeleteIfcClassificationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIfcClassificationsDeprecatedAsync
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeleteIfcClassificationsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcClassificationsDeprecated"
        ][0]
    ) {
        return $this->bulkDeleteIfcClassificationsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeleteIfcClassificationsDeprecatedAsyncWithHttpInfo
     *
     * Remove all classifications from model&#39;s elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeleteIfcClassificationsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcClassificationsDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeleteIfcClassificationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIfcClassificationsDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkDeleteIfcClassificationsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcClassificationsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteIfcClassificationsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeleteIfcClassificationsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteIfcClassificationsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/list_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteIfcPropertiesDeprecated
     *
     * Delete many Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function bulkDeleteIfcPropertiesDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertiesDeprecated"
        ][0]
    ) {
        $this->bulkDeleteIfcPropertiesDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeleteIfcPropertiesDeprecatedWithHttpInfo
     *
     * Delete many Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkDeleteIfcPropertiesDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertiesDeprecated"
        ][0]
    ) {
        $request = $this->bulkDeleteIfcPropertiesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIfcPropertiesDeprecatedAsync
     *
     * Delete many Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeleteIfcPropertiesDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertiesDeprecated"
        ][0]
    ) {
        return $this->bulkDeleteIfcPropertiesDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeleteIfcPropertiesDeprecatedAsyncWithHttpInfo
     *
     * Delete many Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeleteIfcPropertiesDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertiesDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeleteIfcPropertiesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIfcPropertiesDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkDeleteIfcPropertiesDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertiesDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteIfcPropertiesDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeleteIfcPropertiesDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteIfcPropertiesDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitionsDeprecated
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function bulkDeleteIfcPropertyDefinitionsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        $this->bulkDeleteIfcPropertyDefinitionsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitionsDeprecatedWithHttpInfo
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkDeleteIfcPropertyDefinitionsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        $request = $this->bulkDeleteIfcPropertyDefinitionsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitionsDeprecatedAsync
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeleteIfcPropertyDefinitionsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        return $this->bulkDeleteIfcPropertyDefinitionsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeleteIfcPropertyDefinitionsDeprecatedAsyncWithHttpInfo
     *
     * Delete many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeleteIfcPropertyDefinitionsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeleteIfcPropertyDefinitionsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIfcPropertyDefinitionsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkDeleteIfcPropertyDefinitionsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteIfcPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeleteIfcPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteIfcPropertyDefinitionsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeleteIfcUnitsDeprecated
     *
     * Delete many Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function bulkDeleteIfcUnitsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcUnitsDeprecated"
        ][0]
    ) {
        $this->bulkDeleteIfcUnitsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeleteIfcUnitsDeprecatedWithHttpInfo
     *
     * Delete many Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkDeleteIfcUnitsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcUnitsDeprecated"
        ][0]
    ) {
        $request = $this->bulkDeleteIfcUnitsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeleteIfcUnitsDeprecatedAsync
     *
     * Delete many Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeleteIfcUnitsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcUnitsDeprecated"
        ][0]
    ) {
        return $this->bulkDeleteIfcUnitsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeleteIfcUnitsDeprecatedAsyncWithHttpInfo
     *
     * Delete many Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeleteIfcUnitsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcUnitsDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeleteIfcUnitsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeleteIfcUnitsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeleteIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkDeleteIfcUnitsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeleteIfcUnitsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeleteIfcUnitsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeleteIfcUnitsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeleteIfcUnitsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkDeletePropertySetDeprecated
     *
     * Delete many PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function bulkDeletePropertySetDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeletePropertySetDeprecated"
        ][0]
    ) {
        $this->bulkDeletePropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkDeletePropertySetDeprecatedWithHttpInfo
     *
     * Delete many PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkDeletePropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeletePropertySetDeprecated"
        ][0]
    ) {
        $request = $this->bulkDeletePropertySetDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkDeletePropertySetDeprecatedAsync
     *
     * Delete many PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeletePropertySetDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeletePropertySetDeprecated"
        ][0]
    ) {
        return $this->bulkDeletePropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkDeletePropertySetDeprecatedAsyncWithHttpInfo
     *
     * Delete many PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkDeletePropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeletePropertySetDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkDeletePropertySetDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkDeletePropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkDeletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkDeletePropertySetDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkDeletePropertySetDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkDeletePropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkDeletePropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkDeletePropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkFullUpdateElementsDeprecated
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request element_request (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     * @deprecated
     */
    public function bulkFullUpdateElementsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkFullUpdateElementsDeprecated"
        ][0]
    ) {
        list($response) = $this->bulkFullUpdateElementsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation bulkFullUpdateElementsDeprecatedWithHttpInfo
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkFullUpdateElementsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkFullUpdateElementsDeprecated"
        ][0]
    ) {
        $request = $this->bulkFullUpdateElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkFullUpdateElementsDeprecatedAsync
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkFullUpdateElementsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkFullUpdateElementsDeprecated"
        ][0]
    ) {
        return $this->bulkFullUpdateElementsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkFullUpdateElementsDeprecatedAsyncWithHttpInfo
     *
     * Update many elements at once (only changing fields may be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkFullUpdateElementsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkFullUpdateElementsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->bulkFullUpdateElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkFullUpdateElementsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkFullUpdateElementsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkFullUpdateElementsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkFullUpdateElementsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkFullUpdateElementsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkFullUpdateElementsDeprecated'
            );
        }

        // verify the required parameter 'element_request' is set
        if (
            $element_request === null ||
            (is_array($element_request) && count($element_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_request when calling bulkFullUpdateElementsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($element_request)
                );
            } else {
                $httpBody = $element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkFullUpdateIfcPropertyDeprecated
     *
     * Update some fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     * @deprecated
     */
    public function bulkFullUpdateIfcPropertyDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->bulkFullUpdateIfcPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation bulkFullUpdateIfcPropertyDeprecatedWithHttpInfo
     *
     * Update some fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkFullUpdateIfcPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        $request = $this->bulkFullUpdateIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Property[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkFullUpdateIfcPropertyDeprecatedAsync
     *
     * Update some fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkFullUpdateIfcPropertyDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        return $this->bulkFullUpdateIfcPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkFullUpdateIfcPropertyDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkFullUpdateIfcPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property[]";
        $request = $this->bulkFullUpdateIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkFullUpdateIfcPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkFullUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkFullUpdateIfcPropertyDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkFullUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkFullUpdateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkFullUpdateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkFullUpdateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'property_request' is set
        if (
            $property_request === null ||
            (is_array($property_request) && count($property_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_request when calling bulkFullUpdateIfcPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_request
                    )
                );
            } else {
                $httpBody = $property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkRemoveClassificationsOfElementDeprecated
     *
     * Remove many classifications from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function bulkRemoveClassificationsOfElementDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElementDeprecated"
        ][0]
    ) {
        $this->bulkRemoveClassificationsOfElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkRemoveClassificationsOfElementDeprecatedWithHttpInfo
     *
     * Remove many classifications from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkRemoveClassificationsOfElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElementDeprecated"
        ][0]
    ) {
        $request = $this->bulkRemoveClassificationsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkRemoveClassificationsOfElementDeprecatedAsync
     *
     * Remove many classifications from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkRemoveClassificationsOfElementDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElementDeprecated"
        ][0]
    ) {
        return $this->bulkRemoveClassificationsOfElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkRemoveClassificationsOfElementDeprecatedAsyncWithHttpInfo
     *
     * Remove many classifications from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkRemoveClassificationsOfElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElementDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkRemoveClassificationsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkRemoveClassificationsOfElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkRemoveClassificationsOfElementDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveClassificationsOfElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkRemoveClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling bulkRemoveClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkRemoveClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkRemoveClassificationsOfElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkRemoveDocumentsOfElementDeprecated
     *
     * Remove many documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function bulkRemoveDocumentsOfElementDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElementDeprecated"
        ][0]
    ) {
        $this->bulkRemoveDocumentsOfElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkRemoveDocumentsOfElementDeprecatedWithHttpInfo
     *
     * Remove many documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkRemoveDocumentsOfElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElementDeprecated"
        ][0]
    ) {
        $request = $this->bulkRemoveDocumentsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkRemoveDocumentsOfElementDeprecatedAsync
     *
     * Remove many documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkRemoveDocumentsOfElementDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElementDeprecated"
        ][0]
    ) {
        return $this->bulkRemoveDocumentsOfElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkRemoveDocumentsOfElementDeprecatedAsyncWithHttpInfo
     *
     * Remove many documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkRemoveDocumentsOfElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElementDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkRemoveDocumentsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkRemoveDocumentsOfElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkRemoveDocumentsOfElementDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveDocumentsOfElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkRemoveDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling bulkRemoveDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkRemoveDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkRemoveDocumentsOfElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkRemoveElementsFromClassificationDeprecated
     *
     * Remove the classifications from all elements
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function bulkRemoveElementsFromClassificationDeprecated(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassificationDeprecated"
        ][0]
    ) {
        $this->bulkRemoveElementsFromClassificationDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation bulkRemoveElementsFromClassificationDeprecatedWithHttpInfo
     *
     * Remove the classifications from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkRemoveElementsFromClassificationDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassificationDeprecated"
        ][0]
    ) {
        $request = $this->bulkRemoveElementsFromClassificationDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bulkRemoveElementsFromClassificationDeprecatedAsync
     *
     * Remove the classifications from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkRemoveElementsFromClassificationDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassificationDeprecated"
        ][0]
    ) {
        return $this->bulkRemoveElementsFromClassificationDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkRemoveElementsFromClassificationDeprecatedAsyncWithHttpInfo
     *
     * Remove the classifications from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkRemoveElementsFromClassificationDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassificationDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->bulkRemoveElementsFromClassificationDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkRemoveElementsFromClassificationDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkRemoveElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkRemoveElementsFromClassificationDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "bulkRemoveElementsFromClassificationDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkRemoveElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkRemoveElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'model_classification_pk' is set
        if (
            $model_classification_pk === null ||
            (is_array($model_classification_pk) &&
                count($model_classification_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_classification_pk when calling bulkRemoveElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkRemoveElementsFromClassificationDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/bulk_destroy";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_classification_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_classification_pk" . "}",
                ObjectSerializer::toPathValue($model_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateElementsDeprecated
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request element_request (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     * @deprecated
     */
    public function bulkUpdateElementsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkUpdateElementsDeprecated"
        ][0]
    ) {
        list($response) = $this->bulkUpdateElementsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation bulkUpdateElementsDeprecatedWithHttpInfo
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkUpdateElementsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkUpdateElementsDeprecated"
        ][0]
    ) {
        $request = $this->bulkUpdateElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateElementsDeprecatedAsync
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkUpdateElementsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkUpdateElementsDeprecated"
        ][0]
    ) {
        return $this->bulkUpdateElementsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkUpdateElementsDeprecatedAsyncWithHttpInfo
     *
     * Update many elements at once (all field must be defined)
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkUpdateElementsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkUpdateElementsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->bulkUpdateElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateElementsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkUpdateElementsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "bulkUpdateElementsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkUpdateElementsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkUpdateElementsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkUpdateElementsDeprecated'
            );
        }

        // verify the required parameter 'element_request' is set
        if (
            $element_request === null ||
            (is_array($element_request) && count($element_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_request when calling bulkUpdateElementsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/bulk_update";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($element_request)
                );
            } else {
                $httpBody = $element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PUT",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bulkUpdateIfcPropertyDeprecated
     *
     * Update all fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     * @deprecated
     */
    public function bulkUpdateIfcPropertyDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        list($response) = $this->bulkUpdateIfcPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation bulkUpdateIfcPropertyDeprecatedWithHttpInfo
     *
     * Update all fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function bulkUpdateIfcPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        $request = $this->bulkUpdateIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Property[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bulkUpdateIfcPropertyDeprecatedAsync
     *
     * Update all fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkUpdateIfcPropertyDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        return $this->bulkUpdateIfcPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation bulkUpdateIfcPropertyDeprecatedAsyncWithHttpInfo
     *
     * Update all fields of many properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function bulkUpdateIfcPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property[]";
        $request = $this->bulkUpdateIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bulkUpdateIfcPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest[] $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['bulkUpdateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function bulkUpdateIfcPropertyDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "bulkUpdateIfcPropertyDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling bulkUpdateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling bulkUpdateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling bulkUpdateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'property_request' is set
        if (
            $property_request === null ||
            (is_array($property_request) && count($property_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_request when calling bulkUpdateIfcPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/bulk_update";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_request
                    )
                );
            } else {
                $httpBody = $property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PUT",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccessTokenDeprecated
     *
     * Create a token for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     * @deprecated
     */
    public function createAccessTokenDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "createAccessTokenDeprecated"
        ][0]
    ) {
        list($response) = $this->createAccessTokenDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $ifc_access_token_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createAccessTokenDeprecatedWithHttpInfo
     *
     * Create a token for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createAccessTokenDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "createAccessTokenDeprecated"
        ][0]
    ) {
        $request = $this->createAccessTokenDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $ifc_access_token_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\IfcAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\IfcAccessToken" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccessTokenDeprecatedAsync
     *
     * Create a token for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createAccessTokenDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "createAccessTokenDeprecated"
        ][0]
    ) {
        return $this->createAccessTokenDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $ifc_access_token_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createAccessTokenDeprecatedAsyncWithHttpInfo
     *
     * Create a token for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createAccessTokenDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "createAccessTokenDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
        $request = $this->createAccessTokenDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $ifc_access_token_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccessTokenDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcAccessTokenRequest $ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createAccessTokenDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "createAccessTokenDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createAccessTokenDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_access_token_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_access_token_request
                    )
                );
            } else {
                $httpBody = $ifc_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBuildingDeprecated
     *
     * Create a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building
     * @deprecated
     */
    public function createBuildingDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuildingDeprecated"][0]
    ) {
        list($response) = $this->createBuildingDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createBuildingDeprecatedWithHttpInfo
     *
     * Create a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createBuildingDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuildingDeprecated"][0]
    ) {
        $request = $this->createBuildingDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Building" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBuildingDeprecatedAsync
     *
     * Create a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createBuildingDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuildingDeprecated"][0]
    ) {
        return $this->createBuildingDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createBuildingDeprecatedAsyncWithHttpInfo
     *
     * Create a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createBuildingDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuildingDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building";
        $request = $this->createBuildingDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBuildingDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createBuildingDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createBuildingDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createBuildingDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createBuildingDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createBuildingDeprecated'
            );
        }

        // verify the required parameter 'storey_building_request' is set
        if (
            $storey_building_request === null ||
            (is_array($storey_building_request) &&
                count($storey_building_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_building_request when calling createBuildingDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($storey_building_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $storey_building_request
                    )
                );
            } else {
                $httpBody = $storey_building_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBuildingPlanDeprecated
     *
     * Create a relation between a 2d model and a building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building
     * @deprecated
     */
    public function createBuildingPlanDeprecated(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes[
            "createBuildingPlanDeprecated"
        ][0]
    ) {
        list($response) = $this->createBuildingPlanDeprecatedWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $building_model_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createBuildingPlanDeprecatedWithHttpInfo
     *
     * Create a relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createBuildingPlanDeprecatedWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes[
            "createBuildingPlanDeprecated"
        ][0]
    ) {
        $request = $this->createBuildingPlanDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $building_model_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Building" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBuildingPlanDeprecatedAsync
     *
     * Create a relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createBuildingPlanDeprecatedAsync(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes[
            "createBuildingPlanDeprecated"
        ][0]
    ) {
        return $this->createBuildingPlanDeprecatedAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $building_model_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createBuildingPlanDeprecatedAsyncWithHttpInfo
     *
     * Create a relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createBuildingPlanDeprecatedAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes[
            "createBuildingPlanDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building";
        $request = $this->createBuildingPlanDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $building_model_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBuildingPlanDeprecated'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\BuildingModelPlanRequest $building_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createBuildingPlanDeprecatedRequest(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $building_model_plan_request,
        string $contentType = self::contentTypes[
            "createBuildingPlanDeprecated"
        ][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling createBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'building_model_plan_request' is set
        if (
            $building_model_plan_request === null ||
            (is_array($building_model_plan_request) &&
                count($building_model_plan_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_model_plan_request when calling createBuildingPlanDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/add";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($building_model_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $building_model_plan_request
                    )
                );
            } else {
                $httpBody = $building_model_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCheckerDeprecated
     *
     * Create a checker to a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     * @deprecated
     */
    public function createCheckerDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createCheckerDeprecated"][0]
    ) {
        list($response) = $this->createCheckerDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createCheckerDeprecatedWithHttpInfo
     *
     * Create a checker to a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createCheckerDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createCheckerDeprecated"][0]
    ) {
        $request = $this->createCheckerDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\IfcChecker" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcChecker" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcChecker",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcChecker";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcChecker",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCheckerDeprecatedAsync
     *
     * Create a checker to a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createCheckerDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createCheckerDeprecated"][0]
    ) {
        return $this->createCheckerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createCheckerDeprecatedAsyncWithHttpInfo
     *
     * Create a checker to a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createCheckerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createCheckerDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcChecker";
        $request = $this->createCheckerDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCheckerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createCheckerDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["createCheckerDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createCheckerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createCheckerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createCheckerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_checker_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_checker_request
                    )
                );
            } else {
                $httpBody = $ifc_checker_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCheckerResultDeprecated
     *
     * Create a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     * @deprecated
     */
    public function createCheckerResultDeprecated(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes[
            "createCheckerResultDeprecated"
        ][0]
    ) {
        list($response) = $this->createCheckerResultDeprecatedWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $checker_result_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createCheckerResultDeprecatedWithHttpInfo
     *
     * Create a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createCheckerResultDeprecatedWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes[
            "createCheckerResultDeprecated"
        ][0]
    ) {
        $request = $this->createCheckerResultDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $checker_result_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\CheckerResult" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CheckerResult" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckerResult",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckerResult";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckerResult",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCheckerResultDeprecatedAsync
     *
     * Create a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createCheckerResultDeprecatedAsync(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes[
            "createCheckerResultDeprecated"
        ][0]
    ) {
        return $this->createCheckerResultDeprecatedAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $checker_result_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createCheckerResultDeprecatedAsyncWithHttpInfo
     *
     * Create a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createCheckerResultDeprecatedAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes[
            "createCheckerResultDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckerResult";
        $request = $this->createCheckerResultDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $checker_result_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCheckerResultDeprecated'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\CheckerResultRequest $checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createCheckerResultDeprecatedRequest(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $checker_result_request = null,
        string $contentType = self::contentTypes[
            "createCheckerResultDeprecated"
        ][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling createCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createCheckerResultDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($checker_result_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $checker_result_request
                    )
                );
            } else {
                $httpBody = $checker_result_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createClassificationElementRelationsDeprecated
     *
     * Create association between existing classification and existing element
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function createClassificationElementRelationsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelationsDeprecated"
        ][0]
    ) {
        $this->createClassificationElementRelationsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_classification_relation_request,
            $contentType
        );
    }

    /**
     * Operation createClassificationElementRelationsDeprecatedWithHttpInfo
     *
     * Create association between existing classification and existing element
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createClassificationElementRelationsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelationsDeprecated"
        ][0]
    ) {
        $request = $this->createClassificationElementRelationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_classification_relation_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createClassificationElementRelationsDeprecatedAsync
     *
     * Create association between existing classification and existing element
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createClassificationElementRelationsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelationsDeprecated"
        ][0]
    ) {
        return $this->createClassificationElementRelationsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_classification_relation_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createClassificationElementRelationsDeprecatedAsyncWithHttpInfo
     *
     * Create association between existing classification and existing element
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createClassificationElementRelationsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelationsDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->createClassificationElementRelationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_classification_relation_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClassificationElementRelationsDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementClassificationRelationRequest[] $element_classification_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createClassificationElementRelationsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_classification_relation_request,
        string $contentType = self::contentTypes[
            "createClassificationElementRelationsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createClassificationElementRelationsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createClassificationElementRelationsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createClassificationElementRelationsDeprecated'
            );
        }

        // verify the required parameter 'element_classification_relation_request' is set
        if (
            $element_classification_relation_request === null ||
            (is_array($element_classification_relation_request) &&
                count($element_classification_relation_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_classification_relation_request when calling createClassificationElementRelationsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_classification_relation_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $element_classification_relation_request
                    )
                );
            } else {
                $httpBody = $element_classification_relation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createClassificationsOfElementDeprecated
     *
     * Create one or many classifications to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     * @deprecated
     */
    public function createClassificationsOfElementDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElementDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->createClassificationsOfElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $classification_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createClassificationsOfElementDeprecatedWithHttpInfo
     *
     * Create one or many classifications to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createClassificationsOfElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElementDeprecated"
        ][0]
    ) {
        $request = $this->createClassificationsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $classification_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createClassificationsOfElementDeprecatedAsync
     *
     * Create one or many classifications to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createClassificationsOfElementDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElementDeprecated"
        ][0]
    ) {
        return $this->createClassificationsOfElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $classification_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createClassificationsOfElementDeprecatedAsyncWithHttpInfo
     *
     * Create one or many classifications to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createClassificationsOfElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElementDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification[]";
        $request = $this->createClassificationsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $classification_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClassificationsOfElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ClassificationRequest[] $classification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createClassificationsOfElementDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $classification_request,
        string $contentType = self::contentTypes[
            "createClassificationsOfElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'classification_request' is set
        if (
            $classification_request === null ||
            (is_array($classification_request) &&
                count($classification_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $classification_request when calling createClassificationsOfElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($classification_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $classification_request
                    )
                );
            } else {
                $httpBody = $classification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementDeprecated
     *
     * Create an element in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request element_request (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     * @deprecated
     */
    public function createElementDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElementDeprecated"][0]
    ) {
        list($response) = $this->createElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementDeprecatedWithHttpInfo
     *
     * Create an element in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElementDeprecated"][0]
    ) {
        $request = $this->createElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementDeprecatedAsync
     *
     * Create an element in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElementDeprecated"][0]
    ) {
        return $this->createElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementDeprecatedAsyncWithHttpInfo
     *
     * Create an element in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElementDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->createElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_request,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementRequest[] $element_request (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createElementDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_request,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["createElementDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementDeprecated'
            );
        }

        // verify the required parameter 'element_request' is set
        if (
            $element_request === null ||
            (is_array($element_request) && count($element_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_request when calling createElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($element_request)
                );
            } else {
                $httpBody = $element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetDeprecated
     *
     * Create a PropertySets to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     * @deprecated
     */
    public function createElementPropertySetDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetDeprecated"
        ][0]
    ) {
        list($response) = $this->createElementPropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementPropertySetDeprecatedWithHttpInfo
     *
     * Create a PropertySets to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createElementPropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetDeprecated"
        ][0]
    ) {
        $request = $this->createElementPropertySetDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\PropertySet" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\PropertySet" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetDeprecatedAsync
     *
     * Create a PropertySets to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementPropertySetDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetDeprecated"
        ][0]
    ) {
        return $this->createElementPropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_set_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementPropertySetDeprecatedAsyncWithHttpInfo
     *
     * Create a PropertySets to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementPropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet";
        $request = $this->createElementPropertySetDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest $property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createElementPropertySetDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_set_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_set_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_set_request
                    )
                );
            } else {
                $httpBody = $property_set_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionDeprecated
     *
     * Create a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->createElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $property_definition_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo
     *
     * Create a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        $request = $this->createElementPropertySetPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $property_definition_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionDeprecatedAsync
     *
     * Create a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        return $this->createElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $property_definition_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo
     *
     * Create a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
        $request = $this->createElementPropertySetPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $property_definition_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetPropertyDefinitionDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest $property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        $property_definition_request = null,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling createElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_definition_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_definition_request
                    )
                );
            } else {
                $httpBody = $property_definition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Create a Unit to a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionUnitDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->createElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $unit_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo
     *
     * Create a Unit to a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        $request = $this->createElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $unit_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Unit" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitDeprecatedAsync
     *
     * Create a Unit to a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionUnitDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        return $this->createElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $unit_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo
     *
     * Create a Unit to a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit";
        $request = $this->createElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $unit_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetPropertyDefinitionUnitDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        $unit_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling createElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'propertydefinition_pk' is set
        if (
            $propertydefinition_pk === null ||
            (is_array($propertydefinition_pk) &&
                count($propertydefinition_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling createElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'unit_request' is set
        if (
            $unit_request === null ||
            (is_array($unit_request) && count($unit_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_request when calling createElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertydefinition_pk" . "}",
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unit_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($unit_request)
                );
            } else {
                $httpBody = $unit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createElementPropertySetPropertyDeprecated
     *
     * Create a property to a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     * @deprecated
     */
    public function createElementPropertySetPropertyDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->createElementPropertySetPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createElementPropertySetPropertyDeprecatedWithHttpInfo
     *
     * Create a property to a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createElementPropertySetPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $request = $this->createElementPropertySetPropertyDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createElementPropertySetPropertyDeprecatedAsync
     *
     * Create a property to a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementPropertySetPropertyDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        return $this->createElementPropertySetPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createElementPropertySetPropertyDeprecatedAsyncWithHttpInfo
     *
     * Create a property to a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createElementPropertySetPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->createElementPropertySetPropertyDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createElementPropertySetPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PropertyRequest $property_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createElementPropertySetPropertyDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $property_request,
        string $contentType = self::contentTypes[
            "createElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling createElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling createElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'property_request' is set
        if (
            $property_request === null ||
            (is_array($property_request) && count($property_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_request when calling createElementPropertySetPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_request
                    )
                );
            } else {
                $httpBody = $property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createIfcDeprecated
     *
     * Make a PDF or Image file a Model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model
     * @deprecated
     */
    public function createIfcDeprecated(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createIfcDeprecated"][0]
    ) {
        list($response) = $this->createIfcDeprecatedWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $create_model_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createIfcDeprecatedWithHttpInfo
     *
     * Make a PDF or Image file a Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createIfcDeprecatedWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createIfcDeprecated"][0]
    ) {
        $request = $this->createIfcDeprecatedRequest(
            $cloud_pk,
            $project_pk,
            $create_model_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Model" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createIfcDeprecatedAsync
     *
     * Make a PDF or Image file a Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createIfcDeprecatedAsync(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createIfcDeprecated"][0]
    ) {
        return $this->createIfcDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $create_model_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createIfcDeprecatedAsyncWithHttpInfo
     *
     * Make a PDF or Image file a Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createIfcDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createIfcDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model";
        $request = $this->createIfcDeprecatedRequest(
            $cloud_pk,
            $project_pk,
            $create_model_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createIfcDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateModelRequest $create_model_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createIfcDeprecatedRequest(
        $cloud_pk,
        $project_pk,
        $create_model_request,
        string $contentType = self::contentTypes["createIfcDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createIfcDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createIfcDeprecated'
            );
        }

        // verify the required parameter 'create_model_request' is set
        if (
            $create_model_request === null ||
            (is_array($create_model_request) &&
                count($create_model_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_model_request when calling createIfcDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/create-model";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_model_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $create_model_request
                    )
                );
            } else {
                $httpBody = $create_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createIfcPropertyDefinitionDeprecated
     *
     * Create a PropertyDefinition on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     * @deprecated
     */
    public function createIfcPropertyDefinitionDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->createIfcPropertyDefinitionDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_definition_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createIfcPropertyDefinitionDeprecatedWithHttpInfo
     *
     * Create a PropertyDefinition on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createIfcPropertyDefinitionDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $request = $this->createIfcPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_definition_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createIfcPropertyDefinitionDeprecatedAsync
     *
     * Create a PropertyDefinition on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createIfcPropertyDefinitionDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        return $this->createIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_definition_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo
     *
     * Create a PropertyDefinition on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
        $request = $this->createIfcPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_definition_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createIfcPropertyDefinitionDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertyDefinitionRequest[] $property_definition_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createIfcPropertyDefinitionDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_definition_request,
        string $contentType = self::contentTypes[
            "createIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'property_definition_request' is set
        if (
            $property_definition_request === null ||
            (is_array($property_definition_request) &&
                count($property_definition_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_definition_request when calling createIfcPropertyDefinitionDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_definition_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_definition_request
                    )
                );
            } else {
                $httpBody = $property_definition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createIfcUnitDeprecated
     *
     * Create a Unit on a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     * @deprecated
     */
    public function createIfcUnitDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createIfcUnitDeprecated"][0]
    ) {
        list($response) = $this->createIfcUnitDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $unit_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createIfcUnitDeprecatedWithHttpInfo
     *
     * Create a Unit on a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createIfcUnitDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createIfcUnitDeprecated"][0]
    ) {
        $request = $this->createIfcUnitDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $unit_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createIfcUnitDeprecatedAsync
     *
     * Create a Unit on a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createIfcUnitDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createIfcUnitDeprecated"][0]
    ) {
        return $this->createIfcUnitDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $unit_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createIfcUnitDeprecatedAsyncWithHttpInfo
     *
     * Create a Unit on a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createIfcUnitDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createIfcUnitDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit[]";
        $request = $this->createIfcUnitDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $unit_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createIfcUnitDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\UnitRequest[] $unit_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createIfcUnitDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $unit_request,
        string $contentType = self::contentTypes["createIfcUnitDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'unit_request' is set
        if (
            $unit_request === null ||
            (is_array($unit_request) && count($unit_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit_request when calling createIfcUnitDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unit_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($unit_request)
                );
            } else {
                $httpBody = $unit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLayerDeprecated
     *
     * Create a layer in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     * @deprecated
     */
    public function createLayerDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayerDeprecated"][0]
    ) {
        list($response) = $this->createLayerDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $layer_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createLayerDeprecatedWithHttpInfo
     *
     * Create a layer in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createLayerDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayerDeprecated"][0]
    ) {
        $request = $this->createLayerDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $layer_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Layer" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Layer" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Layer",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Layer";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Layer",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLayerDeprecatedAsync
     *
     * Create a layer in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createLayerDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayerDeprecated"][0]
    ) {
        return $this->createLayerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $layer_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createLayerDeprecatedAsyncWithHttpInfo
     *
     * Create a layer in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createLayerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayerDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Layer";
        $request = $this->createLayerDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $layer_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLayerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\LayerRequest $layer_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createLayerDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $layer_request,
        string $contentType = self::contentTypes["createLayerDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createLayerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createLayerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createLayerDeprecated'
            );
        }

        // verify the required parameter 'layer_request' is set
        if (
            $layer_request === null ||
            (is_array($layer_request) && count($layer_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $layer_request when calling createLayerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($layer_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($layer_request)
                );
            } else {
                $httpBody = $layer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createMetaBuildingDeprecated
     *
     * Create an empty 3D Model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model
     * @deprecated
     */
    public function createMetaBuildingDeprecated(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes[
            "createMetaBuildingDeprecated"
        ][0]
    ) {
        list($response) = $this->createMetaBuildingDeprecatedWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $create_building_by_name_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createMetaBuildingDeprecatedWithHttpInfo
     *
     * Create an empty 3D Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createMetaBuildingDeprecatedWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes[
            "createMetaBuildingDeprecated"
        ][0]
    ) {
        $request = $this->createMetaBuildingDeprecatedRequest(
            $cloud_pk,
            $project_pk,
            $create_building_by_name_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Model" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createMetaBuildingDeprecatedAsync
     *
     * Create an empty 3D Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createMetaBuildingDeprecatedAsync(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes[
            "createMetaBuildingDeprecated"
        ][0]
    ) {
        return $this->createMetaBuildingDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $create_building_by_name_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createMetaBuildingDeprecatedAsyncWithHttpInfo
     *
     * Create an empty 3D Model
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createMetaBuildingDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes[
            "createMetaBuildingDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model";
        $request = $this->createMetaBuildingDeprecatedRequest(
            $cloud_pk,
            $project_pk,
            $create_building_by_name_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createMetaBuildingDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\CreateBuildingByNameRequest $create_building_by_name_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createMetaBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createMetaBuildingDeprecatedRequest(
        $cloud_pk,
        $project_pk,
        $create_building_by_name_request,
        string $contentType = self::contentTypes[
            "createMetaBuildingDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createMetaBuildingDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createMetaBuildingDeprecated'
            );
        }

        // verify the required parameter 'create_building_by_name_request' is set
        if (
            $create_building_by_name_request === null ||
            (is_array($create_building_by_name_request) &&
                count($create_building_by_name_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_building_by_name_request when calling createMetaBuildingDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/create-metabuilding";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_building_by_name_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $create_building_by_name_request
                    )
                );
            } else {
                $httpBody = $create_building_by_name_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPropertySetDeprecated
     *
     * Create one or many PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     * @deprecated
     */
    public function createPropertySetDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes[
            "createPropertySetDeprecated"
        ][0]
    ) {
        list($response) = $this->createPropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createPropertySetDeprecatedWithHttpInfo
     *
     * Create one or many PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createPropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes[
            "createPropertySetDeprecated"
        ][0]
    ) {
        $request = $this->createPropertySetDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertySet[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPropertySetDeprecatedAsync
     *
     * Create one or many PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createPropertySetDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes[
            "createPropertySetDeprecated"
        ][0]
    ) {
        return $this->createPropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_set_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createPropertySetDeprecatedAsyncWithHttpInfo
     *
     * Create one or many PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createPropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes[
            "createPropertySetDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet[]";
        $request = $this->createPropertySetDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $property_set_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PropertySetRequest[] $property_set_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createPropertySetDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $property_set_request,
        string $contentType = self::contentTypes[
            "createPropertySetDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createPropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createPropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createPropertySetDeprecated'
            );
        }

        // verify the required parameter 'property_set_request' is set
        if (
            $property_set_request === null ||
            (is_array($property_set_request) &&
                count($property_set_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_set_request when calling createPropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($property_set_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $property_set_request
                    )
                );
            } else {
                $httpBody = $property_set_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPropertySetElementRelationsDeprecated
     *
     * Create association between PropertySet and element
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function createPropertySetElementRelationsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelationsDeprecated"
        ][0]
    ) {
        $this->createPropertySetElementRelationsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_property_set_relation_request,
            $contentType
        );
    }

    /**
     * Operation createPropertySetElementRelationsDeprecatedWithHttpInfo
     *
     * Create association between PropertySet and element
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createPropertySetElementRelationsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelationsDeprecated"
        ][0]
    ) {
        $request = $this->createPropertySetElementRelationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_property_set_relation_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createPropertySetElementRelationsDeprecatedAsync
     *
     * Create association between PropertySet and element
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createPropertySetElementRelationsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelationsDeprecated"
        ][0]
    ) {
        return $this->createPropertySetElementRelationsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_property_set_relation_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createPropertySetElementRelationsDeprecatedAsyncWithHttpInfo
     *
     * Create association between PropertySet and element
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createPropertySetElementRelationsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelationsDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->createPropertySetElementRelationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $element_property_set_relation_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPropertySetElementRelationsDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ElementPropertySetRelationRequest[] $element_property_set_relation_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPropertySetElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createPropertySetElementRelationsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $element_property_set_relation_request,
        string $contentType = self::contentTypes[
            "createPropertySetElementRelationsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createPropertySetElementRelationsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createPropertySetElementRelationsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createPropertySetElementRelationsDeprecated'
            );
        }

        // verify the required parameter 'element_property_set_relation_request' is set
        if (
            $element_property_set_relation_request === null ||
            (is_array($element_property_set_relation_request) &&
                count($element_property_set_relation_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_property_set_relation_request when calling createPropertySetElementRelationsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset-element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_property_set_relation_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $element_property_set_relation_request
                    )
                );
            } else {
                $httpBody = $element_property_set_relation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRawElementsDeprecated
     *
     * Create elements in an optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function createRawElementsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes[
            "createRawElementsDeprecated"
        ][0]
    ) {
        $this->createRawElementsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $raw_elements_request,
            $contentType
        );
    }

    /**
     * Operation createRawElementsDeprecatedWithHttpInfo
     *
     * Create elements in an optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createRawElementsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes[
            "createRawElementsDeprecated"
        ][0]
    ) {
        $request = $this->createRawElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $raw_elements_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createRawElementsDeprecatedAsync
     *
     * Create elements in an optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createRawElementsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes[
            "createRawElementsDeprecated"
        ][0]
    ) {
        return $this->createRawElementsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $raw_elements_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createRawElementsDeprecatedAsyncWithHttpInfo
     *
     * Create elements in an optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createRawElementsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes[
            "createRawElementsDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->createRawElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $raw_elements_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRawElementsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\RawElementsRequest $raw_elements_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createRawElementsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $raw_elements_request,
        string $contentType = self::contentTypes[
            "createRawElementsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createRawElementsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createRawElementsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createRawElementsDeprecated'
            );
        }

        // verify the required parameter 'raw_elements_request' is set
        if (
            $raw_elements_request === null ||
            (is_array($raw_elements_request) &&
                count($raw_elements_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $raw_elements_request when calling createRawElementsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($raw_elements_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $raw_elements_request
                    )
                );
            } else {
                $httpBody = $raw_elements_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSpaceDeprecated
     *
     * Create a space in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space[]
     * @deprecated
     */
    public function createSpaceDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpaceDeprecated"][0]
    ) {
        list($response) = $this->createSpaceDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $space_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createSpaceDeprecatedWithHttpInfo
     *
     * Create a space in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createSpaceDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpaceDeprecated"][0]
    ) {
        $request = $this->createSpaceDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $space_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Space[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Space[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Space[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Space[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Space[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSpaceDeprecatedAsync
     *
     * Create a space in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createSpaceDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpaceDeprecated"][0]
    ) {
        return $this->createSpaceDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $space_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSpaceDeprecatedAsyncWithHttpInfo
     *
     * Create a space in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createSpaceDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpaceDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Space[]";
        $request = $this->createSpaceDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $space_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSpaceDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SpaceRequest[] $space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createSpaceDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $space_request,
        string $contentType = self::contentTypes["createSpaceDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createSpaceDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createSpaceDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createSpaceDeprecated'
            );
        }

        // verify the required parameter 'space_request' is set
        if (
            $space_request === null ||
            (is_array($space_request) && count($space_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $space_request when calling createSpaceDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($space_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($space_request)
                );
            } else {
                $httpBody = $space_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createStoreyDeprecated
     *
     * Create a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     * @deprecated
     */
    public function createStoreyDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStoreyDeprecated"][0]
    ) {
        list($response) = $this->createStoreyDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createStoreyDeprecatedWithHttpInfo
     *
     * Create a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createStoreyDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStoreyDeprecated"][0]
    ) {
        $request = $this->createStoreyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStoreyDeprecatedAsync
     *
     * Create a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createStoreyDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStoreyDeprecated"][0]
    ) {
        return $this->createStoreyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createStoreyDeprecatedAsyncWithHttpInfo
     *
     * Create a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createStoreyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStoreyDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->createStoreyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_building_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStoreyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\StoreyBuildingRequest $storey_building_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createStoreyDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_building_request,
        string $contentType = self::contentTypes["createStoreyDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createStoreyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createStoreyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createStoreyDeprecated'
            );
        }

        // verify the required parameter 'storey_building_request' is set
        if (
            $storey_building_request === null ||
            (is_array($storey_building_request) &&
                count($storey_building_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_building_request when calling createStoreyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($storey_building_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $storey_building_request
                    )
                );
            } else {
                $httpBody = $storey_building_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createStoreyPlanDeprecated
     *
     * Create a relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     * @deprecated
     */
    public function createStoreyPlanDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes[
            "createStoreyPlanDeprecated"
        ][0]
    ) {
        list($response) = $this->createStoreyPlanDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $storey_model_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createStoreyPlanDeprecatedWithHttpInfo
     *
     * Create a relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createStoreyPlanDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes[
            "createStoreyPlanDeprecated"
        ][0]
    ) {
        $request = $this->createStoreyPlanDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $storey_model_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStoreyPlanDeprecatedAsync
     *
     * Create a relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createStoreyPlanDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes[
            "createStoreyPlanDeprecated"
        ][0]
    ) {
        return $this->createStoreyPlanDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $storey_model_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createStoreyPlanDeprecatedAsyncWithHttpInfo
     *
     * Create a relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createStoreyPlanDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes[
            "createStoreyPlanDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->createStoreyPlanDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $storey_model_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStoreyPlanDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\StoreyModelPlanRequest $storey_model_plan_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createStoreyPlanDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $storey_model_plan_request,
        string $contentType = self::contentTypes[
            "createStoreyPlanDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling createStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'storey_model_plan_request' is set
        if (
            $storey_model_plan_request === null ||
            (is_array($storey_model_plan_request) &&
                count($storey_model_plan_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_model_plan_request when calling createStoreyPlanDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/add";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($storey_model_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $storey_model_plan_request
                    )
                );
            } else {
                $httpBody = $storey_model_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSystemDeprecated
     *
     * Create a system in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     * @deprecated
     */
    public function createSystemDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystemDeprecated"][0]
    ) {
        list($response) = $this->createSystemDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $system_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createSystemDeprecatedWithHttpInfo
     *
     * Create a system in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createSystemDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystemDeprecated"][0]
    ) {
        $request = $this->createSystemDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $system_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ("\OpenAPI\Client\Model\System" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\System" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\System",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\System";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\System",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSystemDeprecatedAsync
     *
     * Create a system in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createSystemDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystemDeprecated"][0]
    ) {
        return $this->createSystemDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $system_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createSystemDeprecatedAsyncWithHttpInfo
     *
     * Create a system in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createSystemDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystemDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\System";
        $request = $this->createSystemDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $system_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSystemDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\SystemRequest $system_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createSystemDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $system_request,
        string $contentType = self::contentTypes["createSystemDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createSystemDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createSystemDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createSystemDeprecated'
            );
        }

        // verify the required parameter 'system_request' is set
        if (
            $system_request === null ||
            (is_array($system_request) && count($system_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $system_request when calling createSystemDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($system_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($system_request)
                );
            } else {
                $httpBody = $system_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTilesetDeprecated
     *
     * Create the tileset of the model and upload all files
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function createTilesetDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTilesetDeprecated"][0]
    ) {
        $this->createTilesetDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation createTilesetDeprecatedWithHttpInfo
     *
     * Create the tileset of the model and upload all files
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createTilesetDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTilesetDeprecated"][0]
    ) {
        $request = $this->createTilesetDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createTilesetDeprecatedAsync
     *
     * Create the tileset of the model and upload all files
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createTilesetDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTilesetDeprecated"][0]
    ) {
        return $this->createTilesetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createTilesetDeprecatedAsyncWithHttpInfo
     *
     * Create the tileset of the model and upload all files
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createTilesetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTilesetDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->createTilesetDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTilesetDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createTilesetDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["createTilesetDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createTilesetDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createTilesetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createTilesetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/tileset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createZoneDeprecated
     *
     * Create a zone in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request zone_request (required)
     * @param  string $color color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone[]
     * @deprecated
     */
    public function createZoneDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZoneDeprecated"][0]
    ) {
        list($response) = $this->createZoneDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_request,
            $color,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createZoneDeprecatedWithHttpInfo
     *
     * Create a zone in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createZoneDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZoneDeprecated"][0]
    ) {
        $request = $this->createZoneDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_request,
            $color,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Zone[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Zone[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Zone[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Zone[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Zone[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createZoneDeprecatedAsync
     *
     * Create a zone in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createZoneDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZoneDeprecated"][0]
    ) {
        return $this->createZoneDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_request,
            $color,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createZoneDeprecatedAsyncWithHttpInfo
     *
     * Create a zone in the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createZoneDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZoneDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Zone[]";
        $request = $this->createZoneDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_request,
            $color,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createZoneDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\ZoneRequest[] $zone_request (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createZoneDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_request,
        $color = null,
        string $contentType = self::contentTypes["createZoneDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createZoneDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createZoneDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createZoneDeprecated'
            );
        }

        // verify the required parameter 'zone_request' is set
        if (
            $zone_request === null ||
            (is_array($zone_request) && count($zone_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_request when calling createZoneDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $color,
                "color", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($zone_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($zone_request)
                );
            } else {
                $httpBody = $zone_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createZoneSpaceDeprecated
     *
     * Create a space in a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     * @deprecated
     */
    public function createZoneSpaceDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpaceDeprecated"][0]
    ) {
        list($response) = $this->createZoneSpaceDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $zone_space_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation createZoneSpaceDeprecatedWithHttpInfo
     *
     * Create a space in a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function createZoneSpaceDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpaceDeprecated"][0]
    ) {
        $request = $this->createZoneSpaceDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $zone_space_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if (
                        "\OpenAPI\Client\Model\ZoneSpace" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ZoneSpace" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ZoneSpace",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ZoneSpace";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ZoneSpace",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createZoneSpaceDeprecatedAsync
     *
     * Create a space in a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createZoneSpaceDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpaceDeprecated"][0]
    ) {
        return $this->createZoneSpaceDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $zone_space_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation createZoneSpaceDeprecatedAsyncWithHttpInfo
     *
     * Create a space in a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function createZoneSpaceDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpaceDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ZoneSpace";
        $request = $this->createZoneSpaceDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $zone_space_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createZoneSpaceDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\ZoneSpaceRequest $zone_space_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function createZoneSpaceDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $zone_space_request,
        string $contentType = self::contentTypes["createZoneSpaceDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling createZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling createZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling createZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling createZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'zone_space_request' is set
        if (
            $zone_space_request === null ||
            (is_array($zone_space_request) && count($zone_space_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_space_request when calling createZoneSpaceDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($zone_space_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $zone_space_request
                    )
                );
            } else {
                $httpBody = $zone_space_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccessTokenDeprecated
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteAccessTokenDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes[
            "deleteAccessTokenDeprecated"
        ][0]
    ) {
        $this->deleteAccessTokenDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $contentType
        );
    }

    /**
     * Operation deleteAccessTokenDeprecatedWithHttpInfo
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteAccessTokenDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes[
            "deleteAccessTokenDeprecated"
        ][0]
    ) {
        $request = $this->deleteAccessTokenDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccessTokenDeprecatedAsync
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteAccessTokenDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes[
            "deleteAccessTokenDeprecated"
        ][0]
    ) {
        return $this->deleteAccessTokenDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteAccessTokenDeprecatedAsyncWithHttpInfo
     *
     * Delete a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteAccessTokenDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes[
            "deleteAccessTokenDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deleteAccessTokenDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccessTokenDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteAccessTokenDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes[
            "deleteAccessTokenDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling deleteAccessTokenDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBuildingDeprecated
     *
     * Delete a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteBuildingDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuildingDeprecated"][0]
    ) {
        $this->deleteBuildingDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation deleteBuildingDeprecatedWithHttpInfo
     *
     * Delete a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteBuildingDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuildingDeprecated"][0]
    ) {
        $request = $this->deleteBuildingDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBuildingDeprecatedAsync
     *
     * Delete a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteBuildingDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuildingDeprecated"][0]
    ) {
        return $this->deleteBuildingDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteBuildingDeprecatedAsyncWithHttpInfo
     *
     * Delete a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteBuildingDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuildingDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteBuildingDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBuildingDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteBuildingDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteBuildingDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteBuildingDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteBuildingDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteBuildingDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteBuildingDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBuildingPlanDeprecated
     *
     * Delete the relation between a 2d model and a building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteBuildingPlanDeprecated(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteBuildingPlanDeprecated"
        ][0]
    ) {
        $this->deleteBuildingPlanDeprecatedWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteBuildingPlanDeprecatedWithHttpInfo
     *
     * Delete the relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteBuildingPlanDeprecatedWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteBuildingPlanDeprecated"
        ][0]
    ) {
        $request = $this->deleteBuildingPlanDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBuildingPlanDeprecatedAsync
     *
     * Delete the relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteBuildingPlanDeprecatedAsync(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteBuildingPlanDeprecated"
        ][0]
    ) {
        return $this->deleteBuildingPlanDeprecatedAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteBuildingPlanDeprecatedAsyncWithHttpInfo
     *
     * Delete the relation between a 2d model and a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteBuildingPlanDeprecatedAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteBuildingPlanDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deleteBuildingPlanDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBuildingPlanDeprecated'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteBuildingPlanDeprecatedRequest(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteBuildingPlanDeprecated"
        ][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling deleteBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteBuildingPlanDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCheckerDeprecated
     *
     * Delete a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteCheckerDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerDeprecated"][0]
    ) {
        $this->deleteCheckerDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteCheckerDeprecatedWithHttpInfo
     *
     * Delete a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteCheckerDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerDeprecated"][0]
    ) {
        $request = $this->deleteCheckerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCheckerDeprecatedAsync
     *
     * Delete a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteCheckerDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerDeprecated"][0]
    ) {
        return $this->deleteCheckerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCheckerDeprecatedAsyncWithHttpInfo
     *
     * Delete a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteCheckerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteCheckerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCheckerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteCheckerDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteCheckerDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteCheckerDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCheckerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteCheckerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteCheckerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCheckerResultDeprecated
     *
     * Delete a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteCheckerResultDeprecated(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteCheckerResultDeprecated"
        ][0]
    ) {
        $this->deleteCheckerResultDeprecatedWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteCheckerResultDeprecatedWithHttpInfo
     *
     * Delete a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteCheckerResultDeprecatedWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteCheckerResultDeprecated"
        ][0]
    ) {
        $request = $this->deleteCheckerResultDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCheckerResultDeprecatedAsync
     *
     * Delete a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteCheckerResultDeprecatedAsync(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteCheckerResultDeprecated"
        ][0]
    ) {
        return $this->deleteCheckerResultDeprecatedAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteCheckerResultDeprecatedAsyncWithHttpInfo
     *
     * Delete a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteCheckerResultDeprecatedAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteCheckerResultDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deleteCheckerResultDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCheckerResultDeprecated'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteCheckerResultDeprecatedRequest(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteCheckerResultDeprecated"
        ][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling deleteCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteCheckerResultDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteElementDeprecated
     *
     * Delete an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteElementDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElementDeprecated"][0]
    ) {
        $this->deleteElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation deleteElementDeprecatedWithHttpInfo
     *
     * Delete an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElementDeprecated"][0]
    ) {
        $request = $this->deleteElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteElementDeprecatedAsync
     *
     * Delete an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteElementDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElementDeprecated"][0]
    ) {
        return $this->deleteElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteElementDeprecatedAsyncWithHttpInfo
     *
     * Delete an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElementDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteElementDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteElementDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteElementDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfcDeprecated
     *
     * Delete a model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteIfcDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcDeprecated"][0]
    ) {
        $this->deleteIfcDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteIfcDeprecatedWithHttpInfo
     *
     * Delete a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteIfcDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcDeprecated"][0]
    ) {
        $request = $this->deleteIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcDeprecatedAsync
     *
     * Delete a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcDeprecated"][0]
    ) {
        return $this->deleteIfcDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteIfcDeprecatedAsyncWithHttpInfo
     *
     * Delete a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfcDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteIfcDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfcDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfcDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfcDeprecated'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfcPropertyDefinitionDeprecated
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteIfcPropertyDefinitionDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $this->deleteIfcPropertyDefinitionDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteIfcPropertyDefinitionDeprecatedWithHttpInfo
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteIfcPropertyDefinitionDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $request = $this->deleteIfcPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcPropertyDefinitionDeprecatedAsync
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcPropertyDefinitionDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        return $this->deleteIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo
     *
     * Delete a PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deleteIfcPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfcPropertyDefinitionDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteIfcPropertyDefinitionDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfcPropertyDefinitionDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfcPropertyDeprecated
     *
     * Delete a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteIfcPropertyDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDeprecated"
        ][0]
    ) {
        $this->deleteIfcPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteIfcPropertyDeprecatedWithHttpInfo
     *
     * Delete a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteIfcPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDeprecated"
        ][0]
    ) {
        $request = $this->deleteIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcPropertyDeprecatedAsync
     *
     * Delete a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcPropertyDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDeprecated"
        ][0]
    ) {
        return $this->deleteIfcPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteIfcPropertyDeprecatedAsyncWithHttpInfo
     *
     * Delete a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deleteIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfcPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteIfcPropertyDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcPropertyDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfcPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfcUnitDeprecated
     *
     * Delete a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteIfcUnitDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcUnitDeprecated"][0]
    ) {
        $this->deleteIfcUnitDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteIfcUnitDeprecatedWithHttpInfo
     *
     * Delete a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteIfcUnitDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcUnitDeprecated"][0]
    ) {
        $request = $this->deleteIfcUnitDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcUnitDeprecatedAsync
     *
     * Delete a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcUnitDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcUnitDeprecated"][0]
    ) {
        return $this->deleteIfcUnitDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteIfcUnitDeprecatedAsyncWithHttpInfo
     *
     * Delete a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcUnitDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcUnitDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteIfcUnitDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfcUnitDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteIfcUnitDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteIfcUnitDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfcUnitDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteIfcWithoutDocDeprecated
     *
     * Delete the Model without deleting the related document
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcWithoutDocDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteIfcWithoutDocDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcWithoutDocDeprecated"
        ][0]
    ) {
        $this->deleteIfcWithoutDocDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteIfcWithoutDocDeprecatedWithHttpInfo
     *
     * Delete the Model without deleting the related document
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcWithoutDocDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteIfcWithoutDocDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcWithoutDocDeprecated"
        ][0]
    ) {
        $request = $this->deleteIfcWithoutDocDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteIfcWithoutDocDeprecatedAsync
     *
     * Delete the Model without deleting the related document
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcWithoutDocDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcWithoutDocDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcWithoutDocDeprecated"
        ][0]
    ) {
        return $this->deleteIfcWithoutDocDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteIfcWithoutDocDeprecatedAsyncWithHttpInfo
     *
     * Delete the Model without deleting the related document
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcWithoutDocDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteIfcWithoutDocDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcWithoutDocDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deleteIfcWithoutDocDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteIfcWithoutDocDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteIfcWithoutDocDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteIfcWithoutDocDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes[
            "deleteIfcWithoutDocDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteIfcWithoutDocDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteIfcWithoutDocDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteIfcWithoutDocDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/delete-model";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLayerDeprecated
     *
     * Delete a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteLayerDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayerDeprecated"][0]
    ) {
        $this->deleteLayerDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteLayerDeprecatedWithHttpInfo
     *
     * Delete a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteLayerDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayerDeprecated"][0]
    ) {
        $request = $this->deleteLayerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLayerDeprecatedAsync
     *
     * Delete a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteLayerDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayerDeprecated"][0]
    ) {
        return $this->deleteLayerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteLayerDeprecatedAsyncWithHttpInfo
     *
     * Delete a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteLayerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayerDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteLayerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLayerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteLayerDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteLayerDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteLayerDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteLayerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteLayerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteLayerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePropertySetDeprecated
     *
     * Delete a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deletePropertySetDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deletePropertySetDeprecated"
        ][0]
    ) {
        $this->deletePropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deletePropertySetDeprecatedWithHttpInfo
     *
     * Delete a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deletePropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deletePropertySetDeprecated"
        ][0]
    ) {
        $request = $this->deletePropertySetDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deletePropertySetDeprecatedAsync
     *
     * Delete a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deletePropertySetDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deletePropertySetDeprecated"
        ][0]
    ) {
        return $this->deletePropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deletePropertySetDeprecatedAsyncWithHttpInfo
     *
     * Delete a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deletePropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deletePropertySetDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deletePropertySetDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deletePropertySetDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "deletePropertySetDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deletePropertySetDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deletePropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deletePropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSpaceDeprecated
     *
     * Delete a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteSpaceDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpaceDeprecated"][0]
    ) {
        $this->deleteSpaceDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteSpaceDeprecatedWithHttpInfo
     *
     * Delete a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteSpaceDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpaceDeprecated"][0]
    ) {
        $request = $this->deleteSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSpaceDeprecatedAsync
     *
     * Delete a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteSpaceDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpaceDeprecated"][0]
    ) {
        return $this->deleteSpaceDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSpaceDeprecatedAsyncWithHttpInfo
     *
     * Delete a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteSpaceDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpaceDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSpaceDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteSpaceDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteSpaceDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteSpaceDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteSpaceDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteSpaceDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteSpaceDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteStoreyDeprecated
     *
     * Delete a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteStoreyDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStoreyDeprecated"][0]
    ) {
        $this->deleteStoreyDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation deleteStoreyDeprecatedWithHttpInfo
     *
     * Delete a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteStoreyDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStoreyDeprecated"][0]
    ) {
        $request = $this->deleteStoreyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStoreyDeprecatedAsync
     *
     * Delete a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteStoreyDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStoreyDeprecated"][0]
    ) {
        return $this->deleteStoreyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteStoreyDeprecatedAsyncWithHttpInfo
     *
     * Delete a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteStoreyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStoreyDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteStoreyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStoreyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteStoreyDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteStoreyDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteStoreyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteStoreyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteStoreyDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteStoreyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteStoreyPlanDeprecated
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteStoreyPlanDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "deleteStoreyPlanDeprecated"
        ][0]
    ) {
        $this->deleteStoreyPlanDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );
    }

    /**
     * Operation deleteStoreyPlanDeprecatedWithHttpInfo
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteStoreyPlanDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "deleteStoreyPlanDeprecated"
        ][0]
    ) {
        $request = $this->deleteStoreyPlanDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteStoreyPlanDeprecatedAsync
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteStoreyPlanDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "deleteStoreyPlanDeprecated"
        ][0]
    ) {
        return $this->deleteStoreyPlanDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteStoreyPlanDeprecatedAsyncWithHttpInfo
     *
     * Delete the relation between a 2d model and a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteStoreyPlanDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "deleteStoreyPlanDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->deleteStoreyPlanDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteStoreyPlanDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteStoreyPlanDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "deleteStoreyPlanDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling deleteStoreyPlanDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSystemDeprecated
     *
     * Delete a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteSystemDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystemDeprecated"][0]
    ) {
        $this->deleteSystemDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation deleteSystemDeprecatedWithHttpInfo
     *
     * Delete a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteSystemDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystemDeprecated"][0]
    ) {
        $request = $this->deleteSystemDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSystemDeprecatedAsync
     *
     * Delete a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteSystemDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystemDeprecated"][0]
    ) {
        return $this->deleteSystemDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteSystemDeprecatedAsyncWithHttpInfo
     *
     * Delete a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteSystemDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystemDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteSystemDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSystemDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteSystemDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["deleteSystemDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteSystemDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteSystemDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteSystemDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteSystemDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteZoneDeprecated
     *
     * Delete a zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteZoneDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZoneDeprecated"][0]
    ) {
        $this->deleteZoneDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation deleteZoneDeprecatedWithHttpInfo
     *
     * Delete a zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteZoneDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZoneDeprecated"][0]
    ) {
        $request = $this->deleteZoneDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteZoneDeprecatedAsync
     *
     * Delete a zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteZoneDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZoneDeprecated"][0]
    ) {
        return $this->deleteZoneDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteZoneDeprecatedAsyncWithHttpInfo
     *
     * Delete a zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteZoneDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZoneDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteZoneDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteZoneDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteZoneDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["deleteZoneDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteZoneDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteZoneDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteZoneDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteZoneDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteZoneSpaceDeprecated
     *
     * Delete a space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function deleteZoneSpaceDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpaceDeprecated"][0]
    ) {
        $this->deleteZoneSpaceDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );
    }

    /**
     * Operation deleteZoneSpaceDeprecatedWithHttpInfo
     *
     * Delete a space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function deleteZoneSpaceDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpaceDeprecated"][0]
    ) {
        $request = $this->deleteZoneSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteZoneSpaceDeprecatedAsync
     *
     * Delete a space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteZoneSpaceDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpaceDeprecated"][0]
    ) {
        return $this->deleteZoneSpaceDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation deleteZoneSpaceDeprecatedAsyncWithHttpInfo
     *
     * Delete a space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function deleteZoneSpaceDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpaceDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->deleteZoneSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteZoneSpaceDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function deleteZoneSpaceDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["deleteZoneSpaceDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling deleteZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling deleteZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling deleteZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling deleteZoneSpaceDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportIfcDeprecated
     *
     * Export IFC
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcExport
     * @deprecated
     */
    public function exportIfcDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfcDeprecated"][0]
    ) {
        list($response) = $this->exportIfcDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_export_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation exportIfcDeprecatedWithHttpInfo
     *
     * Export IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcExport, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function exportIfcDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfcDeprecated"][0]
    ) {
        $request = $this->exportIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_export_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcExport" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcExport" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcExport",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcExport";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcExport",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportIfcDeprecatedAsync
     *
     * Export IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function exportIfcDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfcDeprecated"][0]
    ) {
        return $this->exportIfcDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_export_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation exportIfcDeprecatedAsyncWithHttpInfo
     *
     * Export IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function exportIfcDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfcDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcExport";
        $request = $this->exportIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_export_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportIfcDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcExportRequest $ifc_export_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function exportIfcDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_export_request,
        string $contentType = self::contentTypes["exportIfcDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling exportIfcDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling exportIfcDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling exportIfcDeprecated'
            );
        }

        // verify the required parameter 'ifc_export_request' is set
        if (
            $ifc_export_request === null ||
            (is_array($ifc_export_request) && count($ifc_export_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_export_request when calling exportIfcDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/export";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_export_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_export_request
                    )
                );
            } else {
                $httpBody = $ifc_export_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fullUpdateElementDeprecated
     *
     * Update all fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     * @deprecated
     */
    public function fullUpdateElementDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes[
            "fullUpdateElementDeprecated"
        ][0]
    ) {
        list($response) = $this->fullUpdateElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $element_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation fullUpdateElementDeprecatedWithHttpInfo
     *
     * Update all fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function fullUpdateElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes[
            "fullUpdateElementDeprecated"
        ][0]
    ) {
        $request = $this->fullUpdateElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $element_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Element" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fullUpdateElementDeprecatedAsync
     *
     * Update all fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function fullUpdateElementDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes[
            "fullUpdateElementDeprecated"
        ][0]
    ) {
        return $this->fullUpdateElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $element_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation fullUpdateElementDeprecatedAsyncWithHttpInfo
     *
     * Update all fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function fullUpdateElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes[
            "fullUpdateElementDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element";
        $request = $this->fullUpdateElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $element_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fullUpdateElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\ElementRequest $element_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fullUpdateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function fullUpdateElementDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $element_request,
        string $contentType = self::contentTypes[
            "fullUpdateElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling fullUpdateElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling fullUpdateElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling fullUpdateElementDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling fullUpdateElementDeprecated'
            );
        }

        // verify the required parameter 'element_request' is set
        if (
            $element_request === null ||
            (is_array($element_request) && count($element_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_request when calling fullUpdateElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($element_request)
                );
            } else {
                $httpBody = $element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PUT",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessTokenDeprecated
     *
     * Retrieve one token created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     * @deprecated
     */
    public function getAccessTokenDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessTokenDeprecated"][0]
    ) {
        list($response) = $this->getAccessTokenDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getAccessTokenDeprecatedWithHttpInfo
     *
     * Retrieve one token created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getAccessTokenDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessTokenDeprecated"][0]
    ) {
        $request = $this->getAccessTokenDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\IfcAccessToken" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessTokenDeprecatedAsync
     *
     * Retrieve one token created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getAccessTokenDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessTokenDeprecated"][0]
    ) {
        return $this->getAccessTokenDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAccessTokenDeprecatedAsyncWithHttpInfo
     *
     * Retrieve one token created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getAccessTokenDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessTokenDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
        $request = $this->getAccessTokenDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessTokenDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getAccessTokenDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        string $contentType = self::contentTypes["getAccessTokenDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling getAccessTokenDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessTokensDeprecated
     *
     * Retrieve all tokens created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokensDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken[]
     * @deprecated
     */
    public function getAccessTokensDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokensDeprecated"][0]
    ) {
        list($response) = $this->getAccessTokensDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getAccessTokensDeprecatedWithHttpInfo
     *
     * Retrieve all tokens created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokensDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getAccessTokensDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokensDeprecated"][0]
    ) {
        $request = $this->getAccessTokensDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcAccessToken[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\IfcAccessToken[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcAccessToken[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcAccessToken[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcAccessToken[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessTokensDeprecatedAsync
     *
     * Retrieve all tokens created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokensDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getAccessTokensDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokensDeprecated"][0]
    ) {
        return $this->getAccessTokensDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getAccessTokensDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all tokens created for this model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokensDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getAccessTokensDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokensDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcAccessToken[]";
        $request = $this->getAccessTokensDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessTokensDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessTokensDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getAccessTokensDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getAccessTokensDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getAccessTokensDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getAccessTokensDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getAccessTokensDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBuildingDeprecated
     *
     * Retrieve a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building
     * @deprecated
     */
    public function getBuildingDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuildingDeprecated"][0]
    ) {
        list($response) = $this->getBuildingDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getBuildingDeprecatedWithHttpInfo
     *
     * Retrieve a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getBuildingDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuildingDeprecated"][0]
    ) {
        $request = $this->getBuildingDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Building" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBuildingDeprecatedAsync
     *
     * Retrieve a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBuildingDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuildingDeprecated"][0]
    ) {
        return $this->getBuildingDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getBuildingDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a building of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBuildingDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuildingDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building";
        $request = $this->getBuildingDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBuildingDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getBuildingDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getBuildingDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getBuildingDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getBuildingDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getBuildingDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getBuildingDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBuildingPlanPositioningDeprecated
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PositioningPlan
     * @deprecated
     */
    public function getBuildingPlanPositioningDeprecated(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getBuildingPlanPositioningDeprecatedWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getBuildingPlanPositioningDeprecatedWithHttpInfo
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PositioningPlan, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getBuildingPlanPositioningDeprecatedWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        $request = $this->getBuildingPlanPositioningDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PositioningPlan" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PositioningPlan" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PositioningPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PositioningPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PositioningPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBuildingPlanPositioningDeprecatedAsync
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBuildingPlanPositioningDeprecatedAsync(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        return $this->getBuildingPlanPositioningDeprecatedAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getBuildingPlanPositioningDeprecatedAsyncWithHttpInfo
     *
     * Retrieve the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBuildingPlanPositioningDeprecatedAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PositioningPlan";
        $request = $this->getBuildingPlanPositioningDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBuildingPlanPositioningDeprecated'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getBuildingPlanPositioningDeprecatedRequest(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling getBuildingPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getBuildingPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getBuildingPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getBuildingPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getBuildingPlanPositioningDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBuildingsDeprecated
     *
     * Retrieve all buildings of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building[]
     * @deprecated
     */
    public function getBuildingsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildingsDeprecated"][0]
    ) {
        list($response) = $this->getBuildingsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getBuildingsDeprecatedWithHttpInfo
     *
     * Retrieve all buildings of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getBuildingsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildingsDeprecated"][0]
    ) {
        $request = $this->getBuildingsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Building[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBuildingsDeprecatedAsync
     *
     * Retrieve all buildings of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBuildingsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildingsDeprecated"][0]
    ) {
        return $this->getBuildingsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getBuildingsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all buildings of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getBuildingsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildingsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building[]";
        $request = $this->getBuildingsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBuildingsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBuildingsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getBuildingsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getBuildingsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getBuildingsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getBuildingsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getBuildingsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckerDeprecated
     *
     * Retrieve a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     * @deprecated
     */
    public function getCheckerDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerDeprecated"][0]
    ) {
        list($response) = $this->getCheckerDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckerDeprecatedWithHttpInfo
     *
     * Retrieve a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getCheckerDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerDeprecated"][0]
    ) {
        $request = $this->getCheckerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcChecker" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcChecker" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcChecker",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcChecker";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcChecker",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerDeprecatedAsync
     *
     * Retrieve a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCheckerDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerDeprecated"][0]
    ) {
        return $this->getCheckerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckerDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCheckerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcChecker";
        $request = $this->getCheckerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getCheckerDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckerDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckerDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getCheckerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckerResultDeprecated
     *
     * Retrieve one CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     * @deprecated
     */
    public function getCheckerResultDeprecated(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultDeprecated"
        ][0]
    ) {
        list($response) = $this->getCheckerResultDeprecatedWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckerResultDeprecatedWithHttpInfo
     *
     * Retrieve one CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getCheckerResultDeprecatedWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultDeprecated"
        ][0]
    ) {
        $request = $this->getCheckerResultDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckerResult" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CheckerResult" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckerResult",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckerResult";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckerResult",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerResultDeprecatedAsync
     *
     * Retrieve one CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCheckerResultDeprecatedAsync(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultDeprecated"
        ][0]
    ) {
        return $this->getCheckerResultDeprecatedAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckerResultDeprecatedAsyncWithHttpInfo
     *
     * Retrieve one CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCheckerResultDeprecatedAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckerResult";
        $request = $this->getCheckerResultDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckerResultDeprecated'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getCheckerResultDeprecatedRequest(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultDeprecated"
        ][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling getCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckerResultDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckerResultsDeprecated
     *
     * Retrieve all CheckerResults
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult[]
     * @deprecated
     */
    public function getCheckerResultsDeprecated(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultsDeprecated"
        ][0]
    ) {
        list($response) = $this->getCheckerResultsDeprecatedWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckerResultsDeprecatedWithHttpInfo
     *
     * Retrieve all CheckerResults
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getCheckerResultsDeprecatedWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultsDeprecated"
        ][0]
    ) {
        $request = $this->getCheckerResultsDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckerResult[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CheckerResult[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckerResult[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckerResult[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckerResult[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckerResultsDeprecatedAsync
     *
     * Retrieve all CheckerResults
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCheckerResultsDeprecatedAsync(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultsDeprecated"
        ][0]
    ) {
        return $this->getCheckerResultsDeprecatedAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckerResultsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all CheckerResults
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCheckerResultsDeprecatedAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckerResult[]";
        $request = $this->getCheckerResultsDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckerResultsDeprecated'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckerResultsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getCheckerResultsDeprecatedRequest(
        $checker_pk,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getCheckerResultsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling getCheckerResultsDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckerResultsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getCheckerResultsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckerResultsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckersDeprecated
     *
     * Retrieve all checkers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckersDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker[]
     * @deprecated
     */
    public function getCheckersDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckersDeprecated"][0]
    ) {
        list($response) = $this->getCheckersDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getCheckersDeprecatedWithHttpInfo
     *
     * Retrieve all checkers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckersDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getCheckersDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckersDeprecated"][0]
    ) {
        $request = $this->getCheckersDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcChecker[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcChecker[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcChecker[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcChecker[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcChecker[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckersDeprecatedAsync
     *
     * Retrieve all checkers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCheckersDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckersDeprecated"][0]
    ) {
        return $this->getCheckersDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getCheckersDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all checkers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getCheckersDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckersDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcChecker[]";
        $request = $this->getCheckersDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckersDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCheckersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getCheckersDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getCheckersDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getCheckersDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getCheckersDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getCheckersDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClassificationsOfElementDeprecated
     *
     * Retrieve all classifications of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     * @deprecated
     */
    public function getClassificationsOfElementDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElementDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getClassificationsOfElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getClassificationsOfElementDeprecatedWithHttpInfo
     *
     * Retrieve all classifications of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getClassificationsOfElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElementDeprecated"
        ][0]
    ) {
        $request = $this->getClassificationsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClassificationsOfElementDeprecatedAsync
     *
     * Retrieve all classifications of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getClassificationsOfElementDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElementDeprecated"
        ][0]
    ) {
        return $this->getClassificationsOfElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getClassificationsOfElementDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all classifications of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getClassificationsOfElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElementDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification[]";
        $request = $this->getClassificationsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClassificationsOfElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClassificationsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getClassificationsOfElementDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getClassificationsOfElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getClassificationsOfElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getClassificationsOfElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDocumentsOfElementDeprecated
     *
     * Retrieve all documents of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document[]
     * @deprecated
     */
    public function getDocumentsOfElementDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getDocumentsOfElementDeprecated"
        ][0]
    ) {
        list($response) = $this->getDocumentsOfElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getDocumentsOfElementDeprecatedWithHttpInfo
     *
     * Retrieve all documents of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getDocumentsOfElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getDocumentsOfElementDeprecated"
        ][0]
    ) {
        $request = $this->getDocumentsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Document[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDocumentsOfElementDeprecatedAsync
     *
     * Retrieve all documents of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getDocumentsOfElementDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getDocumentsOfElementDeprecated"
        ][0]
    ) {
        return $this->getDocumentsOfElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getDocumentsOfElementDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all documents of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getDocumentsOfElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getDocumentsOfElementDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document[]";
        $request = $this->getDocumentsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDocumentsOfElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getDocumentsOfElementDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getDocumentsOfElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getDocumentsOfElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementDeprecated
     *
     * Retrieve an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     * @deprecated
     */
    public function getElementDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElementDeprecated"][0]
    ) {
        list($response) = $this->getElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementDeprecatedWithHttpInfo
     *
     * Retrieve an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElementDeprecated"][0]
    ) {
        $request = $this->getElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Element" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementDeprecatedAsync
     *
     * Retrieve an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElementDeprecated"][0]
    ) {
        return $this->getElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementDeprecatedAsyncWithHttpInfo
     *
     * Retrieve an element of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElementDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element";
        $request = $this->getElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getElementDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementLinkedDocumentsDeprecated
     *
     * Retrieve all documents linked to any element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocumentsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DocumentWithElementList[]
     * @deprecated
     */
    public function getElementLinkedDocumentsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "getElementLinkedDocumentsDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementLinkedDocumentsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementLinkedDocumentsDeprecatedWithHttpInfo
     *
     * Retrieve all documents linked to any element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocumentsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DocumentWithElementList[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementLinkedDocumentsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "getElementLinkedDocumentsDeprecated"
        ][0]
    ) {
        $request = $this->getElementLinkedDocumentsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\DocumentWithElementList[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\DocumentWithElementList[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\DocumentWithElementList[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\DocumentWithElementList[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\DocumentWithElementList[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementLinkedDocumentsDeprecatedAsync
     *
     * Retrieve all documents linked to any element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocumentsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementLinkedDocumentsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "getElementLinkedDocumentsDeprecated"
        ][0]
    ) {
        return $this->getElementLinkedDocumentsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementLinkedDocumentsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all documents linked to any element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocumentsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementLinkedDocumentsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "getElementLinkedDocumentsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\DocumentWithElementList[]";
        $request = $this->getElementLinkedDocumentsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementLinkedDocumentsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementLinkedDocumentsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementLinkedDocumentsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes[
            "getElementLinkedDocumentsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementLinkedDocumentsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementLinkedDocumentsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementLinkedDocumentsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/documents";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetDeprecated
     *
     * Retrieve a PropertySet of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     * @deprecated
     */
    public function getElementPropertySetDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetDeprecated"
        ][0]
    ) {
        list($response) = $this->getElementPropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetDeprecatedWithHttpInfo
     *
     * Retrieve a PropertySet of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementPropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetDeprecated"
        ][0]
    ) {
        $request = $this->getElementPropertySetDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\PropertySet" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetDeprecatedAsync
     *
     * Retrieve a PropertySet of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetDeprecated"
        ][0]
    ) {
        return $this->getElementPropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a PropertySet of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet";
        $request = $this->getElementPropertySetDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementPropertySetDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertiesDeprecated
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     * @deprecated
     */
    public function getElementPropertySetPropertiesDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertiesDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertiesDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertiesDeprecatedWithHttpInfo
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementPropertySetPropertiesDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertiesDeprecated"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertiesDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Property[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertiesDeprecatedAsync
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertiesDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertiesDeprecated"
        ][0]
    ) {
        return $this->getElementPropertySetPropertiesDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertiesDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all Properties of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertiesDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertiesDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property[]";
        $request = $this->getElementPropertySetPropertiesDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertiesDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementPropertySetPropertiesDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertiesDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertiesDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertiesDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertiesDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertiesDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertiesDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionDeprecated
     *
     * Retrieve a Definition of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo
     *
     * Retrieve a Definition of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionDeprecatedAsync
     *
     * Retrieve a Definition of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a Definition of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
        $request = $this->getElementPropertySetPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitionDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Retrieve a Unit of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo
     *
     * Retrieve a Unit of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitDeprecatedAsync
     *
     * Retrieve a Unit of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a Unit of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit";
        $request = $this->getElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitionUnitDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'propertydefinition_pk' is set
        if (
            $propertydefinition_pk === null ||
            (is_array($propertydefinition_pk) &&
                count($propertydefinition_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling getElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertydefinition_pk" . "}",
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsDeprecated
     *
     * Retrieve all Units of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitsDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitsDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDefinitionUnitsDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsDeprecatedWithHttpInfo
     *
     * Retrieve all Units of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitsDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitsDeprecated"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDefinitionUnitsDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsDeprecatedAsync
     *
     * Retrieve all Units of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitsDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitsDeprecated"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDefinitionUnitsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionUnitsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all Units of a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit[]";
        $request = $this->getElementPropertySetPropertyDefinitionUnitsDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitionUnitsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionUnitsDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionUnitsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitionUnitsDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitionUnitsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDefinitionUnitsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitionUnitsDeprecated'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitionUnitsDeprecated'
            );
        }

        // verify the required parameter 'propertydefinition_pk' is set
        if (
            $propertydefinition_pk === null ||
            (is_array($propertydefinition_pk) &&
                count($propertydefinition_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling getElementPropertySetPropertyDefinitionUnitsDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitionUnitsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertydefinition_pk" . "}",
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsDeprecated
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionsDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionsDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDefinitionsDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsDeprecatedWithHttpInfo
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionsDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionsDeprecated"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDefinitionsDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsDeprecatedAsync
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionsDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionsDeprecated"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDefinitionsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDefinitionsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all Definitions of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
        $request = $this->getElementPropertySetPropertyDefinitionsDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDefinitionsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementPropertySetPropertyDefinitionsDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDefinitionsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling getElementPropertySetPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDefinitionsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetPropertyDeprecated
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     * @deprecated
     */
    public function getElementPropertySetPropertyDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementPropertySetPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetPropertyDeprecatedWithHttpInfo
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementPropertySetPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $request = $this->getElementPropertySetPropertyDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetPropertyDeprecatedAsync
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        return $this->getElementPropertySetPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetPropertyDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a Property of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->getElementPropertySetPropertyDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementPropertySetPropertyDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling getElementPropertySetPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementPropertySetsDeprecated
     *
     * Retrieve all PropertySets of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     * @deprecated
     */
    public function getElementPropertySetsDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetsDeprecated"
        ][0]
    ) {
        list($response) = $this->getElementPropertySetsDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementPropertySetsDeprecatedWithHttpInfo
     *
     * Retrieve all PropertySets of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementPropertySetsDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetsDeprecated"
        ][0]
    ) {
        $request = $this->getElementPropertySetsDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertySet[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementPropertySetsDeprecatedAsync
     *
     * Retrieve all PropertySets of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetsDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetsDeprecated"
        ][0]
    ) {
        return $this->getElementPropertySetsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementPropertySetsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all PropertySets of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementPropertySetsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet[]";
        $request = $this->getElementPropertySetsDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementPropertySetsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementPropertySetsDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementPropertySetsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementPropertySetsDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getElementPropertySetsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementPropertySetsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementPropertySetsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementsDeprecated
     *
     * Retrieve all elements of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification classification (optional)
     * @param  string $classification__notation classification__notation (optional)
     * @param  string $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     * @deprecated
     */
    public function getElementsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementsDeprecated"][0]
    ) {
        list($response) = $this->getElementsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementsDeprecatedWithHttpInfo
     *
     * Retrieve all elements of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementsDeprecated"][0]
    ) {
        $request = $this->getElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementsDeprecatedAsync
     *
     * Retrieve all elements of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementsDeprecated"][0]
    ) {
        return $this->getElementsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all elements of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->getElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $classification,
            $classification__notation,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $classification (optional)
     * @param  string $classification__notation (optional)
     * @param  string $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $classification = null,
        $classification__notation = null,
        $type = null,
        string $contentType = self::contentTypes["getElementsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification,
                "classification", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $classification__notation,
                "classification__notation", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getElementsFromClassificationDeprecated
     *
     * Retrieve all elements with the classification
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element[]
     * @deprecated
     */
    public function getElementsFromClassificationDeprecated(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassificationDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getElementsFromClassificationDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getElementsFromClassificationDeprecatedWithHttpInfo
     *
     * Retrieve all elements with the classification
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getElementsFromClassificationDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassificationDeprecated"
        ][0]
    ) {
        $request = $this->getElementsFromClassificationDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Element[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getElementsFromClassificationDeprecatedAsync
     *
     * Retrieve all elements with the classification
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementsFromClassificationDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassificationDeprecated"
        ][0]
    ) {
        return $this->getElementsFromClassificationDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getElementsFromClassificationDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all elements with the classification
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getElementsFromClassificationDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassificationDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element[]";
        $request = $this->getElementsFromClassificationDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getElementsFromClassificationDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getElementsFromClassificationDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getElementsFromClassificationDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'model_classification_pk' is set
        if (
            $model_classification_pk === null ||
            (is_array($model_classification_pk) &&
                count($model_classification_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_classification_pk when calling getElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getElementsFromClassificationDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_classification_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_classification_pk" . "}",
                ObjectSerializer::toPathValue($model_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcClassificationsDeprecated
     *
     * Retrieve all classifications in a model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $ifc_pk ifc_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Classification[]
     * @deprecated
     */
    public function getIfcClassificationsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcClassificationsDeprecated"
        ][0]
    ) {
        list($response) = $this->getIfcClassificationsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcClassificationsDeprecatedWithHttpInfo
     *
     * Retrieve all classifications in a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Classification[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcClassificationsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcClassificationsDeprecated"
        ][0]
    ) {
        $request = $this->getIfcClassificationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Classification[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\Classification[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Classification[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Classification[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Classification[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcClassificationsDeprecatedAsync
     *
     * Retrieve all classifications in a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcClassificationsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcClassificationsDeprecated"
        ][0]
    ) {
        return $this->getIfcClassificationsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcClassificationsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all classifications in a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcClassificationsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcClassificationsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Classification[]";
        $request = $this->getIfcClassificationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcClassificationsDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcClassificationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcClassificationsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcClassificationsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcClassificationsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcClassificationsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcClassificationsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcDeprecated
     *
     * Retrieve one model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model
     * @deprecated
     */
    public function getIfcDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getIfcDeprecated"][0]
    ) {
        list($response) = $this->getIfcDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcDeprecatedWithHttpInfo
     *
     * Retrieve one model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getIfcDeprecated"][0]
    ) {
        $request = $this->getIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Model" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcDeprecatedAsync
     *
     * Retrieve one model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getIfcDeprecated"][0]
    ) {
        return $this->getIfcDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcDeprecatedAsyncWithHttpInfo
     *
     * Retrieve one model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getIfcDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model";
        $request = $this->getIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["getIfcDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcDeprecated'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcMaterialDeprecated
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material
     * @deprecated
     */
    public function getIfcMaterialDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialDeprecated"][0]
    ) {
        list($response) = $this->getIfcMaterialDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcMaterialDeprecatedWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcMaterialDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialDeprecated"][0]
    ) {
        $request = $this->getIfcMaterialDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Material" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Material" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Material",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Material";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Material",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcMaterialDeprecatedAsync
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcMaterialDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialDeprecated"][0]
    ) {
        return $this->getIfcMaterialDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcMaterialDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcMaterialDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Material";
        $request = $this->getIfcMaterialDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcMaterialDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcMaterialDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcMaterialDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcMaterialDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcMaterialDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcMaterialDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcMaterialsDeprecated
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material[]
     * @deprecated
     */
    public function getIfcMaterialsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialsDeprecated"][0]
    ) {
        list($response) = $this->getIfcMaterialsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcMaterialsDeprecatedWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcMaterialsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialsDeprecated"][0]
    ) {
        $request = $this->getIfcMaterialsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Material[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Material[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Material[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Material[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Material[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcMaterialsDeprecatedAsync
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcMaterialsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialsDeprecated"][0]
    ) {
        return $this->getIfcMaterialsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcMaterialsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcMaterialsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Material[]";
        $request = $this->getIfcMaterialsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcMaterialsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcMaterialsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcMaterialsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcMaterialsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcMaterialsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcMaterialsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/material";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcPropertiesDeprecated
     *
     * Retrieve all Properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property[]
     * @deprecated
     */
    public function getIfcPropertiesDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertiesDeprecated"
        ][0]
    ) {
        list($response) = $this->getIfcPropertiesDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcPropertiesDeprecatedWithHttpInfo
     *
     * Retrieve all Properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcPropertiesDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertiesDeprecated"
        ][0]
    ) {
        $request = $this->getIfcPropertiesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Property[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcPropertiesDeprecatedAsync
     *
     * Retrieve all Properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcPropertiesDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertiesDeprecated"
        ][0]
    ) {
        return $this->getIfcPropertiesDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcPropertiesDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all Properties of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcPropertiesDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertiesDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property[]";
        $request = $this->getIfcPropertiesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcPropertiesDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertiesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcPropertiesDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertiesDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcPropertiesDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcPropertiesDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcPropertiesDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcPropertyDefinitionDeprecated
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     * @deprecated
     */
    public function getIfcPropertyDefinitionDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        list($response) = $this->getIfcPropertyDefinitionDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcPropertyDefinitionDeprecatedWithHttpInfo
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcPropertyDefinitionDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $request = $this->getIfcPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcPropertyDefinitionDeprecatedAsync
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcPropertyDefinitionDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        return $this->getIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a PropertyDefinition of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
        $request = $this->getIfcPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcPropertyDefinitionDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcPropertyDefinitionDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcPropertyDefinitionDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcPropertyDefinitionsDeprecated
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition[]
     * @deprecated
     */
    public function getIfcPropertyDefinitionsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->getIfcPropertyDefinitionsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcPropertyDefinitionsDeprecatedWithHttpInfo
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcPropertyDefinitionsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        $request = $this->getIfcPropertyDefinitionsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcPropertyDefinitionsDeprecatedAsync
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcPropertyDefinitionsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        return $this->getIfcPropertyDefinitionsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcPropertyDefinitionsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcPropertyDefinitionsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition[]";
        $request = $this->getIfcPropertyDefinitionsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcPropertyDefinitionsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDefinitionsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcPropertyDefinitionsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getIfcPropertyDefinitionsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcPropertyDefinitionsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcPropertyDefinitionsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcPropertyDeprecated
     *
     * Retrieve a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     * @deprecated
     */
    public function getIfcPropertyDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcPropertyDeprecated"][0]
    ) {
        list($response) = $this->getIfcPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcPropertyDeprecatedWithHttpInfo
     *
     * Retrieve a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcPropertyDeprecated"][0]
    ) {
        $request = $this->getIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcPropertyDeprecatedAsync
     *
     * Retrieve a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcPropertyDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcPropertyDeprecated"][0]
    ) {
        return $this->getIfcPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcPropertyDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a Property of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcPropertyDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->getIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcPropertyDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcPropertyDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcUnitDeprecated
     *
     * Retrieve a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     * @deprecated
     */
    public function getIfcUnitDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitDeprecated"][0]
    ) {
        list($response) = $this->getIfcUnitDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcUnitDeprecatedWithHttpInfo
     *
     * Retrieve a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcUnitDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitDeprecated"][0]
    ) {
        $request = $this->getIfcUnitDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcUnitDeprecatedAsync
     *
     * Retrieve a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcUnitDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitDeprecated"][0]
    ) {
        return $this->getIfcUnitDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcUnitDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcUnitDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit";
        $request = $this->getIfcUnitDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcUnitDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcUnitDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcUnitDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcUnitsDeprecated
     *
     * Retrieve all Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit[]
     * @deprecated
     */
    public function getIfcUnitsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitsDeprecated"][0]
    ) {
        list($response) = $this->getIfcUnitsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcUnitsDeprecatedWithHttpInfo
     *
     * Retrieve all Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcUnitsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitsDeprecated"][0]
    ) {
        $request = $this->getIfcUnitsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcUnitsDeprecatedAsync
     *
     * Retrieve all Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcUnitsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitsDeprecated"][0]
    ) {
        return $this->getIfcUnitsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcUnitsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all Units of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcUnitsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit[]";
        $request = $this->getIfcUnitsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcUnitsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcUnitsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcUnitsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getIfcUnitsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcUnitsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getIfcUnitsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcUnitsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIfcsDeprecated
     *
     * Retrieve all models
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $source source (optional)
     * @param  string[] $status status (optional)
     * @param  string[] $type type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model[]
     * @deprecated
     */
    public function getIfcsDeprecated(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getIfcsDeprecated"][0]
    ) {
        list($response) = $this->getIfcsDeprecatedWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $source,
            $status,
            $type,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getIfcsDeprecatedWithHttpInfo
     *
     * Retrieve all models
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $source (optional)
     * @param  string[] $status (optional)
     * @param  string[] $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getIfcsDeprecatedWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getIfcsDeprecated"][0]
    ) {
        $request = $this->getIfcsDeprecatedRequest(
            $cloud_pk,
            $project_pk,
            $source,
            $status,
            $type,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Model[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIfcsDeprecatedAsync
     *
     * Retrieve all models
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $source (optional)
     * @param  string[] $status (optional)
     * @param  string[] $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcsDeprecatedAsync(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getIfcsDeprecated"][0]
    ) {
        return $this->getIfcsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $source,
            $status,
            $type,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getIfcsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all models
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $source (optional)
     * @param  string[] $status (optional)
     * @param  string[] $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getIfcsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getIfcsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model[]";
        $request = $this->getIfcsDeprecatedRequest(
            $cloud_pk,
            $project_pk,
            $source,
            $status,
            $type,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIfcsDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  string $source (optional)
     * @param  string[] $status (optional)
     * @param  string[] $type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getIfcsDeprecatedRequest(
        $cloud_pk,
        $project_pk,
        $source = null,
        $status = null,
        $type = null,
        string $contentType = self::contentTypes["getIfcsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getIfcsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getIfcsDeprecated'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/ifc";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $source,
                "source", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $status,
                "status", // param base name
                "array", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );
        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $type,
                "type", // param base name
                "array", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLayerDeprecated
     *
     * Retrieve a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     * @deprecated
     */
    public function getLayerDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayerDeprecated"][0]
    ) {
        list($response) = $this->getLayerDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getLayerDeprecatedWithHttpInfo
     *
     * Retrieve a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getLayerDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayerDeprecated"][0]
    ) {
        $request = $this->getLayerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Layer" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Layer" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Layer",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Layer";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Layer",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLayerDeprecatedAsync
     *
     * Retrieve a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getLayerDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayerDeprecated"][0]
    ) {
        return $this->getLayerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLayerDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a layer of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getLayerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayerDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Layer";
        $request = $this->getLayerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLayerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getLayerDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayerDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getLayerDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getLayerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getLayerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getLayerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLayersDeprecated
     *
     * Retrieve all layers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayersDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer[]
     * @deprecated
     */
    public function getLayersDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayersDeprecated"][0]
    ) {
        list($response) = $this->getLayersDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getLayersDeprecatedWithHttpInfo
     *
     * Retrieve all layers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayersDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getLayersDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayersDeprecated"][0]
    ) {
        $request = $this->getLayersDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Layer[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Layer[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Layer[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Layer[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Layer[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLayersDeprecatedAsync
     *
     * Retrieve all layers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getLayersDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayersDeprecated"][0]
    ) {
        return $this->getLayersDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getLayersDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all layers of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getLayersDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayersDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Layer[]";
        $request = $this->getLayersDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLayersDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLayersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getLayersDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getLayersDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getLayersDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getLayersDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getLayersDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMaterialDeprecated
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material
     * @deprecated
     */
    public function getMaterialDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialDeprecated"][0]
    ) {
        list($response) = $this->getMaterialDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getMaterialDeprecatedWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getMaterialDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialDeprecated"][0]
    ) {
        $request = $this->getMaterialDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Material" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Material" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Material",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Material";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Material",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMaterialDeprecatedAsync
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getMaterialDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialDeprecated"][0]
    ) {
        return $this->getMaterialDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getMaterialDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a material of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getMaterialDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Material";
        $request = $this->getMaterialDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMaterialDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this material. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getMaterialDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getMaterialDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getMaterialDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getMaterialDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getMaterialDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getMaterialDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMaterialsDeprecated
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Material[]
     * @deprecated
     */
    public function getMaterialsDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialsDeprecated"][0]
    ) {
        list($response) = $this->getMaterialsDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getMaterialsDeprecatedWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Material[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getMaterialsDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialsDeprecated"][0]
    ) {
        $request = $this->getMaterialsDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Material[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Material[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Material[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Material[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Material[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMaterialsDeprecatedAsync
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getMaterialsDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialsDeprecated"][0]
    ) {
        return $this->getMaterialsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getMaterialsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all materials of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getMaterialsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Material[]";
        $request = $this->getMaterialsDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMaterialsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMaterialsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getMaterialsDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getMaterialsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getMaterialsDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling getMaterialsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getMaterialsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getMaterialsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/material";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessorHandlerDeprecated
     *
     * Retrieve a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler
     * @deprecated
     */
    public function getProcessorHandlerDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlerDeprecated"
        ][0]
    ) {
        list($response) = $this->getProcessorHandlerDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProcessorHandlerDeprecatedWithHttpInfo
     *
     * Retrieve a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getProcessorHandlerDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlerDeprecated"
        ][0]
    ) {
        $request = $this->getProcessorHandlerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProcessorHandler" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProcessorHandler" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProcessorHandler",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProcessorHandler";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProcessorHandler",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessorHandlerDeprecatedAsync
     *
     * Retrieve a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getProcessorHandlerDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlerDeprecated"
        ][0]
    ) {
        return $this->getProcessorHandlerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProcessorHandlerDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getProcessorHandlerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlerDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProcessorHandler";
        $request = $this->getProcessorHandlerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessorHandlerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getProcessorHandlerDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlerDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProcessorHandlerDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProcessorHandlerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getProcessorHandlerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProcessorHandlerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessorHandlersDeprecated
     *
     * Get all processor handlers
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlersDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler[]
     * @deprecated
     */
    public function getProcessorHandlersDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlersDeprecated"
        ][0]
    ) {
        list($response) = $this->getProcessorHandlersDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getProcessorHandlersDeprecatedWithHttpInfo
     *
     * Get all processor handlers
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlersDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getProcessorHandlersDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlersDeprecated"
        ][0]
    ) {
        $request = $this->getProcessorHandlersDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProcessorHandler[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProcessorHandler[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProcessorHandler[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProcessorHandler[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProcessorHandler[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessorHandlersDeprecatedAsync
     *
     * Get all processor handlers
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getProcessorHandlersDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlersDeprecated"
        ][0]
    ) {
        return $this->getProcessorHandlersDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getProcessorHandlersDeprecatedAsyncWithHttpInfo
     *
     * Get all processor handlers
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getProcessorHandlersDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlersDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProcessorHandler[]";
        $request = $this->getProcessorHandlersDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessorHandlersDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessorHandlersDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getProcessorHandlersDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getProcessorHandlersDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getProcessorHandlersDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getProcessorHandlersDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getProcessorHandlersDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertySetDeprecated
     *
     * Retrieve a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     * @deprecated
     */
    public function getPropertySetDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetDeprecated"][0]
    ) {
        list($response) = $this->getPropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getPropertySetDeprecatedWithHttpInfo
     *
     * Retrieve a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getPropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetDeprecated"][0]
    ) {
        $request = $this->getPropertySetDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\PropertySet" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertySetDeprecatedAsync
     *
     * Retrieve a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getPropertySetDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetDeprecated"][0]
    ) {
        return $this->getPropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getPropertySetDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a PropertySet of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getPropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet";
        $request = $this->getPropertySetDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getPropertySetDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getPropertySetDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getPropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getPropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPropertySetsDeprecated
     *
     * Retrieve all PropertySets of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet[]
     * @deprecated
     */
    public function getPropertySetsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetsDeprecated"][0]
    ) {
        list($response) = $this->getPropertySetsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getPropertySetsDeprecatedWithHttpInfo
     *
     * Retrieve all PropertySets of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getPropertySetsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetsDeprecated"][0]
    ) {
        $request = $this->getPropertySetsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertySet[]" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPropertySetsDeprecatedAsync
     *
     * Retrieve all PropertySets of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getPropertySetsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetsDeprecated"][0]
    ) {
        return $this->getPropertySetsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getPropertySetsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all PropertySets of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getPropertySetsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet[]";
        $request = $this->getPropertySetsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPropertySetsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPropertySetsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getPropertySetsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getPropertySetsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getPropertySetsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getPropertySetsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getPropertySetsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRawElementsDeprecated
     *
     * Retrieve all elements in a optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RawElements
     * @deprecated
     */
    public function getRawElementsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElementsDeprecated"][0]
    ) {
        list($response) = $this->getRawElementsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getRawElementsDeprecatedWithHttpInfo
     *
     * Retrieve all elements in a optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RawElements, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getRawElementsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElementsDeprecated"][0]
    ) {
        $request = $this->getRawElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\RawElements" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\RawElements" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\RawElements",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\RawElements";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\RawElements",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRawElementsDeprecatedAsync
     *
     * Retrieve all elements in a optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getRawElementsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElementsDeprecated"][0]
    ) {
        return $this->getRawElementsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getRawElementsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all elements in a optimized format
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getRawElementsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElementsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\RawElements";
        $request = $this->getRawElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRawElementsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRawElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getRawElementsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getRawElementsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getRawElementsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getRawElementsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getRawElementsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/raw";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimpleElementDeprecated
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SimpleElement
     * @deprecated
     */
    public function getSimpleElementDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "getSimpleElementDeprecated"
        ][0]
    ) {
        list($response) = $this->getSimpleElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSimpleElementDeprecatedWithHttpInfo
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SimpleElement, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getSimpleElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "getSimpleElementDeprecated"
        ][0]
    ) {
        $request = $this->getSimpleElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\SimpleElement" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\SimpleElement" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\SimpleElement",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\SimpleElement";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\SimpleElement",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimpleElementDeprecatedAsync
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSimpleElementDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "getSimpleElementDeprecated"
        ][0]
    ) {
        return $this->getSimpleElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSimpleElementDeprecatedAsyncWithHttpInfo
     *
     * Retrieve an element of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSimpleElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "getSimpleElementDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\SimpleElement";
        $request = $this->getSimpleElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimpleElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getSimpleElementDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "getSimpleElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSimpleElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSimpleElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSimpleElementDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getSimpleElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}/simple";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimpleElementsDeprecated
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SimpleElement
     * @deprecated
     */
    public function getSimpleElementsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getSimpleElementsDeprecated"
        ][0]
    ) {
        list($response) = $this->getSimpleElementsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSimpleElementsDeprecatedWithHttpInfo
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SimpleElement, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getSimpleElementsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getSimpleElementsDeprecated"
        ][0]
    ) {
        $request = $this->getSimpleElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\SimpleElement" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\SimpleElement" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\SimpleElement",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\SimpleElement";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\SimpleElement",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimpleElementsDeprecatedAsync
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSimpleElementsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getSimpleElementsDeprecated"
        ][0]
    ) {
        return $this->getSimpleElementsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSimpleElementsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all elements of a model with a simple value representation
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSimpleElementsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getSimpleElementsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\SimpleElement";
        $request = $this->getSimpleElementsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimpleElementsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSimpleElementsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getSimpleElementsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "getSimpleElementsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSimpleElementsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSimpleElementsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSimpleElementsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/simple";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpaceDeprecated
     *
     * Retrieve one space of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space
     * @deprecated
     */
    public function getSpaceDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaceDeprecated"][0]
    ) {
        list($response) = $this->getSpaceDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSpaceDeprecatedWithHttpInfo
     *
     * Retrieve one space of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getSpaceDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaceDeprecated"][0]
    ) {
        $request = $this->getSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Space" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Space" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Space",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Space";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Space",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpaceDeprecatedAsync
     *
     * Retrieve one space of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSpaceDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaceDeprecated"][0]
    ) {
        return $this->getSpaceDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSpaceDeprecatedAsyncWithHttpInfo
     *
     * Retrieve one space of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSpaceDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaceDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Space";
        $request = $this->getSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpaceDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getSpaceDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpaceDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSpaceDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSpaceDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSpaceDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSpaceDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSpacesDeprecated
     *
     * Retrieve all spaces of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space[]
     * @deprecated
     */
    public function getSpacesDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpacesDeprecated"][0]
    ) {
        list($response) = $this->getSpacesDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSpacesDeprecatedWithHttpInfo
     *
     * Retrieve all spaces of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getSpacesDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpacesDeprecated"][0]
    ) {
        $request = $this->getSpacesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Space[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Space[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Space[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Space[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Space[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSpacesDeprecatedAsync
     *
     * Retrieve all spaces of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSpacesDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpacesDeprecated"][0]
    ) {
        return $this->getSpacesDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSpacesDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all spaces of the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSpacesDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpacesDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Space[]";
        $request = $this->getSpacesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSpacesDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getSpacesDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSpacesDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSpacesDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSpacesDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSpacesDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreyDeprecated
     *
     * Retrieve a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     * @deprecated
     */
    public function getStoreyDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStoreyDeprecated"][0]
    ) {
        list($response) = $this->getStoreyDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getStoreyDeprecatedWithHttpInfo
     *
     * Retrieve a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getStoreyDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStoreyDeprecated"][0]
    ) {
        $request = $this->getStoreyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreyDeprecatedAsync
     *
     * Retrieve a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getStoreyDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStoreyDeprecated"][0]
    ) {
        return $this->getStoreyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getStoreyDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getStoreyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStoreyDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->getStoreyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getStoreyDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getStoreyDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getStoreyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getStoreyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getStoreyDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getStoreyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreyPlanPositioningDeprecated
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PositioningPlan
     * @deprecated
     */
    public function getStoreyPlanPositioningDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "getStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        list($response) = $this->getStoreyPlanPositioningDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getStoreyPlanPositioningDeprecatedWithHttpInfo
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PositioningPlan, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getStoreyPlanPositioningDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "getStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        $request = $this->getStoreyPlanPositioningDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PositioningPlan" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PositioningPlan" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PositioningPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PositioningPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PositioningPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreyPlanPositioningDeprecatedAsync
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getStoreyPlanPositioningDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "getStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        return $this->getStoreyPlanPositioningDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getStoreyPlanPositioningDeprecatedAsyncWithHttpInfo
     *
     * Retrieve the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getStoreyPlanPositioningDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "getStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PositioningPlan";
        $request = $this->getStoreyPlanPositioningDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreyPlanPositioningDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getStoreyPlanPositioningDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        string $contentType = self::contentTypes[
            "getStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getStoreyPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStoreyPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getStoreyPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getStoreyPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling getStoreyPlanPositioningDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStoreysDeprecated
     *
     * Retrieve all storeys of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey[]
     * @deprecated
     */
    public function getStoreysDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreysDeprecated"][0]
    ) {
        list($response) = $this->getStoreysDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getStoreysDeprecatedWithHttpInfo
     *
     * Retrieve all storeys of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getStoreysDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreysDeprecated"][0]
    ) {
        $request = $this->getStoreysDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoreysDeprecatedAsync
     *
     * Retrieve all storeys of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getStoreysDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreysDeprecated"][0]
    ) {
        return $this->getStoreysDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getStoreysDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all storeys of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getStoreysDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreysDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey[]";
        $request = $this->getStoreysDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStoreysDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getStoreysDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getStoreysDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getStoreysDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getStoreysDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getStoreysDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSystemDeprecated
     *
     * Retrieve a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     * @deprecated
     */
    public function getSystemDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystemDeprecated"][0]
    ) {
        list($response) = $this->getSystemDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSystemDeprecatedWithHttpInfo
     *
     * Retrieve a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getSystemDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystemDeprecated"][0]
    ) {
        $request = $this->getSystemDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\System" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\System" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\System",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\System";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\System",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSystemDeprecatedAsync
     *
     * Retrieve a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSystemDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystemDeprecated"][0]
    ) {
        return $this->getSystemDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSystemDeprecatedAsyncWithHttpInfo
     *
     * Retrieve a system of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSystemDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystemDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\System";
        $request = $this->getSystemDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSystemDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getSystemDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes["getSystemDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSystemDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSystemDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSystemDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getSystemDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSystemsDeprecated
     *
     * Retrieve all systems of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System[]
     * @deprecated
     */
    public function getSystemsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystemsDeprecated"][0]
    ) {
        list($response) = $this->getSystemsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getSystemsDeprecatedWithHttpInfo
     *
     * Retrieve all systems of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getSystemsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystemsDeprecated"][0]
    ) {
        $request = $this->getSystemsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\System[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\System[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\System[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\System[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\System[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSystemsDeprecatedAsync
     *
     * Retrieve all systems of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSystemsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystemsDeprecated"][0]
    ) {
        return $this->getSystemsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getSystemsDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all systems of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getSystemsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystemsDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\System[]";
        $request = $this->getSystemsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSystemsDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getSystemsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getSystemsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getSystemsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getSystemsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getSystemsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTilesetDeprecated
     *
     * Retrieve the tileset of the model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $tile_format tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function getTilesetDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTilesetDeprecated"][0]
    ) {
        $this->getTilesetDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $tile_format,
            $contentType
        );
    }

    /**
     * Operation getTilesetDeprecatedWithHttpInfo
     *
     * Retrieve the tileset of the model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getTilesetDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTilesetDeprecated"][0]
    ) {
        $request = $this->getTilesetDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $tile_format,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getTilesetDeprecatedAsync
     *
     * Retrieve the tileset of the model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getTilesetDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTilesetDeprecated"][0]
    ) {
        return $this->getTilesetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $tile_format,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getTilesetDeprecatedAsyncWithHttpInfo
     *
     * Retrieve the tileset of the model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getTilesetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTilesetDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->getTilesetDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $tile_format,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTilesetDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $tile_format (optional, default to 'pnts')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTilesetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getTilesetDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $tile_format = "pnts",
        string $contentType = self::contentTypes["getTilesetDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getTilesetDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTilesetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getTilesetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/tileset";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $tile_format,
                "tile_format", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZoneDeprecated
     *
     * Retrieve one zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone
     * @deprecated
     */
    public function getZoneDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZoneDeprecated"][0]
    ) {
        list($response) = $this->getZoneDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getZoneDeprecatedWithHttpInfo
     *
     * Retrieve one zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getZoneDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZoneDeprecated"][0]
    ) {
        $request = $this->getZoneDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Zone" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Zone" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Zone",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Zone";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Zone",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneDeprecatedAsync
     *
     * Retrieve one zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getZoneDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZoneDeprecated"][0]
    ) {
        return $this->getZoneDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getZoneDeprecatedAsyncWithHttpInfo
     *
     * Retrieve one zone of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getZoneDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZoneDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Zone";
        $request = $this->getZoneDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZoneDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getZoneDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes["getZoneDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZoneDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getZoneDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getZoneDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZoneDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZoneSpaceDeprecated
     *
     * Retrieve one space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     * @deprecated
     */
    public function getZoneSpaceDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaceDeprecated"][0]
    ) {
        list($response) = $this->getZoneSpaceDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getZoneSpaceDeprecatedWithHttpInfo
     *
     * Retrieve one space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getZoneSpaceDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaceDeprecated"][0]
    ) {
        $request = $this->getZoneSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ZoneSpace" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ZoneSpace" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ZoneSpace",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ZoneSpace";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ZoneSpace",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneSpaceDeprecatedAsync
     *
     * Retrieve one space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getZoneSpaceDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaceDeprecated"][0]
    ) {
        return $this->getZoneSpaceDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getZoneSpaceDeprecatedAsyncWithHttpInfo
     *
     * Retrieve one space of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getZoneSpaceDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaceDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ZoneSpace";
        $request = $this->getZoneSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZoneSpaceDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getZoneSpaceDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpaceDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling getZoneSpaceDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZoneSpacesDeprecated
     *
     * Retrieve all spaces of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace[]
     * @deprecated
     */
    public function getZoneSpacesDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpacesDeprecated"][0]
    ) {
        list($response) = $this->getZoneSpacesDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getZoneSpacesDeprecatedWithHttpInfo
     *
     * Retrieve all spaces of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getZoneSpacesDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpacesDeprecated"][0]
    ) {
        $request = $this->getZoneSpacesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ZoneSpace[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ZoneSpace[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ZoneSpace[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ZoneSpace[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ZoneSpace[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZoneSpacesDeprecatedAsync
     *
     * Retrieve all spaces of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getZoneSpacesDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpacesDeprecated"][0]
    ) {
        return $this->getZoneSpacesDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getZoneSpacesDeprecatedAsyncWithHttpInfo
     *
     * Retrieve all spaces of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getZoneSpacesDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpacesDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ZoneSpace[]";
        $request = $this->getZoneSpacesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZoneSpacesDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZoneSpacesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getZoneSpacesDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        string $contentType = self::contentTypes["getZoneSpacesDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZoneSpacesDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getZoneSpacesDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZoneSpacesDeprecated'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling getZoneSpacesDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZonesDeprecated
     *
     * Retrieve zones of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZonesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone[]
     * @deprecated
     */
    public function getZonesDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZonesDeprecated"][0]
    ) {
        list($response) = $this->getZonesDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $color,
            $contentType
        );
        return $response;
    }

    /**
     * Operation getZonesDeprecatedWithHttpInfo
     *
     * Retrieve zones of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZonesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getZonesDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZonesDeprecated"][0]
    ) {
        $request = $this->getZonesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $color,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Zone[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Zone[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Zone[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Zone[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Zone[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZonesDeprecatedAsync
     *
     * Retrieve zones of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZonesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getZonesDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZonesDeprecated"][0]
    ) {
        return $this->getZonesDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $color,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation getZonesDeprecatedAsyncWithHttpInfo
     *
     * Retrieve zones of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZonesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getZonesDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZonesDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Zone[]";
        $request = $this->getZonesDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $color,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZonesDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $color (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getZonesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getZonesDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $color = null,
        string $contentType = self::contentTypes["getZonesDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling getZonesDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling getZonesDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling getZonesDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // query params
        $queryParams = array_merge(
            $queryParams,
            ObjectSerializer::toQueryValue(
                $color,
                "color", // param base name
                "string", // openApiType
                "form", // style
                true, // explode
                false // required
            ) ?? []
        );

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation launchNewCheckDeprecated
     *
     * Launch a new check on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheckDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function launchNewCheckDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheckDeprecated"][0]
    ) {
        $this->launchNewCheckDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );
    }

    /**
     * Operation launchNewCheckDeprecatedWithHttpInfo
     *
     * Launch a new check on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheckDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function launchNewCheckDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheckDeprecated"][0]
    ) {
        $request = $this->launchNewCheckDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation launchNewCheckDeprecatedAsync
     *
     * Launch a new check on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheckDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function launchNewCheckDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheckDeprecated"][0]
    ) {
        return $this->launchNewCheckDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation launchNewCheckDeprecatedAsyncWithHttpInfo
     *
     * Launch a new check on the model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheckDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function launchNewCheckDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheckDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->launchNewCheckDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $ifc_checker_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'launchNewCheckDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\IfcCheckerRequest $ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['launchNewCheckDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function launchNewCheckDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $ifc_checker_request = null,
        string $contentType = self::contentTypes["launchNewCheckDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling launchNewCheckDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling launchNewCheckDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling launchNewCheckDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling launchNewCheckDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}/launch-check";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_checker_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_checker_request
                    )
                );
            } else {
                $httpBody = $ifc_checker_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation linkDocumentsOfElementDeprecated
     *
     * Link one or many documents to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Document[]
     * @deprecated
     */
    public function linkDocumentsOfElementDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "linkDocumentsOfElementDeprecated"
        ][0]
    ) {
        list($response) = $this->linkDocumentsOfElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );
        return $response;
    }

    /**
     * Operation linkDocumentsOfElementDeprecatedWithHttpInfo
     *
     * Link one or many documents to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function linkDocumentsOfElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "linkDocumentsOfElementDeprecated"
        ][0]
    ) {
        $request = $this->linkDocumentsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\Document[]" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Document[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Document[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Document[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Document[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation linkDocumentsOfElementDeprecatedAsync
     *
     * Link one or many documents to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function linkDocumentsOfElementDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "linkDocumentsOfElementDeprecated"
        ][0]
    ) {
        return $this->linkDocumentsOfElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation linkDocumentsOfElementDeprecatedAsyncWithHttpInfo
     *
     * Link one or many documents to an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function linkDocumentsOfElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "linkDocumentsOfElementDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Document[]";
        $request = $this->linkDocumentsOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'linkDocumentsOfElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['linkDocumentsOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function linkDocumentsOfElementDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "linkDocumentsOfElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling linkDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling linkDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling linkDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling linkDocumentsOfElementDeprecated'
            );
        }

        // verify the required parameter 'request_body' is set
        if (
            $request_body === null ||
            (is_array($request_body) && count($request_body) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling linkDocumentsOfElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($request_body)
                );
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listClassificationElementRelationsDeprecated
     *
     * List all associations between classifications and elements
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ElementClassificationRelation[]
     * @deprecated
     */
    public function listClassificationElementRelationsDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelationsDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->listClassificationElementRelationsDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );
        return $response;
    }

    /**
     * Operation listClassificationElementRelationsDeprecatedWithHttpInfo
     *
     * List all associations between classifications and elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ElementClassificationRelation[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function listClassificationElementRelationsDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelationsDeprecated"
        ][0]
    ) {
        $request = $this->listClassificationElementRelationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ElementClassificationRelation[]" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ElementClassificationRelation[]" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ElementClassificationRelation[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType =
                "\OpenAPI\Client\Model\ElementClassificationRelation[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ElementClassificationRelation[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listClassificationElementRelationsDeprecatedAsync
     *
     * List all associations between classifications and elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function listClassificationElementRelationsDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelationsDeprecated"
        ][0]
    ) {
        return $this->listClassificationElementRelationsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation listClassificationElementRelationsDeprecatedAsyncWithHttpInfo
     *
     * List all associations between classifications and elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function listClassificationElementRelationsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelationsDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ElementClassificationRelation[]";
        $request = $this->listClassificationElementRelationsDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listClassificationElementRelationsDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listClassificationElementRelationsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function listClassificationElementRelationsDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "listClassificationElementRelationsDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling listClassificationElementRelationsDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling listClassificationElementRelationsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling listClassificationElementRelationsDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification-element";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "GET",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mergeIfcsDeprecated
     *
     * Merge IFC files
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function mergeIfcsDeprecated(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcsDeprecated"][0]
    ) {
        $this->mergeIfcsDeprecatedWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $ifc_merge_request,
            $contentType
        );
    }

    /**
     * Operation mergeIfcsDeprecatedWithHttpInfo
     *
     * Merge IFC files
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function mergeIfcsDeprecatedWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcsDeprecated"][0]
    ) {
        $request = $this->mergeIfcsDeprecatedRequest(
            $cloud_pk,
            $project_pk,
            $ifc_merge_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation mergeIfcsDeprecatedAsync
     *
     * Merge IFC files
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function mergeIfcsDeprecatedAsync(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcsDeprecated"][0]
    ) {
        return $this->mergeIfcsDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $project_pk,
            $ifc_merge_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation mergeIfcsDeprecatedAsyncWithHttpInfo
     *
     * Merge IFC files
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function mergeIfcsDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcsDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->mergeIfcsDeprecatedRequest(
            $cloud_pk,
            $project_pk,
            $ifc_merge_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mergeIfcsDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcMergeRequest $ifc_merge_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mergeIfcsDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function mergeIfcsDeprecatedRequest(
        $cloud_pk,
        $project_pk,
        $ifc_merge_request,
        string $contentType = self::contentTypes["mergeIfcsDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling mergeIfcsDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling mergeIfcsDeprecated'
            );
        }

        // verify the required parameter 'ifc_merge_request' is set
        if (
            $ifc_merge_request === null ||
            (is_array($ifc_merge_request) && count($ifc_merge_request) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_merge_request when calling mergeIfcsDeprecated'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/ifc/merge";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_merge_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_merge_request
                    )
                );
            } else {
                $httpBody = $ifc_merge_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation optimizeIfcDeprecated
     *
     * Optimize the IFC
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function optimizeIfcDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfcDeprecated"][0]
    ) {
        $this->optimizeIfcDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_optimize_request,
            $contentType
        );
    }

    /**
     * Operation optimizeIfcDeprecatedWithHttpInfo
     *
     * Optimize the IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function optimizeIfcDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfcDeprecated"][0]
    ) {
        $request = $this->optimizeIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_optimize_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation optimizeIfcDeprecatedAsync
     *
     * Optimize the IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function optimizeIfcDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfcDeprecated"][0]
    ) {
        return $this->optimizeIfcDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_optimize_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation optimizeIfcDeprecatedAsyncWithHttpInfo
     *
     * Optimize the IFC
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function optimizeIfcDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfcDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->optimizeIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $ifc_optimize_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'optimizeIfcDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\IfcOptimizeRequest $ifc_optimize_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['optimizeIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function optimizeIfcDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $ifc_optimize_request = null,
        string $contentType = self::contentTypes["optimizeIfcDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling optimizeIfcDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling optimizeIfcDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling optimizeIfcDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/optimize";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($ifc_optimize_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $ifc_optimize_request
                    )
                );
            } else {
                $httpBody = $ifc_optimize_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeAllElementPropertySetDeprecated
     *
     * Remove all property sets from element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $ifc_pk ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function removeAllElementPropertySetDeprecated(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySetDeprecated"
        ][0]
    ) {
        $this->removeAllElementPropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation removeAllElementPropertySetDeprecatedWithHttpInfo
     *
     * Remove all property sets from element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function removeAllElementPropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySetDeprecated"
        ][0]
    ) {
        $request = $this->removeAllElementPropertySetDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeAllElementPropertySetDeprecatedAsync
     *
     * Remove all property sets from element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeAllElementPropertySetDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySetDeprecated"
        ][0]
    ) {
        return $this->removeAllElementPropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeAllElementPropertySetDeprecatedAsyncWithHttpInfo
     *
     * Remove all property sets from element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeAllElementPropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySetDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeAllElementPropertySetDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeAllElementPropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAllElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function removeAllElementPropertySetDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeAllElementPropertySetDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeAllElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeAllElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeAllElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeAllElementPropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/all";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeClassificationOfElementDeprecated
     *
     * Remove a classification from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function removeClassificationOfElementDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElementDeprecated"
        ][0]
    ) {
        $this->removeClassificationOfElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation removeClassificationOfElementDeprecatedWithHttpInfo
     *
     * Remove a classification from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function removeClassificationOfElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElementDeprecated"
        ][0]
    ) {
        $request = $this->removeClassificationOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeClassificationOfElementDeprecatedAsync
     *
     * Remove a classification from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeClassificationOfElementDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElementDeprecated"
        ][0]
    ) {
        return $this->removeClassificationOfElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeClassificationOfElementDeprecatedAsyncWithHttpInfo
     *
     * Remove a classification from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeClassificationOfElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElementDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeClassificationOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeClassificationOfElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this classification. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeClassificationOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function removeClassificationOfElementDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeClassificationOfElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeClassificationOfElementDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeClassificationOfElementDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeClassificationOfElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeClassificationOfElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeClassificationOfElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/classification/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeDocumentOfElementDeprecated
     *
     * Remove a documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function removeDocumentOfElementDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeDocumentOfElementDeprecated"
        ][0]
    ) {
        $this->removeDocumentOfElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation removeDocumentOfElementDeprecatedWithHttpInfo
     *
     * Remove a documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function removeDocumentOfElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeDocumentOfElementDeprecated"
        ][0]
    ) {
        $request = $this->removeDocumentOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeDocumentOfElementDeprecatedAsync
     *
     * Remove a documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeDocumentOfElementDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeDocumentOfElementDeprecated"
        ][0]
    ) {
        return $this->removeDocumentOfElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeDocumentOfElementDeprecatedAsyncWithHttpInfo
     *
     * Remove a documents from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeDocumentOfElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeDocumentOfElementDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeDocumentOfElementDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeDocumentOfElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this document. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeDocumentOfElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function removeDocumentOfElementDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeDocumentOfElementDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeDocumentOfElementDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeDocumentOfElementDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeDocumentOfElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeDocumentOfElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeDocumentOfElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/documents/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetDeprecated
     *
     * Remove a PropertySet from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function removeElementPropertySetDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetDeprecated"
        ][0]
    ) {
        $this->removeElementPropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation removeElementPropertySetDeprecatedWithHttpInfo
     *
     * Remove a PropertySet from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function removeElementPropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetDeprecated"
        ][0]
    ) {
        $request = $this->removeElementPropertySetDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetDeprecatedAsync
     *
     * Remove a PropertySet from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementPropertySetDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetDeprecated"
        ][0]
    ) {
        return $this->removeElementPropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementPropertySetDeprecatedAsyncWithHttpInfo
     *
     * Remove a PropertySet from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementPropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementPropertySetDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function removeElementPropertySetDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementPropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionDeprecated
     *
     * Delete a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        $this->removeElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo
     *
     * Delete a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        $request = $this->removeElementPropertySetPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionDeprecatedAsync
     *
     * Delete a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        return $this->removeElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo
     *
     * Delete a Definition to a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementPropertySetPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetPropertyDefinitionDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling removeElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetPropertyDefinitionDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitDeprecated
     *
     * Remove a Unit from a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionUnitDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        $this->removeElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo
     *
     * Remove a Unit from a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionUnitDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        $request = $this->removeElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitDeprecatedAsync
     *
     * Remove a Unit from a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionUnitDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        return $this->removeElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo
     *
     * Remove a Unit from a Definition
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionUnitDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $property_pk,
            $propertydefinition_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetPropertyDefinitionUnitDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $property_pk A unique integer value identifying this property. (required)
     * @param  int $propertydefinition_pk A unique integer value identifying this property definition. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDefinitionUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function removeElementPropertySetPropertyDefinitionUnitDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $property_pk,
        $propertydefinition_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDefinitionUnitDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'property_pk' is set
        if (
            $property_pk === null ||
            (is_array($property_pk) && count($property_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_pk when calling removeElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'propertydefinition_pk' is set
        if (
            $propertydefinition_pk === null ||
            (is_array($propertydefinition_pk) &&
                count($propertydefinition_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertydefinition_pk when calling removeElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetPropertyDefinitionUnitDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{property_pk}/propertydefinition/{propertydefinition_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($property_pk !== null) {
            $resourcePath = str_replace(
                "{" . "property_pk" . "}",
                ObjectSerializer::toPathValue($property_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertydefinition_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertydefinition_pk" . "}",
                ObjectSerializer::toPathValue($propertydefinition_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDeprecated
     *
     * Remove a property from a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function removeElementPropertySetPropertyDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $this->removeElementPropertySetPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );
    }

    /**
     * Operation removeElementPropertySetPropertyDeprecatedWithHttpInfo
     *
     * Remove a property from a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function removeElementPropertySetPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $request = $this->removeElementPropertySetPropertyDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementPropertySetPropertyDeprecatedAsync
     *
     * Remove a property from a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementPropertySetPropertyDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        return $this->removeElementPropertySetPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementPropertySetPropertyDeprecatedAsyncWithHttpInfo
     *
     * Remove a property from a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementPropertySetPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementPropertySetPropertyDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementPropertySetPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function removeElementPropertySetPropertyDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        string $contentType = self::contentTypes[
            "removeElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling removeElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling removeElementPropertySetPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeElementsFromClassificationDeprecated
     *
     * Remove the classification from all elements
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function removeElementsFromClassificationDeprecated(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassificationDeprecated"
        ][0]
    ) {
        $this->removeElementsFromClassificationDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $uuid,
            $contentType
        );
    }

    /**
     * Operation removeElementsFromClassificationDeprecatedWithHttpInfo
     *
     * Remove the classification from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function removeElementsFromClassificationDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassificationDeprecated"
        ][0]
    ) {
        $request = $this->removeElementsFromClassificationDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeElementsFromClassificationDeprecatedAsync
     *
     * Remove the classification from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementsFromClassificationDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassificationDeprecated"
        ][0]
    ) {
        return $this->removeElementsFromClassificationDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $uuid,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeElementsFromClassificationDeprecatedAsyncWithHttpInfo
     *
     * Remove the classification from all elements
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function removeElementsFromClassificationDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassificationDeprecated"
        ][0]
    ) {
        $returnType = "";
        $request = $this->removeElementsFromClassificationDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $model_classification_pk,
            $project_pk,
            $uuid,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeElementsFromClassificationDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $model_classification_pk A unique integer value identifying this classification. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeElementsFromClassificationDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function removeElementsFromClassificationDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $model_classification_pk,
        $project_pk,
        $uuid,
        string $contentType = self::contentTypes[
            "removeElementsFromClassificationDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling removeElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling removeElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'model_classification_pk' is set
        if (
            $model_classification_pk === null ||
            (is_array($model_classification_pk) &&
                count($model_classification_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model_classification_pk when calling removeElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling removeElementsFromClassificationDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling removeElementsFromClassificationDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/classification/{model_classification_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($model_classification_pk !== null) {
            $resourcePath = str_replace(
                "{" . "model_classification_pk" . "}",
                ObjectSerializer::toPathValue($model_classification_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "DELETE",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reprocessIfcDeprecated
     *
     * Reprocess Model file
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     * @deprecated
     */
    public function reprocessIfcDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessIfcDeprecated"][0]
    ) {
        $this->reprocessIfcDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );
    }

    /**
     * Operation reprocessIfcDeprecatedWithHttpInfo
     *
     * Reprocess Model file
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function reprocessIfcDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessIfcDeprecated"][0]
    ) {
        $request = $this->reprocessIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation reprocessIfcDeprecatedAsync
     *
     * Reprocess Model file
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function reprocessIfcDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessIfcDeprecated"][0]
    ) {
        return $this->reprocessIfcDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation reprocessIfcDeprecatedAsyncWithHttpInfo
     *
     * Reprocess Model file
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function reprocessIfcDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessIfcDeprecated"][0]
    ) {
        $returnType = "";
        $request = $this->reprocessIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [
                        null,
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reprocessIfcDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reprocessIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function reprocessIfcDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        string $contentType = self::contentTypes["reprocessIfcDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling reprocessIfcDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling reprocessIfcDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling reprocessIfcDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/reprocess";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "POST",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccessTokenDeprecated
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcAccessToken
     * @deprecated
     */
    public function updateAccessTokenDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "updateAccessTokenDeprecated"
        ][0]
    ) {
        list($response) = $this->updateAccessTokenDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $patched_ifc_access_token_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateAccessTokenDeprecatedWithHttpInfo
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcAccessToken, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateAccessTokenDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "updateAccessTokenDeprecated"
        ][0]
    ) {
        $request = $this->updateAccessTokenDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $patched_ifc_access_token_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcAccessToken" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\IfcAccessToken" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcAccessToken",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcAccessToken",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccessTokenDeprecatedAsync
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateAccessTokenDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "updateAccessTokenDeprecated"
        ][0]
    ) {
        return $this->updateAccessTokenDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $patched_ifc_access_token_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateAccessTokenDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a token
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateAccessTokenDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "updateAccessTokenDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcAccessToken";
        $request = $this->updateAccessTokenDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $token,
            $patched_ifc_access_token_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccessTokenDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $token (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcAccessTokenRequest $patched_ifc_access_token_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessTokenDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateAccessTokenDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $token,
        $patched_ifc_access_token_request = null,
        string $contentType = self::contentTypes[
            "updateAccessTokenDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateAccessTokenDeprecated'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling updateAccessTokenDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/access_token/{token}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                "{" . "token" . "}",
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_ifc_access_token_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_ifc_access_token_request
                    )
                );
            } else {
                $httpBody = $patched_ifc_access_token_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBuildingDeprecated
     *
     * Update some fields of a building
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Building
     * @deprecated
     */
    public function updateBuildingDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuildingDeprecated"][0]
    ) {
        list($response) = $this->updateBuildingDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateBuildingDeprecatedWithHttpInfo
     *
     * Update some fields of a building
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Building, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateBuildingDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuildingDeprecated"][0]
    ) {
        $request = $this->updateBuildingDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Building" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Building" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Building",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Building";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Building",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBuildingDeprecatedAsync
     *
     * Update some fields of a building
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateBuildingDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuildingDeprecated"][0]
    ) {
        return $this->updateBuildingDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateBuildingDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a building
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateBuildingDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuildingDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Building";
        $request = $this->updateBuildingDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBuildingDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateBuildingDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateBuildingDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateBuildingDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateBuildingDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateBuildingDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateBuildingDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_storey_building_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_storey_building_request
                    )
                );
            } else {
                $httpBody = $patched_storey_building_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBuildingPlanPositioningDeprecated
     *
     * Update the postioning of the plan in the building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PositioningPlan
     * @deprecated
     */
    public function updateBuildingPlanPositioningDeprecated(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->updateBuildingPlanPositioningDeprecatedWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_positioning_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateBuildingPlanPositioningDeprecatedWithHttpInfo
     *
     * Update the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PositioningPlan, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateBuildingPlanPositioningDeprecatedWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        $request = $this->updateBuildingPlanPositioningDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_positioning_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PositioningPlan" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PositioningPlan" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PositioningPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PositioningPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PositioningPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBuildingPlanPositioningDeprecatedAsync
     *
     * Update the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateBuildingPlanPositioningDeprecatedAsync(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        return $this->updateBuildingPlanPositioningDeprecatedAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_positioning_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateBuildingPlanPositioningDeprecatedAsyncWithHttpInfo
     *
     * Update the postioning of the plan in the building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateBuildingPlanPositioningDeprecatedAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PositioningPlan";
        $request = $this->updateBuildingPlanPositioningDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_positioning_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBuildingPlanPositioningDeprecated'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuildingPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateBuildingPlanPositioningDeprecatedRequest(
        $building_uuid,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateBuildingPlanPositioningDeprecated"
        ][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling updateBuildingPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateBuildingPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateBuildingPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateBuildingPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateBuildingPlanPositioningDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/{id}/positioning";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_positioning_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_positioning_plan_request
                    )
                );
            } else {
                $httpBody = $patched_positioning_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCheckerDeprecated
     *
     * Update some fields of a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\IfcChecker
     * @deprecated
     */
    public function updateCheckerDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateCheckerDeprecated"][0]
    ) {
        list($response) = $this->updateCheckerDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_ifc_checker_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateCheckerDeprecatedWithHttpInfo
     *
     * Update some fields of a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\IfcChecker, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateCheckerDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateCheckerDeprecated"][0]
    ) {
        $request = $this->updateCheckerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_ifc_checker_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\IfcChecker" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\IfcChecker" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\IfcChecker",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\IfcChecker";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\IfcChecker",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCheckerDeprecatedAsync
     *
     * Update some fields of a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateCheckerDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateCheckerDeprecated"][0]
    ) {
        return $this->updateCheckerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_ifc_checker_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCheckerDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a checker of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateCheckerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateCheckerDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\IfcChecker";
        $request = $this->updateCheckerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_ifc_checker_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCheckerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this ifc checker. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedIfcCheckerRequest $patched_ifc_checker_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateCheckerDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_ifc_checker_request = null,
        string $contentType = self::contentTypes["updateCheckerDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateCheckerDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCheckerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateCheckerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateCheckerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_ifc_checker_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_ifc_checker_request
                    )
                );
            } else {
                $httpBody = $patched_ifc_checker_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCheckerResultDeprecated
     *
     * Update some fields of a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CheckerResult
     * @deprecated
     */
    public function updateCheckerResultDeprecated(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes[
            "updateCheckerResultDeprecated"
        ][0]
    ) {
        list($response) = $this->updateCheckerResultDeprecatedWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_checker_result_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateCheckerResultDeprecatedWithHttpInfo
     *
     * Update some fields of a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CheckerResult, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateCheckerResultDeprecatedWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes[
            "updateCheckerResultDeprecated"
        ][0]
    ) {
        $request = $this->updateCheckerResultDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_checker_result_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\CheckerResult" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\CheckerResult" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\CheckerResult",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\CheckerResult";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\CheckerResult",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCheckerResultDeprecatedAsync
     *
     * Update some fields of a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateCheckerResultDeprecatedAsync(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes[
            "updateCheckerResultDeprecated"
        ][0]
    ) {
        return $this->updateCheckerResultDeprecatedAsyncWithHttpInfo(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_checker_result_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateCheckerResultDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a CheckerResult
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateCheckerResultDeprecatedAsyncWithHttpInfo(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes[
            "updateCheckerResultDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\CheckerResult";
        $request = $this->updateCheckerResultDeprecatedRequest(
            $checker_pk,
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_checker_result_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCheckerResultDeprecated'
     *
     * @param  int $checker_pk A unique integer value identifying this ifc checker. (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this checker result. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedCheckerResultRequest $patched_checker_result_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCheckerResultDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateCheckerResultDeprecatedRequest(
        $checker_pk,
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_checker_result_request = null,
        string $contentType = self::contentTypes[
            "updateCheckerResultDeprecated"
        ][0]
    ) {
        // verify the required parameter 'checker_pk' is set
        if (
            $checker_pk === null ||
            (is_array($checker_pk) && count($checker_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checker_pk when calling updateCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateCheckerResultDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateCheckerResultDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/checker/{checker_pk}/result/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($checker_pk !== null) {
            $resourcePath = str_replace(
                "{" . "checker_pk" . "}",
                ObjectSerializer::toPathValue($checker_pk),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_checker_result_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_checker_result_request
                    )
                );
            } else {
                $httpBody = $patched_checker_result_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateElementDeprecated
     *
     * Update some fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Element
     * @deprecated
     */
    public function updateElementDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElementDeprecated"][0]
    ) {
        list($response) = $this->updateElementDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_element_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateElementDeprecatedWithHttpInfo
     *
     * Update some fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Element, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateElementDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElementDeprecated"][0]
    ) {
        $request = $this->updateElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_element_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Element" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Element" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Element",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Element";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Element",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateElementDeprecatedAsync
     *
     * Update some fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateElementDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElementDeprecated"][0]
    ) {
        return $this->updateElementDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_element_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateElementDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateElementDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElementDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Element";
        $request = $this->updateElementDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_element_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateElementDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedElementRequest $patched_element_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateElementDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_element_request = null,
        string $contentType = self::contentTypes["updateElementDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateElementDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateElementDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateElementDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateElementDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_element_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_element_request
                    )
                );
            } else {
                $httpBody = $patched_element_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateElementPropertySetPropertyDeprecated
     *
     * Update a property from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     * @deprecated
     */
    public function updateElementPropertySetPropertyDeprecated(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->updateElementPropertySetPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $patched_property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateElementPropertySetPropertyDeprecatedWithHttpInfo
     *
     * Update a property from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateElementPropertySetPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $request = $this->updateElementPropertySetPropertyDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $patched_property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateElementPropertySetPropertyDeprecatedAsync
     *
     * Update a property from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateElementPropertySetPropertyDeprecatedAsync(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        return $this->updateElementPropertySetPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $patched_property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateElementPropertySetPropertyDeprecatedAsyncWithHttpInfo
     *
     * Update a property from an element
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateElementPropertySetPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->updateElementPropertySetPropertyDeprecatedRequest(
            $cloud_pk,
            $element_uuid,
            $id,
            $ifc_pk,
            $project_pk,
            $propertyset_pk,
            $patched_property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateElementPropertySetPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  string $element_uuid (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $propertyset_pk A unique integer value identifying this property set. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateElementPropertySetPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateElementPropertySetPropertyDeprecatedRequest(
        $cloud_pk,
        $element_uuid,
        $id,
        $ifc_pk,
        $project_pk,
        $propertyset_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateElementPropertySetPropertyDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'element_uuid' is set
        if (
            $element_uuid === null ||
            (is_array($element_uuid) && count($element_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $element_uuid when calling updateElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateElementPropertySetPropertyDeprecated'
            );
        }

        // verify the required parameter 'propertyset_pk' is set
        if (
            $propertyset_pk === null ||
            (is_array($propertyset_pk) && count($propertyset_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $propertyset_pk when calling updateElementPropertySetPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/element/{element_uuid}/propertyset/{propertyset_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($element_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "element_uuid" . "}",
                ObjectSerializer::toPathValue($element_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($propertyset_pk !== null) {
            $resourcePath = str_replace(
                "{" . "propertyset_pk" . "}",
                ObjectSerializer::toPathValue($propertyset_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_property_request
                    )
                );
            } else {
                $httpBody = $patched_property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcDeprecated
     *
     * Update some fields of a model
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Model
     * @deprecated
     */
    public function updateIfcDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateIfcDeprecated"][0]
    ) {
        list($response) = $this->updateIfcDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_model_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateIfcDeprecatedWithHttpInfo
     *
     * Update some fields of a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Model, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateIfcDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateIfcDeprecated"][0]
    ) {
        $request = $this->updateIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_model_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Model" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Model" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Model",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Model";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Model",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcDeprecatedAsync
     *
     * Update some fields of a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateIfcDeprecated"][0]
    ) {
        return $this->updateIfcDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_model_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateIfcDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a model
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateIfcDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Model";
        $request = $this->updateIfcDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $patched_model_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \OpenAPI\Client\Model\PatchedModelRequest $patched_model_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateIfcDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $patched_model_request = null,
        string $contentType = self::contentTypes["updateIfcDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcDeprecated'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_model_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_model_request
                    )
                );
            } else {
                $httpBody = $patched_model_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcFilesDeprecated
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  int $cloud_pk cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk project_pk (required)
     * @param  \SplFileObject $structure_file structure_file (optional)
     * @param  \SplFileObject $systems_file systems_file (optional)
     * @param  \SplFileObject $map_file map_file (optional)
     * @param  \SplFileObject $gltf_file gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file preview_file (optional)
     * @param  \SplFileObject $xkt_file xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelFiles
     * @deprecated
     */
    public function updateIfcFilesDeprecated(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateIfcFilesDeprecated"][0]
    ) {
        list($response) = $this->updateIfcFilesDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $structure_file,
            $systems_file,
            $map_file,
            $gltf_file,
            $gltf_with_openings_file,
            $bvh_tree_file,
            $preview_file,
            $xkt_file,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateIfcFilesDeprecatedWithHttpInfo
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelFiles, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateIfcFilesDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateIfcFilesDeprecated"][0]
    ) {
        $request = $this->updateIfcFilesDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $structure_file,
            $systems_file,
            $map_file,
            $gltf_file,
            $gltf_with_openings_file,
            $bvh_tree_file,
            $preview_file,
            $xkt_file,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ModelFiles" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ModelFiles" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ModelFiles",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ModelFiles";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ModelFiles",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcFilesDeprecatedAsync
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcFilesDeprecatedAsync(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateIfcFilesDeprecated"][0]
    ) {
        return $this->updateIfcFilesDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $project_pk,
            $structure_file,
            $systems_file,
            $map_file,
            $gltf_file,
            $gltf_with_openings_file,
            $bvh_tree_file,
            $preview_file,
            $xkt_file,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateIfcFilesDeprecatedAsyncWithHttpInfo
     *
     * Update models file (gltf, svg, structure, etc)
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcFilesDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateIfcFilesDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ModelFiles";
        $request = $this->updateIfcFilesDeprecatedRequest(
            $cloud_pk,
            $id,
            $project_pk,
            $structure_file,
            $systems_file,
            $map_file,
            $gltf_file,
            $gltf_with_openings_file,
            $bvh_tree_file,
            $preview_file,
            $xkt_file,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcFilesDeprecated'
     *
     * @param  int $cloud_pk (required)
     * @param  int $id A unique integer value identifying this model. (required)
     * @param  int $project_pk (required)
     * @param  \SplFileObject $structure_file (optional)
     * @param  \SplFileObject $systems_file (optional)
     * @param  \SplFileObject $map_file (optional)
     * @param  \SplFileObject $gltf_file (optional)
     * @param  \SplFileObject $gltf_with_openings_file (optional)
     * @param  \SplFileObject $bvh_tree_file (optional)
     * @param  \SplFileObject $preview_file (optional)
     * @param  \SplFileObject $xkt_file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcFilesDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateIfcFilesDeprecatedRequest(
        $cloud_pk,
        $id,
        $project_pk,
        $structure_file = null,
        $systems_file = null,
        $map_file = null,
        $gltf_file = null,
        $gltf_with_openings_file = null,
        $bvh_tree_file = null,
        $preview_file = null,
        $xkt_file = null,
        string $contentType = self::contentTypes["updateIfcFilesDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcFilesDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcFilesDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcFilesDeprecated'
            );
        }

        $resourcePath = "/cloud/{cloud_pk}/project/{project_pk}/ifc/{id}/files";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        // form params
        if ($structure_file !== null) {
            $multipart = true;
            $formParams["structure_file"] = [];
            $paramFiles = is_array($structure_file)
                ? $structure_file
                : [$structure_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "structure_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($systems_file !== null) {
            $multipart = true;
            $formParams["systems_file"] = [];
            $paramFiles = is_array($systems_file)
                ? $systems_file
                : [$systems_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "systems_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($map_file !== null) {
            $multipart = true;
            $formParams["map_file"] = [];
            $paramFiles = is_array($map_file) ? $map_file : [$map_file];
            foreach ($paramFiles as $paramFile) {
                $formParams["map_file"][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($gltf_file !== null) {
            $multipart = true;
            $formParams["gltf_file"] = [];
            $paramFiles = is_array($gltf_file) ? $gltf_file : [$gltf_file];
            foreach ($paramFiles as $paramFile) {
                $formParams["gltf_file"][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($gltf_with_openings_file !== null) {
            $multipart = true;
            $formParams["gltf_with_openings_file"] = [];
            $paramFiles = is_array($gltf_with_openings_file)
                ? $gltf_with_openings_file
                : [$gltf_with_openings_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "gltf_with_openings_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($bvh_tree_file !== null) {
            $multipart = true;
            $formParams["bvh_tree_file"] = [];
            $paramFiles = is_array($bvh_tree_file)
                ? $bvh_tree_file
                : [$bvh_tree_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "bvh_tree_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($preview_file !== null) {
            $multipart = true;
            $formParams["preview_file"] = [];
            $paramFiles = is_array($preview_file)
                ? $preview_file
                : [$preview_file];
            foreach ($paramFiles as $paramFile) {
                $formParams[
                    "preview_file"
                ][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }
        // form params
        if ($xkt_file !== null) {
            $multipart = true;
            $formParams["xkt_file"] = [];
            $paramFiles = is_array($xkt_file) ? $xkt_file : [$xkt_file];
            foreach ($paramFiles as $paramFile) {
                $formParams["xkt_file"][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    "rb"
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcPropertyDefinitionDeprecated
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyDefinition
     * @deprecated
     */
    public function updateIfcPropertyDefinitionDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->updateIfcPropertyDefinitionDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_definition_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateIfcPropertyDefinitionDeprecatedWithHttpInfo
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyDefinition, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateIfcPropertyDefinitionDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $request = $this->updateIfcPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_definition_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertyDefinition" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PropertyDefinition" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertyDefinition",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertyDefinition",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcPropertyDefinitionDeprecatedAsync
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcPropertyDefinitionDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        return $this->updateIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_definition_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of many PropertyDefinitions of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcPropertyDefinitionDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertyDefinition";
        $request = $this->updateIfcPropertyDefinitionDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_definition_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcPropertyDefinitionDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property definition. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyDefinitionRequest $patched_property_definition_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDefinitionDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateIfcPropertyDefinitionDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_definition_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDefinitionDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateIfcPropertyDefinitionDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcPropertyDefinitionDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertydefinition/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_property_definition_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_property_definition_request
                    )
                );
            } else {
                $httpBody = $patched_property_definition_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcPropertyDeprecated
     *
     * Update some fields of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Property
     * @deprecated
     */
    public function updateIfcPropertyDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDeprecated"
        ][0]
    ) {
        list($response) = $this->updateIfcPropertyDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateIfcPropertyDeprecatedWithHttpInfo
     *
     * Update some fields of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Property, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateIfcPropertyDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDeprecated"
        ][0]
    ) {
        $request = $this->updateIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Property" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Property" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Property",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Property";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Property",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcPropertyDeprecatedAsync
     *
     * Update some fields of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcPropertyDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDeprecated"
        ][0]
    ) {
        return $this->updateIfcPropertyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateIfcPropertyDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a Property
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcPropertyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Property";
        $request = $this->updateIfcPropertyDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcPropertyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertyRequest $patched_property_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcPropertyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateIfcPropertyDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_request = null,
        string $contentType = self::contentTypes[
            "updateIfcPropertyDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateIfcPropertyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcPropertyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/property/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_property_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_property_request
                    )
                );
            } else {
                $httpBody = $patched_property_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateIfcUnitDeprecated
     *
     * Update some fields of a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Unit
     * @deprecated
     */
    public function updateIfcUnitDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateIfcUnitDeprecated"][0]
    ) {
        list($response) = $this->updateIfcUnitDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_unit_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateIfcUnitDeprecatedWithHttpInfo
     *
     * Update some fields of a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Unit, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateIfcUnitDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateIfcUnitDeprecated"][0]
    ) {
        $request = $this->updateIfcUnitDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_unit_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Unit" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Unit" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Unit",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Unit";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Unit",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateIfcUnitDeprecatedAsync
     *
     * Update some fields of a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcUnitDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateIfcUnitDeprecated"][0]
    ) {
        return $this->updateIfcUnitDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_unit_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateIfcUnitDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a Unit of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateIfcUnitDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateIfcUnitDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Unit";
        $request = $this->updateIfcUnitDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_unit_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateIfcUnitDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this unit. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedUnitRequest $patched_unit_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateIfcUnitDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateIfcUnitDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_unit_request = null,
        string $contentType = self::contentTypes["updateIfcUnitDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateIfcUnitDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateIfcUnitDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/unit/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_unit_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_unit_request
                    )
                );
            } else {
                $httpBody = $patched_unit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLayerDeprecated
     *
     * Update some fields of a layer
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Layer
     * @deprecated
     */
    public function updateLayerDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayerDeprecated"][0]
    ) {
        list($response) = $this->updateLayerDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_layer_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateLayerDeprecatedWithHttpInfo
     *
     * Update some fields of a layer
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Layer, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateLayerDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayerDeprecated"][0]
    ) {
        $request = $this->updateLayerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_layer_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Layer" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Layer" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Layer",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Layer";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Layer",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLayerDeprecatedAsync
     *
     * Update some fields of a layer
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateLayerDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayerDeprecated"][0]
    ) {
        return $this->updateLayerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_layer_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateLayerDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a layer
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateLayerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayerDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Layer";
        $request = $this->updateLayerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_layer_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLayerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this layer. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedLayerRequest $patched_layer_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLayerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateLayerDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_layer_request = null,
        string $contentType = self::contentTypes["updateLayerDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateLayerDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateLayerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateLayerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateLayerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/layer/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_layer_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_layer_request
                    )
                );
            } else {
                $httpBody = $patched_layer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrderBuildingPlanDeprecated
     *
     * Update order of all plan of a building
     *
     * @param  string $building_uuid building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     * @deprecated
     */
    public function updateOrderBuildingPlanDeprecated(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderBuildingPlanDeprecated"
        ][0]
    ) {
        list($response) = $this->updateOrderBuildingPlanDeprecatedWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateOrderBuildingPlanDeprecatedWithHttpInfo
     *
     * Update order of all plan of a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateOrderBuildingPlanDeprecatedWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderBuildingPlanDeprecated"
        ][0]
    ) {
        $request = $this->updateOrderBuildingPlanDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrderBuildingPlanDeprecatedAsync
     *
     * Update order of all plan of a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateOrderBuildingPlanDeprecatedAsync(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderBuildingPlanDeprecated"
        ][0]
    ) {
        return $this->updateOrderBuildingPlanDeprecatedAsyncWithHttpInfo(
            $building_uuid,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateOrderBuildingPlanDeprecatedAsyncWithHttpInfo
     *
     * Update order of all plan of a building
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateOrderBuildingPlanDeprecatedAsyncWithHttpInfo(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderBuildingPlanDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->updateOrderBuildingPlanDeprecatedRequest(
            $building_uuid,
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrderBuildingPlanDeprecated'
     *
     * @param  string $building_uuid (required)
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderBuildingPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateOrderBuildingPlanDeprecatedRequest(
        $building_uuid,
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderBuildingPlanDeprecated"
        ][0]
    ) {
        // verify the required parameter 'building_uuid' is set
        if (
            $building_uuid === null ||
            (is_array($building_uuid) && count($building_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $building_uuid when calling updateOrderBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateOrderBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateOrderBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateOrderBuildingPlanDeprecated'
            );
        }

        // verify the required parameter 'request_body' is set
        if (
            $request_body === null ||
            (is_array($request_body) && count($request_body) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling updateOrderBuildingPlanDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/building/{building_uuid}/plan/order";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($building_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "building_uuid" . "}",
                ObjectSerializer::toPathValue($building_uuid),
                $resourcePath
            );
        }
        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($request_body)
                );
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrderStoreyPlanDeprecated
     *
     * Update order of all plan of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  int[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     * @deprecated
     */
    public function updateOrderStoreyPlanDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreyPlanDeprecated"
        ][0]
    ) {
        list($response) = $this->updateOrderStoreyPlanDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $request_body,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateOrderStoreyPlanDeprecatedWithHttpInfo
     *
     * Update order of all plan of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateOrderStoreyPlanDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreyPlanDeprecated"
        ][0]
    ) {
        $request = $this->updateOrderStoreyPlanDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $request_body,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrderStoreyPlanDeprecatedAsync
     *
     * Update order of all plan of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateOrderStoreyPlanDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreyPlanDeprecated"
        ][0]
    ) {
        return $this->updateOrderStoreyPlanDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $request_body,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateOrderStoreyPlanDeprecatedAsyncWithHttpInfo
     *
     * Update order of all plan of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateOrderStoreyPlanDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreyPlanDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->updateOrderStoreyPlanDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $request_body,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrderStoreyPlanDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  int[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreyPlanDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateOrderStoreyPlanDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreyPlanDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateOrderStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateOrderStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateOrderStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling updateOrderStoreyPlanDeprecated'
            );
        }

        // verify the required parameter 'request_body' is set
        if (
            $request_body === null ||
            (is_array($request_body) && count($request_body) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling updateOrderStoreyPlanDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/order";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($request_body)
                );
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrderStoreysDeprecated
     *
     * Update order of all storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey[]
     * @deprecated
     */
    public function updateOrderStoreysDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreysDeprecated"
        ][0]
    ) {
        list($response) = $this->updateOrderStoreysDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateOrderStoreysDeprecatedWithHttpInfo
     *
     * Update order of all storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey[], HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateOrderStoreysDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreysDeprecated"
        ][0]
    ) {
        $request = $this->updateOrderStoreysDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey[]" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey[]" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey[]",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey[]";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey[]",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrderStoreysDeprecatedAsync
     *
     * Update order of all storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateOrderStoreysDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreysDeprecated"
        ][0]
    ) {
        return $this->updateOrderStoreysDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateOrderStoreysDeprecatedAsyncWithHttpInfo
     *
     * Update order of all storey of a model
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateOrderStoreysDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreysDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey[]";
        $request = $this->updateOrderStoreysDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $request_body,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrderStoreysDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrderStoreysDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateOrderStoreysDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $request_body,
        string $contentType = self::contentTypes[
            "updateOrderStoreysDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateOrderStoreysDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateOrderStoreysDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateOrderStoreysDeprecated'
            );
        }

        // verify the required parameter 'request_body' is set
        if (
            $request_body === null ||
            (is_array($request_body) && count($request_body) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling updateOrderStoreysDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/order";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($request_body)
                );
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProcessorHandlerDeprecated
     *
     * Update the status of a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProcessorHandler
     * @deprecated
     */
    public function updateProcessorHandlerDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes[
            "updateProcessorHandlerDeprecated"
        ][0]
    ) {
        list($response) = $this->updateProcessorHandlerDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_processor_handler_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateProcessorHandlerDeprecatedWithHttpInfo
     *
     * Update the status of a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProcessorHandler, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateProcessorHandlerDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes[
            "updateProcessorHandlerDeprecated"
        ][0]
    ) {
        $request = $this->updateProcessorHandlerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_processor_handler_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ProcessorHandler" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\ProcessorHandler" !==
                            "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ProcessorHandler",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ProcessorHandler";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ProcessorHandler",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateProcessorHandlerDeprecatedAsync
     *
     * Update the status of a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateProcessorHandlerDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes[
            "updateProcessorHandlerDeprecated"
        ][0]
    ) {
        return $this->updateProcessorHandlerDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_processor_handler_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateProcessorHandlerDeprecatedAsyncWithHttpInfo
     *
     * Update the status of a processor handler
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateProcessorHandlerDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes[
            "updateProcessorHandlerDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ProcessorHandler";
        $request = $this->updateProcessorHandlerDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_processor_handler_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProcessorHandlerDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this processor handler. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedProcessorHandlerRequest $patched_processor_handler_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProcessorHandlerDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateProcessorHandlerDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_processor_handler_request = null,
        string $contentType = self::contentTypes[
            "updateProcessorHandlerDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateProcessorHandlerDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateProcessorHandlerDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateProcessorHandlerDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateProcessorHandlerDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/processorhandler/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_processor_handler_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_processor_handler_request
                    )
                );
            } else {
                $httpBody = $patched_processor_handler_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePropertySetDeprecated
     *
     * Update some fields of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertySet
     * @deprecated
     */
    public function updatePropertySetDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes[
            "updatePropertySetDeprecated"
        ][0]
    ) {
        list($response) = $this->updatePropertySetDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_set_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updatePropertySetDeprecatedWithHttpInfo
     *
     * Update some fields of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertySet, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updatePropertySetDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes[
            "updatePropertySetDeprecated"
        ][0]
    ) {
        $request = $this->updatePropertySetDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_set_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PropertySet" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\PropertySet" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PropertySet",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PropertySet";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PropertySet",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePropertySetDeprecatedAsync
     *
     * Update some fields of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updatePropertySetDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes[
            "updatePropertySetDeprecated"
        ][0]
    ) {
        return $this->updatePropertySetDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_set_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updatePropertySetDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a PropertySet
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updatePropertySetDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes[
            "updatePropertySetDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PropertySet";
        $request = $this->updatePropertySetDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_property_set_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePropertySetDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this property set. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedPropertySetRequest $patched_property_set_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePropertySetDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updatePropertySetDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_property_set_request = null,
        string $contentType = self::contentTypes[
            "updatePropertySetDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updatePropertySetDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updatePropertySetDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updatePropertySetDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updatePropertySetDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/propertyset/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_property_set_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_property_set_request
                    )
                );
            } else {
                $httpBody = $patched_property_set_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSpaceDeprecated
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Space
     * @deprecated
     */
    public function updateSpaceDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpaceDeprecated"][0]
    ) {
        list($response) = $this->updateSpaceDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_space_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateSpaceDeprecatedWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Space, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateSpaceDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpaceDeprecated"][0]
    ) {
        $request = $this->updateSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_space_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Space" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Space" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Space",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Space";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Space",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSpaceDeprecatedAsync
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateSpaceDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpaceDeprecated"][0]
    ) {
        return $this->updateSpaceDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_space_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSpaceDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateSpaceDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpaceDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Space";
        $request = $this->updateSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_space_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSpaceDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedSpaceRequest $patched_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateSpaceDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_space_request = null,
        string $contentType = self::contentTypes["updateSpaceDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateSpaceDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateSpaceDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateSpaceDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateSpaceDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_space_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_space_request
                    )
                );
            } else {
                $httpBody = $patched_space_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStoreyDeprecated
     *
     * Update some fields of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Storey
     * @deprecated
     */
    public function updateStoreyDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStoreyDeprecated"][0]
    ) {
        list($response) = $this->updateStoreyDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateStoreyDeprecatedWithHttpInfo
     *
     * Update some fields of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Storey, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateStoreyDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStoreyDeprecated"][0]
    ) {
        $request = $this->updateStoreyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Storey" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Storey" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Storey",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Storey";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Storey",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStoreyDeprecatedAsync
     *
     * Update some fields of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateStoreyDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStoreyDeprecated"][0]
    ) {
        return $this->updateStoreyDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateStoreyDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateStoreyDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStoreyDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Storey";
        $request = $this->updateStoreyDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_storey_building_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStoreyDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedStoreyBuildingRequest $patched_storey_building_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateStoreyDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_storey_building_request = null,
        string $contentType = self::contentTypes["updateStoreyDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateStoreyDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateStoreyDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateStoreyDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateStoreyDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_storey_building_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_storey_building_request
                    )
                );
            } else {
                $httpBody = $patched_storey_building_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStoreyPlanPositioningDeprecated
     *
     * Update the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PositioningPlan
     * @deprecated
     */
    public function updateStoreyPlanPositioningDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        list(
            $response,
        ) = $this->updateStoreyPlanPositioningDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $patched_positioning_plan_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateStoreyPlanPositioningDeprecatedWithHttpInfo
     *
     * Update the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PositioningPlan, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateStoreyPlanPositioningDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        $request = $this->updateStoreyPlanPositioningDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $patched_positioning_plan_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\PositioningPlan" ===
                        "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if (
                            "\OpenAPI\Client\Model\PositioningPlan" !== "string"
                        ) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\PositioningPlan",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\PositioningPlan";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\PositioningPlan",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStoreyPlanPositioningDeprecatedAsync
     *
     * Update the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateStoreyPlanPositioningDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        return $this->updateStoreyPlanPositioningDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $patched_positioning_plan_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateStoreyPlanPositioningDeprecatedAsyncWithHttpInfo
     *
     * Update the postioning of the plan in the storey
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateStoreyPlanPositioningDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\PositioningPlan";
        $request = $this->updateStoreyPlanPositioningDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $storey_uuid,
            $patched_positioning_plan_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStoreyPlanPositioningDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this element. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $storey_uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedPositioningPlanRequest $patched_positioning_plan_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateStoreyPlanPositioningDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateStoreyPlanPositioningDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $storey_uuid,
        $patched_positioning_plan_request = null,
        string $contentType = self::contentTypes[
            "updateStoreyPlanPositioningDeprecated"
        ][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateStoreyPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateStoreyPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateStoreyPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateStoreyPlanPositioningDeprecated'
            );
        }

        // verify the required parameter 'storey_uuid' is set
        if (
            $storey_uuid === null ||
            (is_array($storey_uuid) && count($storey_uuid) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $storey_uuid when calling updateStoreyPlanPositioningDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/storey/{storey_uuid}/plan/{id}/positioning";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($storey_uuid !== null) {
            $resourcePath = str_replace(
                "{" . "storey_uuid" . "}",
                ObjectSerializer::toPathValue($storey_uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_positioning_plan_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_positioning_plan_request
                    )
                );
            } else {
                $httpBody = $patched_positioning_plan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSystemDeprecated
     *
     * Update some fields of a system
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\System
     * @deprecated
     */
    public function updateSystemDeprecated(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystemDeprecated"][0]
    ) {
        list($response) = $this->updateSystemDeprecatedWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_system_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateSystemDeprecatedWithHttpInfo
     *
     * Update some fields of a system
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\System, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateSystemDeprecatedWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystemDeprecated"][0]
    ) {
        $request = $this->updateSystemDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_system_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\System" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\System" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\System",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\System";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\System",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSystemDeprecatedAsync
     *
     * Update some fields of a system
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateSystemDeprecatedAsync(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystemDeprecated"][0]
    ) {
        return $this->updateSystemDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_system_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateSystemDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a system
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateSystemDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystemDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\System";
        $request = $this->updateSystemDeprecatedRequest(
            $cloud_pk,
            $ifc_pk,
            $project_pk,
            $uuid,
            $patched_system_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSystemDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\PatchedSystemRequest $patched_system_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSystemDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateSystemDeprecatedRequest(
        $cloud_pk,
        $ifc_pk,
        $project_pk,
        $uuid,
        $patched_system_request = null,
        string $contentType = self::contentTypes["updateSystemDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateSystemDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateSystemDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateSystemDeprecated'
            );
        }

        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling updateSystemDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/system/{uuid}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                "{" . "uuid" . "}",
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_system_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_system_request
                    )
                );
            } else {
                $httpBody = $patched_system_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateZoneDeprecated
     *
     * Update some fields of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Zone
     * @deprecated
     */
    public function updateZoneDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZoneDeprecated"][0]
    ) {
        list($response) = $this->updateZoneDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_zone_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateZoneDeprecatedWithHttpInfo
     *
     * Update some fields of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Zone, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateZoneDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZoneDeprecated"][0]
    ) {
        $request = $this->updateZoneDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_zone_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ("\OpenAPI\Client\Model\Zone" === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\Zone" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\Zone",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\Zone";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\Zone",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateZoneDeprecatedAsync
     *
     * Update some fields of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateZoneDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZoneDeprecated"][0]
    ) {
        return $this->updateZoneDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_zone_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateZoneDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a zone
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateZoneDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZoneDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\Zone";
        $request = $this->updateZoneDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $patched_zone_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateZoneDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this zone. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneRequest $patched_zone_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateZoneDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $patched_zone_request = null,
        string $contentType = self::contentTypes["updateZoneDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateZoneDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateZoneDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateZoneDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateZoneDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_zone_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_zone_request
                    )
                );
            } else {
                $httpBody = $patched_zone_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateZoneSpaceDeprecated
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ZoneSpace
     * @deprecated
     */
    public function updateZoneSpaceDeprecated(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpaceDeprecated"][0]
    ) {
        list($response) = $this->updateZoneSpaceDeprecatedWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $patched_zone_space_request,
            $contentType
        );
        return $response;
    }

    /**
     * Operation updateZoneSpaceDeprecatedWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ZoneSpace, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function updateZoneSpaceDeprecatedWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpaceDeprecated"][0]
    ) {
        $request = $this->updateZoneSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $patched_zone_space_request,
            $contentType
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        "[%d] Error connecting to the API (%s)",
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if (
                        "\OpenAPI\Client\Model\ZoneSpace" === "\SplFileObject"
                    ) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ("\OpenAPI\Client\Model\ZoneSpace" !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            "\OpenAPI\Client\Model\ZoneSpace",
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = "\OpenAPI\Client\Model\ZoneSpace";
            if ($returnType === "\SplFileObject") {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== "string") {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        "\OpenAPI\Client\Model\ZoneSpace",
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateZoneSpaceDeprecatedAsync
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateZoneSpaceDeprecatedAsync(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpaceDeprecated"][0]
    ) {
        return $this->updateZoneSpaceDeprecatedAsyncWithHttpInfo(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $patched_zone_space_request,
            $contentType
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation updateZoneSpaceDeprecatedAsyncWithHttpInfo
     *
     * Update some fields of a space
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function updateZoneSpaceDeprecatedAsyncWithHttpInfo(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpaceDeprecated"][0]
    ) {
        $returnType = "\OpenAPI\Client\Model\ZoneSpace";
        $request = $this->updateZoneSpaceDeprecatedRequest(
            $cloud_pk,
            $id,
            $ifc_pk,
            $project_pk,
            $zone_pk,
            $patched_zone_space_request,
            $contentType
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === "\SplFileObject") {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== "string") {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            "[%d] Error connecting to the API (%s)",
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateZoneSpaceDeprecated'
     *
     * @param  int $cloud_pk A unique integer value identifying this cloud. (required)
     * @param  int $id A unique integer value identifying this space. (required)
     * @param  int $ifc_pk A unique integer value identifying this model. (required)
     * @param  int $project_pk A unique integer value identifying this project. (required)
     * @param  int $zone_pk A unique integer value identifying this zone. (required)
     * @param  \OpenAPI\Client\Model\PatchedZoneSpaceRequest $patched_zone_space_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateZoneSpaceDeprecated'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function updateZoneSpaceDeprecatedRequest(
        $cloud_pk,
        $id,
        $ifc_pk,
        $project_pk,
        $zone_pk,
        $patched_zone_space_request = null,
        string $contentType = self::contentTypes["updateZoneSpaceDeprecated"][0]
    ) {
        // verify the required parameter 'cloud_pk' is set
        if (
            $cloud_pk === null ||
            (is_array($cloud_pk) && count($cloud_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloud_pk when calling updateZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'ifc_pk' is set
        if ($ifc_pk === null || (is_array($ifc_pk) && count($ifc_pk) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ifc_pk when calling updateZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'project_pk' is set
        if (
            $project_pk === null ||
            (is_array($project_pk) && count($project_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $project_pk when calling updateZoneSpaceDeprecated'
            );
        }

        // verify the required parameter 'zone_pk' is set
        if (
            $zone_pk === null ||
            (is_array($zone_pk) && count($zone_pk) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zone_pk when calling updateZoneSpaceDeprecated'
            );
        }

        $resourcePath =
            "/cloud/{cloud_pk}/project/{project_pk}/ifc/{ifc_pk}/zone/{zone_pk}/space/{id}";
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = "";
        $multipart = false;

        // path params
        if ($cloud_pk !== null) {
            $resourcePath = str_replace(
                "{" . "cloud_pk" . "}",
                ObjectSerializer::toPathValue($cloud_pk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($ifc_pk !== null) {
            $resourcePath = str_replace(
                "{" . "ifc_pk" . "}",
                ObjectSerializer::toPathValue($ifc_pk),
                $resourcePath
            );
        }
        // path params
        if ($project_pk !== null) {
            $resourcePath = str_replace(
                "{" . "project_pk" . "}",
                ObjectSerializer::toPathValue($project_pk),
                $resourcePath
            );
        }
        // path params
        if ($zone_pk !== null) {
            $resourcePath = str_replace(
                "{" . "zone_pk" . "}",
                ObjectSerializer::toPathValue($zone_pk),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ["application/json"],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patched_zone_space_request)) {
            if (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization(
                        $patched_zone_space_request
                    )
                );
            } else {
                $httpBody = $patched_zone_space_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue)
                        ? $formParamValue
                        : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            "name" => $formParamName,
                            "contents" => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (
                stripos($headers["Content-Type"], "application/json") !== false
            ) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers["Authorization"] =
                "Bearer " . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix("Authorization");
        if ($apiKey !== null) {
            $headers["Authorization"] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders["User-Agent"] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            "PATCH",
            $operationHost . $resourcePath . ($query ? "?{$query}" : ""),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                "a"
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    "Failed to open the debug file: " .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
