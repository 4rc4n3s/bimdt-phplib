<?php
/**
 * PatchedDocumentRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * PatchedDocumentRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PatchedDocumentRequest implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "PatchedDocumentRequest";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "parent_id" => "int",
        "name" => "string",
        "file_name" => "string",
        "description" => "string",
        "file" => "\SplFileObject",
        "size" => "int",
        "model_source" => "string",
        "ifc_source" => "string",
        "successor_of" => "int",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "parent_id" => null,
        "name" => null,
        "file_name" => null,
        "description" => null,
        "file" => "binary",
        "size" => "int64",
        "model_source" => null,
        "ifc_source" => null,
        "successor_of" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "parent_id" => true,
        "name" => false,
        "file_name" => false,
        "description" => true,
        "file" => false,
        "size" => true,
        "model_source" => false,
        "ifc_source" => false,
        "successor_of" => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "parent_id" => "parent_id",
        "name" => "name",
        "file_name" => "file_name",
        "description" => "description",
        "file" => "file",
        "size" => "size",
        "model_source" => "model_source",
        "ifc_source" => "ifc_source",
        "successor_of" => "successor_of",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "parent_id" => "setParentId",
        "name" => "setName",
        "file_name" => "setFileName",
        "description" => "setDescription",
        "file" => "setFile",
        "size" => "setSize",
        "model_source" => "setModelSource",
        "ifc_source" => "setIfcSource",
        "successor_of" => "setSuccessorOf",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "parent_id" => "getParentId",
        "name" => "getName",
        "file_name" => "getFileName",
        "description" => "getDescription",
        "file" => "getFile",
        "size" => "getSize",
        "model_source" => "getModelSource",
        "ifc_source" => "getIfcSource",
        "successor_of" => "getSuccessorOf",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MODEL_SOURCE_UPLOAD = "UPLOAD";
    public const MODEL_SOURCE_SPLIT = "SPLIT";
    public const MODEL_SOURCE_MERGE = "MERGE";
    public const MODEL_SOURCE_EXPORT = "EXPORT";
    public const MODEL_SOURCE_OPTIMIZED = "OPTIMIZED";
    public const IFC_SOURCE_UPLOAD = "UPLOAD";
    public const IFC_SOURCE_SPLIT = "SPLIT";
    public const IFC_SOURCE_MERGE = "MERGE";
    public const IFC_SOURCE_EXPORT = "EXPORT";
    public const IFC_SOURCE_OPTIMIZED = "OPTIMIZED";

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModelSourceAllowableValues()
    {
        return [
            self::MODEL_SOURCE_UPLOAD,
            self::MODEL_SOURCE_SPLIT,
            self::MODEL_SOURCE_MERGE,
            self::MODEL_SOURCE_EXPORT,
            self::MODEL_SOURCE_OPTIMIZED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIfcSourceAllowableValues()
    {
        return [
            self::IFC_SOURCE_UPLOAD,
            self::IFC_SOURCE_SPLIT,
            self::IFC_SOURCE_MERGE,
            self::IFC_SOURCE_EXPORT,
            self::IFC_SOURCE_OPTIMIZED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("parent_id", $data ?? [], null);
        $this->setIfExists("name", $data ?? [], null);
        $this->setIfExists("file_name", $data ?? [], null);
        $this->setIfExists("description", $data ?? [], null);
        $this->setIfExists("file", $data ?? [], null);
        $this->setIfExists("size", $data ?? [], null);
        $this->setIfExists("model_source", $data ?? [], null);
        $this->setIfExists("ifc_source", $data ?? [], null);
        $this->setIfExists("successor_of", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (
            !is_null($this->container["name"]) &&
            mb_strlen($this->container["name"]) > 512
        ) {
            $invalidProperties[] =
                "invalid value for 'name', the character length must be smaller than or equal to 512.";
        }

        if (
            !is_null($this->container["name"]) &&
            mb_strlen($this->container["name"]) < 1
        ) {
            $invalidProperties[] =
                "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (
            !is_null($this->container["file_name"]) &&
            mb_strlen($this->container["file_name"]) > 512
        ) {
            $invalidProperties[] =
                "invalid value for 'file_name', the character length must be smaller than or equal to 512.";
        }

        if (
            !is_null($this->container["file_name"]) &&
            mb_strlen($this->container["file_name"]) < 1
        ) {
            $invalidProperties[] =
                "invalid value for 'file_name', the character length must be bigger than or equal to 1.";
        }

        if (
            !is_null($this->container["size"]) &&
            $this->container["size"] > 9223372036854775807
        ) {
            $invalidProperties[] =
                "invalid value for 'size', must be smaller than or equal to 9223372036854775807.";
        }

        if (
            !is_null($this->container["size"]) &&
            $this->container["size"] < 0
        ) {
            $invalidProperties[] =
                "invalid value for 'size', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getModelSourceAllowableValues();
        if (
            !is_null($this->container["model_source"]) &&
            !in_array($this->container["model_source"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'model_source', must be one of '%s'",
                $this->container["model_source"],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIfcSourceAllowableValues();
        if (
            !is_null($this->container["ifc_source"]) &&
            !in_array($this->container["ifc_source"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ifc_source', must be one of '%s'",
                $this->container["ifc_source"],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container["parent_id"];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, "parent_id");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("parent_id", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["parent_id"] = $parent_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container["name"];
    }

    /**
     * Sets name
     *
     * @param string|null $name Shown name of the file
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && mb_strlen($name) > 512) {
            throw new \InvalidArgumentException(
                'invalid length for $name when calling PatchedDocumentRequest., must be smaller than or equal to 512.'
            );
        }
        if (!is_null($name) && mb_strlen($name) < 1) {
            throw new \InvalidArgumentException(
                'invalid length for $name when calling PatchedDocumentRequest., must be bigger than or equal to 1.'
            );
        }

        if (is_null($name)) {
            throw new \InvalidArgumentException(
                "non-nullable name cannot be null"
            );
        }

        $this->container["name"] = $name;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container["file_name"];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name Full name of the file
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (!is_null($file_name) && mb_strlen($file_name) > 512) {
            throw new \InvalidArgumentException(
                'invalid length for $file_name when calling PatchedDocumentRequest., must be smaller than or equal to 512.'
            );
        }
        if (!is_null($file_name) && mb_strlen($file_name) < 1) {
            throw new \InvalidArgumentException(
                'invalid length for $file_name when calling PatchedDocumentRequest., must be bigger than or equal to 1.'
            );
        }

        if (is_null($file_name)) {
            throw new \InvalidArgumentException(
                "non-nullable file_name cannot be null"
            );
        }

        $this->container["file_name"] = $file_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container["description"];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the file
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, "description");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("description", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["description"] = $description;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \SplFileObject|null
     */
    public function getFile()
    {
        return $this->container["file"];
    }

    /**
     * Sets file
     *
     * @param \SplFileObject|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        if (is_null($file)) {
            throw new \InvalidArgumentException(
                "non-nullable file cannot be null"
            );
        }

        $this->container["file"] = $file;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container["size"];
    }

    /**
     * Sets size
     *
     * @param int|null $size Size of the file.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (!is_null($size) && $size > 9223372036854775807) {
            throw new \InvalidArgumentException(
                'invalid value for $size when calling PatchedDocumentRequest., must be smaller than or equal to 9223372036854775807.'
            );
        }
        if (!is_null($size) && $size < 0) {
            throw new \InvalidArgumentException(
                'invalid value for $size when calling PatchedDocumentRequest., must be bigger than or equal to 0.'
            );
        }

        if (is_null($size)) {
            array_push($this->openAPINullablesSetToNull, "size");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("size", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["size"] = $size;

        return $this;
    }

    /**
     * Gets model_source
     *
     * @return string|null
     */
    public function getModelSource()
    {
        return $this->container["model_source"];
    }

    /**
     * Sets model_source
     *
     * @param string|null $model_source Define the model.source field if the upload is a Model (IFC, PDF, DWG...)
     *
     * @return self
     */
    public function setModelSource($model_source)
    {
        $allowedValues = $this->getModelSourceAllowableValues();
        if (
            !is_null($model_source) &&
            !in_array($model_source, $allowedValues, true)
        ) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'model_source', must be one of '%s'",
                    $model_source,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($model_source)) {
            throw new \InvalidArgumentException(
                "non-nullable model_source cannot be null"
            );
        }

        $this->container["model_source"] = $model_source;

        return $this;
    }

    /**
     * Gets ifc_source
     *
     * @return string|null
     */
    public function getIfcSource()
    {
        return $this->container["ifc_source"];
    }

    /**
     * Sets ifc_source
     *
     * @param string|null $ifc_source DEPRECATED: Use 'model_source' instead. Define the model.source field if the upload is a Model (IFC, PDF, DWG...)
     *
     * @return self
     */
    public function setIfcSource($ifc_source)
    {
        $allowedValues = $this->getIfcSourceAllowableValues();
        if (
            !is_null($ifc_source) &&
            !in_array($ifc_source, $allowedValues, true)
        ) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ifc_source', must be one of '%s'",
                    $ifc_source,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($ifc_source)) {
            throw new \InvalidArgumentException(
                "non-nullable ifc_source cannot be null"
            );
        }

        $this->container["ifc_source"] = $ifc_source;

        return $this;
    }

    /**
     * Gets successor_of
     *
     * @return int|null
     */
    public function getSuccessorOf()
    {
        return $this->container["successor_of"];
    }

    /**
     * Sets successor_of
     *
     * @param int|null $successor_of Old document version to replace. Only for create
     *
     * @return self
     */
    public function setSuccessorOf($successor_of)
    {
        if (is_null($successor_of)) {
            throw new \InvalidArgumentException(
                "non-nullable successor_of cannot be null"
            );
        }

        $this->container["successor_of"] = $successor_of;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
