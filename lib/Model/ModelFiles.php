<?php
/**
 * ModelFiles
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * ModelFiles Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ModelFiles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "ModelFiles";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "structure_file" => "string",
        "systems_file" => "string",
        "map_file" => "string",
        "gltf_file" => "string",
        "gltf_with_openings_file" => "string",
        "bvh_tree_file" => "string",
        "preview_file" => "string",
        "xkt_file" => "string",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "structure_file" => "uri",
        "systems_file" => "uri",
        "map_file" => "uri",
        "gltf_file" => "uri",
        "gltf_with_openings_file" => "uri",
        "bvh_tree_file" => "uri",
        "preview_file" => "uri",
        "xkt_file" => "uri",
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "structure_file" => true,
        "systems_file" => true,
        "map_file" => true,
        "gltf_file" => true,
        "gltf_with_openings_file" => true,
        "bvh_tree_file" => true,
        "preview_file" => true,
        "xkt_file" => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "structure_file" => "structure_file",
        "systems_file" => "systems_file",
        "map_file" => "map_file",
        "gltf_file" => "gltf_file",
        "gltf_with_openings_file" => "gltf_with_openings_file",
        "bvh_tree_file" => "bvh_tree_file",
        "preview_file" => "preview_file",
        "xkt_file" => "xkt_file",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "structure_file" => "setStructureFile",
        "systems_file" => "setSystemsFile",
        "map_file" => "setMapFile",
        "gltf_file" => "setGltfFile",
        "gltf_with_openings_file" => "setGltfWithOpeningsFile",
        "bvh_tree_file" => "setBvhTreeFile",
        "preview_file" => "setPreviewFile",
        "xkt_file" => "setXktFile",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "structure_file" => "getStructureFile",
        "systems_file" => "getSystemsFile",
        "map_file" => "getMapFile",
        "gltf_file" => "getGltfFile",
        "gltf_with_openings_file" => "getGltfWithOpeningsFile",
        "bvh_tree_file" => "getBvhTreeFile",
        "preview_file" => "getPreviewFile",
        "xkt_file" => "getXktFile",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("structure_file", $data ?? [], null);
        $this->setIfExists("systems_file", $data ?? [], null);
        $this->setIfExists("map_file", $data ?? [], null);
        $this->setIfExists("gltf_file", $data ?? [], null);
        $this->setIfExists("gltf_with_openings_file", $data ?? [], null);
        $this->setIfExists("bvh_tree_file", $data ?? [], null);
        $this->setIfExists("preview_file", $data ?? [], null);
        $this->setIfExists("xkt_file", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets structure_file
     *
     * @return string|null
     */
    public function getStructureFile()
    {
        return $this->container["structure_file"];
    }

    /**
     * Sets structure_file
     *
     * @param string|null $structure_file structure_file
     *
     * @return self
     */
    public function setStructureFile($structure_file)
    {
        if (is_null($structure_file)) {
            array_push($this->openAPINullablesSetToNull, "structure_file");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("structure_file", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["structure_file"] = $structure_file;

        return $this;
    }

    /**
     * Gets systems_file
     *
     * @return string|null
     */
    public function getSystemsFile()
    {
        return $this->container["systems_file"];
    }

    /**
     * Sets systems_file
     *
     * @param string|null $systems_file systems_file
     *
     * @return self
     */
    public function setSystemsFile($systems_file)
    {
        if (is_null($systems_file)) {
            array_push($this->openAPINullablesSetToNull, "systems_file");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("systems_file", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["systems_file"] = $systems_file;

        return $this;
    }

    /**
     * Gets map_file
     *
     * @return string|null
     */
    public function getMapFile()
    {
        return $this->container["map_file"];
    }

    /**
     * Sets map_file
     *
     * @param string|null $map_file map_file
     *
     * @return self
     */
    public function setMapFile($map_file)
    {
        if (is_null($map_file)) {
            array_push($this->openAPINullablesSetToNull, "map_file");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("map_file", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["map_file"] = $map_file;

        return $this;
    }

    /**
     * Gets gltf_file
     *
     * @return string|null
     */
    public function getGltfFile()
    {
        return $this->container["gltf_file"];
    }

    /**
     * Sets gltf_file
     *
     * @param string|null $gltf_file gltf_file
     *
     * @return self
     */
    public function setGltfFile($gltf_file)
    {
        if (is_null($gltf_file)) {
            array_push($this->openAPINullablesSetToNull, "gltf_file");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("gltf_file", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["gltf_file"] = $gltf_file;

        return $this;
    }

    /**
     * Gets gltf_with_openings_file
     *
     * @return string|null
     */
    public function getGltfWithOpeningsFile()
    {
        return $this->container["gltf_with_openings_file"];
    }

    /**
     * Sets gltf_with_openings_file
     *
     * @param string|null $gltf_with_openings_file gltf_with_openings_file
     *
     * @return self
     */
    public function setGltfWithOpeningsFile($gltf_with_openings_file)
    {
        if (is_null($gltf_with_openings_file)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "gltf_with_openings_file"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search(
                "gltf_with_openings_file",
                $nullablesSetToNull
            );
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["gltf_with_openings_file"] = $gltf_with_openings_file;

        return $this;
    }

    /**
     * Gets bvh_tree_file
     *
     * @return string|null
     */
    public function getBvhTreeFile()
    {
        return $this->container["bvh_tree_file"];
    }

    /**
     * Sets bvh_tree_file
     *
     * @param string|null $bvh_tree_file bvh_tree_file
     *
     * @return self
     */
    public function setBvhTreeFile($bvh_tree_file)
    {
        if (is_null($bvh_tree_file)) {
            array_push($this->openAPINullablesSetToNull, "bvh_tree_file");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("bvh_tree_file", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["bvh_tree_file"] = $bvh_tree_file;

        return $this;
    }

    /**
     * Gets preview_file
     *
     * @return string|null
     */
    public function getPreviewFile()
    {
        return $this->container["preview_file"];
    }

    /**
     * Sets preview_file
     *
     * @param string|null $preview_file preview_file
     *
     * @return self
     */
    public function setPreviewFile($preview_file)
    {
        if (is_null($preview_file)) {
            array_push($this->openAPINullablesSetToNull, "preview_file");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("preview_file", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["preview_file"] = $preview_file;

        return $this;
    }

    /**
     * Gets xkt_file
     *
     * @return string|null
     */
    public function getXktFile()
    {
        return $this->container["xkt_file"];
    }

    /**
     * Sets xkt_file
     *
     * @param string|null $xkt_file xkt_file
     *
     * @return self
     */
    public function setXktFile($xkt_file)
    {
        if (is_null($xkt_file)) {
            array_push($this->openAPINullablesSetToNull, "xkt_file");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("xkt_file", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["xkt_file"] = $xkt_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
