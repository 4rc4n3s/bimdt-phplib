<?php
/**
 * FolderUserProject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * FolderUserProject Class Doc Comment
 *
 * @category Class
 * @description This is a flattened nested represetation of FosUser and Invitation models in this serializer.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FolderUserProject implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "FolderUserProject";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "id" => "int",
        "user_id" => "int",
        "invitation_id" => "int",
        "email" => "string",
        "firstname" => "string",
        "lastname" => "string",
        "profile_picture" => "string",
        "role" => "int",
        "permission" => "int",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "id" => null,
        "user_id" => null,
        "invitation_id" => null,
        "email" => "email",
        "firstname" => null,
        "lastname" => null,
        "profile_picture" => null,
        "role" => null,
        "permission" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "id" => false,
        "user_id" => true,
        "invitation_id" => true,
        "email" => false,
        "firstname" => true,
        "lastname" => true,
        "profile_picture" => true,
        "role" => false,
        "permission" => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "id" => "id",
        "user_id" => "user_id",
        "invitation_id" => "invitation_id",
        "email" => "email",
        "firstname" => "firstname",
        "lastname" => "lastname",
        "profile_picture" => "profile_picture",
        "role" => "role",
        "permission" => "permission",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "id" => "setId",
        "user_id" => "setUserId",
        "invitation_id" => "setInvitationId",
        "email" => "setEmail",
        "firstname" => "setFirstname",
        "lastname" => "setLastname",
        "profile_picture" => "setProfilePicture",
        "role" => "setRole",
        "permission" => "setPermission",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "id" => "getId",
        "user_id" => "getUserId",
        "invitation_id" => "getInvitationId",
        "email" => "getEmail",
        "firstname" => "getFirstname",
        "lastname" => "getLastname",
        "profile_picture" => "getProfilePicture",
        "role" => "getRole",
        "permission" => "getPermission",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ROLE_100 = 100;
    public const ROLE_50 = 50;
    public const ROLE_25 = 25;
    public const PERMISSION_1 = 1;
    public const PERMISSION_50 = 50;
    public const PERMISSION_100 = 100;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [self::ROLE_100, self::ROLE_50, self::ROLE_25];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPermissionAllowableValues()
    {
        return [self::PERMISSION_1, self::PERMISSION_50, self::PERMISSION_100];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("id", $data ?? [], null);
        $this->setIfExists("user_id", $data ?? [], null);
        $this->setIfExists("invitation_id", $data ?? [], null);
        $this->setIfExists("email", $data ?? [], null);
        $this->setIfExists("firstname", $data ?? [], null);
        $this->setIfExists("lastname", $data ?? [], null);
        $this->setIfExists("profile_picture", $data ?? [], null);
        $this->setIfExists("role", $data ?? [], null);
        $this->setIfExists("permission", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container["id"] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container["user_id"] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container["invitation_id"] === null) {
            $invalidProperties[] = "'invitation_id' can't be null";
        }
        if ($this->container["email"] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container["firstname"] === null) {
            $invalidProperties[] = "'firstname' can't be null";
        }
        if ($this->container["lastname"] === null) {
            $invalidProperties[] = "'lastname' can't be null";
        }
        if ($this->container["profile_picture"] === null) {
            $invalidProperties[] = "'profile_picture' can't be null";
        }
        if ($this->container["role"] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (
            !is_null($this->container["role"]) &&
            !in_array($this->container["role"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container["role"],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container["permission"] === null) {
            $invalidProperties[] = "'permission' can't be null";
        }
        $allowedValues = $this->getPermissionAllowableValues();
        if (
            !is_null($this->container["permission"]) &&
            !in_array($this->container["permission"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'permission', must be one of '%s'",
                $this->container["permission"],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container["id"];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException(
                "non-nullable id cannot be null"
            );
        }

        $this->container["id"] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container["user_id"];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, "user_id");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("user_id", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["user_id"] = $user_id;

        return $this;
    }

    /**
     * Gets invitation_id
     *
     * @return int
     */
    public function getInvitationId()
    {
        return $this->container["invitation_id"];
    }

    /**
     * Sets invitation_id
     *
     * @param int $invitation_id invitation_id
     *
     * @return self
     */
    public function setInvitationId($invitation_id)
    {
        if (is_null($invitation_id)) {
            array_push($this->openAPINullablesSetToNull, "invitation_id");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("invitation_id", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["invitation_id"] = $invitation_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container["email"];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException(
                "non-nullable email cannot be null"
            );
        }

        $this->container["email"] = $email;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container["firstname"];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            array_push($this->openAPINullablesSetToNull, "firstname");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("firstname", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["firstname"] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container["lastname"];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        if (is_null($lastname)) {
            array_push($this->openAPINullablesSetToNull, "lastname");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("lastname", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["lastname"] = $lastname;

        return $this;
    }

    /**
     * Gets profile_picture
     *
     * @return string
     */
    public function getProfilePicture()
    {
        return $this->container["profile_picture"];
    }

    /**
     * Sets profile_picture
     *
     * @param string $profile_picture profile_picture
     *
     * @return self
     */
    public function setProfilePicture($profile_picture)
    {
        if (is_null($profile_picture)) {
            array_push($this->openAPINullablesSetToNull, "profile_picture");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("profile_picture", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["profile_picture"] = $profile_picture;

        return $this;
    }

    /**
     * Gets role
     *
     * @return int
     */
    public function getRole()
    {
        return $this->container["role"];
    }

    /**
     * Sets role
     *
     * @param int $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($role)) {
            throw new \InvalidArgumentException(
                "non-nullable role cannot be null"
            );
        }

        $this->container["role"] = $role;

        return $this;
    }

    /**
     * Gets permission
     *
     * @return int
     */
    public function getPermission()
    {
        return $this->container["permission"];
    }

    /**
     * Sets permission
     *
     * @param int $permission permission
     *
     * @return self
     */
    public function setPermission($permission)
    {
        $allowedValues = $this->getPermissionAllowableValues();
        if (!in_array($permission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'permission', must be one of '%s'",
                    $permission,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($permission)) {
            throw new \InvalidArgumentException(
                "non-nullable permission cannot be null"
            );
        }

        $this->container["permission"] = $permission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
