<?php
/**
 * Size
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * Size Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Size implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "Size";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "is_unsupervised" => "bool",
        "managed_by" => "string",
        "role" => "int",
        "total_size" => "int",
        "smart_data_size" => "int",
        "total_size_available" => "int",
        "smart_data_size_available" => "int",
        "remaining_total_size" => "int",
        "remaining_smart_data_size" => "int",
        "remaining_total_size_percent" => "int",
        "remaining_smart_data_size_percent" => "int",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "is_unsupervised" => null,
        "managed_by" => null,
        "role" => null,
        "total_size" => null,
        "smart_data_size" => null,
        "total_size_available" => null,
        "smart_data_size_available" => null,
        "remaining_total_size" => null,
        "remaining_smart_data_size" => null,
        "remaining_total_size_percent" => null,
        "remaining_smart_data_size_percent" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "is_unsupervised" => false,
        "managed_by" => false,
        "role" => false,
        "total_size" => true,
        "smart_data_size" => true,
        "total_size_available" => true,
        "smart_data_size_available" => true,
        "remaining_total_size" => true,
        "remaining_smart_data_size" => true,
        "remaining_total_size_percent" => true,
        "remaining_smart_data_size_percent" => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "is_unsupervised" => "is_unsupervised",
        "managed_by" => "managed_by",
        "role" => "role",
        "total_size" => "total_size",
        "smart_data_size" => "smart_data_size",
        "total_size_available" => "total_size_available",
        "smart_data_size_available" => "smart_data_size_available",
        "remaining_total_size" => "remaining_total_size",
        "remaining_smart_data_size" => "remaining_smart_data_size",
        "remaining_total_size_percent" => "remaining_total_size_percent",
        "remaining_smart_data_size_percent" =>
            "remaining_smart_data_size_percent",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "is_unsupervised" => "setIsUnsupervised",
        "managed_by" => "setManagedBy",
        "role" => "setRole",
        "total_size" => "setTotalSize",
        "smart_data_size" => "setSmartDataSize",
        "total_size_available" => "setTotalSizeAvailable",
        "smart_data_size_available" => "setSmartDataSizeAvailable",
        "remaining_total_size" => "setRemainingTotalSize",
        "remaining_smart_data_size" => "setRemainingSmartDataSize",
        "remaining_total_size_percent" => "setRemainingTotalSizePercent",
        "remaining_smart_data_size_percent" =>
            "setRemainingSmartDataSizePercent",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "is_unsupervised" => "getIsUnsupervised",
        "managed_by" => "getManagedBy",
        "role" => "getRole",
        "total_size" => "getTotalSize",
        "smart_data_size" => "getSmartDataSize",
        "total_size_available" => "getTotalSizeAvailable",
        "smart_data_size_available" => "getSmartDataSizeAvailable",
        "remaining_total_size" => "getRemainingTotalSize",
        "remaining_smart_data_size" => "getRemainingSmartDataSize",
        "remaining_total_size_percent" => "getRemainingTotalSizePercent",
        "remaining_smart_data_size_percent" =>
            "getRemainingSmartDataSizePercent",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const MANAGED_BY_BIMDATA_PLATFORM = "BIMDATA_PLATFORM";
    public const MANAGED_BY_ORGANIZATION = "ORGANIZATION";
    public const ROLE_100 = 100;
    public const ROLE_50 = 50;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getManagedByAllowableValues()
    {
        return [
            self::MANAGED_BY_BIMDATA_PLATFORM,
            self::MANAGED_BY_ORGANIZATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRoleAllowableValues()
    {
        return [self::ROLE_100, self::ROLE_50];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("is_unsupervised", $data ?? [], null);
        $this->setIfExists("managed_by", $data ?? [], null);
        $this->setIfExists("role", $data ?? [], null);
        $this->setIfExists("total_size", $data ?? [], null);
        $this->setIfExists("smart_data_size", $data ?? [], null);
        $this->setIfExists("total_size_available", $data ?? [], null);
        $this->setIfExists("smart_data_size_available", $data ?? [], null);
        $this->setIfExists("remaining_total_size", $data ?? [], null);
        $this->setIfExists("remaining_smart_data_size", $data ?? [], null);
        $this->setIfExists("remaining_total_size_percent", $data ?? [], null);
        $this->setIfExists(
            "remaining_smart_data_size_percent",
            $data ?? [],
            null
        );
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container["is_unsupervised"] === null) {
            $invalidProperties[] = "'is_unsupervised' can't be null";
        }
        if ($this->container["managed_by"] === null) {
            $invalidProperties[] = "'managed_by' can't be null";
        }
        $allowedValues = $this->getManagedByAllowableValues();
        if (
            !is_null($this->container["managed_by"]) &&
            !in_array($this->container["managed_by"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'managed_by', must be one of '%s'",
                $this->container["managed_by"],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container["role"] === null) {
            $invalidProperties[] = "'role' can't be null";
        }
        $allowedValues = $this->getRoleAllowableValues();
        if (
            !is_null($this->container["role"]) &&
            !in_array($this->container["role"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'role', must be one of '%s'",
                $this->container["role"],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container["total_size"] === null) {
            $invalidProperties[] = "'total_size' can't be null";
        }
        if ($this->container["smart_data_size"] === null) {
            $invalidProperties[] = "'smart_data_size' can't be null";
        }
        if ($this->container["total_size_available"] === null) {
            $invalidProperties[] = "'total_size_available' can't be null";
        }
        if ($this->container["smart_data_size_available"] === null) {
            $invalidProperties[] = "'smart_data_size_available' can't be null";
        }
        if ($this->container["remaining_total_size"] === null) {
            $invalidProperties[] = "'remaining_total_size' can't be null";
        }
        if ($this->container["remaining_smart_data_size"] === null) {
            $invalidProperties[] = "'remaining_smart_data_size' can't be null";
        }
        if ($this->container["remaining_total_size_percent"] === null) {
            $invalidProperties[] =
                "'remaining_total_size_percent' can't be null";
        }
        if ($this->container["remaining_smart_data_size_percent"] === null) {
            $invalidProperties[] =
                "'remaining_smart_data_size_percent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets is_unsupervised
     *
     * @return bool
     */
    public function getIsUnsupervised()
    {
        return $this->container["is_unsupervised"];
    }

    /**
     * Sets is_unsupervised
     *
     * @param bool $is_unsupervised is_unsupervised
     *
     * @return self
     */
    public function setIsUnsupervised($is_unsupervised)
    {
        if (is_null($is_unsupervised)) {
            throw new \InvalidArgumentException(
                "non-nullable is_unsupervised cannot be null"
            );
        }

        $this->container["is_unsupervised"] = $is_unsupervised;

        return $this;
    }

    /**
     * Gets managed_by
     *
     * @return string
     */
    public function getManagedBy()
    {
        return $this->container["managed_by"];
    }

    /**
     * Sets managed_by
     *
     * @param string $managed_by managed_by
     *
     * @return self
     */
    public function setManagedBy($managed_by)
    {
        $allowedValues = $this->getManagedByAllowableValues();
        if (!in_array($managed_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'managed_by', must be one of '%s'",
                    $managed_by,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($managed_by)) {
            throw new \InvalidArgumentException(
                "non-nullable managed_by cannot be null"
            );
        }

        $this->container["managed_by"] = $managed_by;

        return $this;
    }

    /**
     * Gets role
     *
     * @return int
     */
    public function getRole()
    {
        return $this->container["role"];
    }

    /**
     * Sets role
     *
     * @param int $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        $allowedValues = $this->getRoleAllowableValues();
        if (!in_array($role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'role', must be one of '%s'",
                    $role,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($role)) {
            throw new \InvalidArgumentException(
                "non-nullable role cannot be null"
            );
        }

        $this->container["role"] = $role;

        return $this;
    }

    /**
     * Gets total_size
     *
     * @return int
     */
    public function getTotalSize()
    {
        return $this->container["total_size"];
    }

    /**
     * Sets total_size
     *
     * @param int $total_size total_size
     *
     * @return self
     */
    public function setTotalSize($total_size)
    {
        if (is_null($total_size)) {
            array_push($this->openAPINullablesSetToNull, "total_size");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("total_size", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["total_size"] = $total_size;

        return $this;
    }

    /**
     * Gets smart_data_size
     *
     * @return int
     */
    public function getSmartDataSize()
    {
        return $this->container["smart_data_size"];
    }

    /**
     * Sets smart_data_size
     *
     * @param int $smart_data_size smart_data_size
     *
     * @return self
     */
    public function setSmartDataSize($smart_data_size)
    {
        if (is_null($smart_data_size)) {
            array_push($this->openAPINullablesSetToNull, "smart_data_size");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("smart_data_size", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["smart_data_size"] = $smart_data_size;

        return $this;
    }

    /**
     * Gets total_size_available
     *
     * @return int
     */
    public function getTotalSizeAvailable()
    {
        return $this->container["total_size_available"];
    }

    /**
     * Sets total_size_available
     *
     * @param int $total_size_available total_size_available
     *
     * @return self
     */
    public function setTotalSizeAvailable($total_size_available)
    {
        if (is_null($total_size_available)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "total_size_available"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("total_size_available", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["total_size_available"] = $total_size_available;

        return $this;
    }

    /**
     * Gets smart_data_size_available
     *
     * @return int
     */
    public function getSmartDataSizeAvailable()
    {
        return $this->container["smart_data_size_available"];
    }

    /**
     * Sets smart_data_size_available
     *
     * @param int $smart_data_size_available smart_data_size_available
     *
     * @return self
     */
    public function setSmartDataSizeAvailable($smart_data_size_available)
    {
        if (is_null($smart_data_size_available)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "smart_data_size_available"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search(
                "smart_data_size_available",
                $nullablesSetToNull
            );
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container[
            "smart_data_size_available"
        ] = $smart_data_size_available;

        return $this;
    }

    /**
     * Gets remaining_total_size
     *
     * @return int
     */
    public function getRemainingTotalSize()
    {
        return $this->container["remaining_total_size"];
    }

    /**
     * Sets remaining_total_size
     *
     * @param int $remaining_total_size remaining_total_size
     *
     * @return self
     */
    public function setRemainingTotalSize($remaining_total_size)
    {
        if (is_null($remaining_total_size)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "remaining_total_size"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("remaining_total_size", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["remaining_total_size"] = $remaining_total_size;

        return $this;
    }

    /**
     * Gets remaining_smart_data_size
     *
     * @return int
     */
    public function getRemainingSmartDataSize()
    {
        return $this->container["remaining_smart_data_size"];
    }

    /**
     * Sets remaining_smart_data_size
     *
     * @param int $remaining_smart_data_size remaining_smart_data_size
     *
     * @return self
     */
    public function setRemainingSmartDataSize($remaining_smart_data_size)
    {
        if (is_null($remaining_smart_data_size)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "remaining_smart_data_size"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search(
                "remaining_smart_data_size",
                $nullablesSetToNull
            );
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container[
            "remaining_smart_data_size"
        ] = $remaining_smart_data_size;

        return $this;
    }

    /**
     * Gets remaining_total_size_percent
     *
     * @return int
     */
    public function getRemainingTotalSizePercent()
    {
        return $this->container["remaining_total_size_percent"];
    }

    /**
     * Sets remaining_total_size_percent
     *
     * @param int $remaining_total_size_percent remaining_total_size_percent
     *
     * @return self
     */
    public function setRemainingTotalSizePercent($remaining_total_size_percent)
    {
        if (is_null($remaining_total_size_percent)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "remaining_total_size_percent"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search(
                "remaining_total_size_percent",
                $nullablesSetToNull
            );
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container[
            "remaining_total_size_percent"
        ] = $remaining_total_size_percent;

        return $this;
    }

    /**
     * Gets remaining_smart_data_size_percent
     *
     * @return int
     */
    public function getRemainingSmartDataSizePercent()
    {
        return $this->container["remaining_smart_data_size_percent"];
    }

    /**
     * Sets remaining_smart_data_size_percent
     *
     * @param int $remaining_smart_data_size_percent remaining_smart_data_size_percent
     *
     * @return self
     */
    public function setRemainingSmartDataSizePercent(
        $remaining_smart_data_size_percent
    ) {
        if (is_null($remaining_smart_data_size_percent)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "remaining_smart_data_size_percent"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search(
                "remaining_smart_data_size_percent",
                $nullablesSetToNull
            );
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container[
            "remaining_smart_data_size_percent"
        ] = $remaining_smart_data_size_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
