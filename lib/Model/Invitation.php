<?php
/**
 * Invitation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * Invitation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Invitation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "Invitation";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "id" => "int",
        "client_id" => "int",
        "redirect_uri" => "string",
        "cloud_name" => "string",
        "cloud_role" => "int",
        "project_name" => "string",
        "project_role" => "int",
        "email" => "string",
        "status" => "string",
        "sender_provider_sub" => "string",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "id" => null,
        "client_id" => null,
        "redirect_uri" => "uri",
        "cloud_name" => null,
        "cloud_role" => null,
        "project_name" => null,
        "project_role" => null,
        "email" => "email",
        "status" => null,
        "sender_provider_sub" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "id" => false,
        "client_id" => false,
        "redirect_uri" => false,
        "cloud_name" => false,
        "cloud_role" => false,
        "project_name" => false,
        "project_role" => true,
        "email" => false,
        "status" => false,
        "sender_provider_sub" => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "id" => "id",
        "client_id" => "client_id",
        "redirect_uri" => "redirect_uri",
        "cloud_name" => "cloud_name",
        "cloud_role" => "cloud_role",
        "project_name" => "project_name",
        "project_role" => "project_role",
        "email" => "email",
        "status" => "status",
        "sender_provider_sub" => "sender_provider_sub",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "id" => "setId",
        "client_id" => "setClientId",
        "redirect_uri" => "setRedirectUri",
        "cloud_name" => "setCloudName",
        "cloud_role" => "setCloudRole",
        "project_name" => "setProjectName",
        "project_role" => "setProjectRole",
        "email" => "setEmail",
        "status" => "setStatus",
        "sender_provider_sub" => "setSenderProviderSub",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "id" => "getId",
        "client_id" => "getClientId",
        "redirect_uri" => "getRedirectUri",
        "cloud_name" => "getCloudName",
        "cloud_role" => "getCloudRole",
        "project_name" => "getProjectName",
        "project_role" => "getProjectRole",
        "email" => "getEmail",
        "status" => "getStatus",
        "sender_provider_sub" => "getSenderProviderSub",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CLOUD_ROLE_100 = 100;
    public const CLOUD_ROLE_50 = 50;
    public const PROJECT_ROLE_100 = 100;
    public const PROJECT_ROLE_50 = 50;
    public const PROJECT_ROLE_25 = 25;
    public const PROJECT_ROLE_null = null;
    public const STATUS_A = "A";
    public const STATUS_D = "D";
    public const STATUS_P = "P";

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCloudRoleAllowableValues()
    {
        return [self::CLOUD_ROLE_100, self::CLOUD_ROLE_50];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProjectRoleAllowableValues()
    {
        return [
            self::PROJECT_ROLE_100,
            self::PROJECT_ROLE_50,
            self::PROJECT_ROLE_25,
            self::PROJECT_ROLE_null,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [self::STATUS_A, self::STATUS_D, self::STATUS_P];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("id", $data ?? [], null);
        $this->setIfExists("client_id", $data ?? [], null);
        $this->setIfExists("redirect_uri", $data ?? [], null);
        $this->setIfExists("cloud_name", $data ?? [], null);
        $this->setIfExists("cloud_role", $data ?? [], null);
        $this->setIfExists("project_name", $data ?? [], null);
        $this->setIfExists("project_role", $data ?? [], null);
        $this->setIfExists("email", $data ?? [], null);
        $this->setIfExists("status", $data ?? [], null);
        $this->setIfExists("sender_provider_sub", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container["id"] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container["client_id"] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container["redirect_uri"] === null) {
            $invalidProperties[] = "'redirect_uri' can't be null";
        }
        if (mb_strlen($this->container["redirect_uri"]) > 512) {
            $invalidProperties[] =
                "invalid value for 'redirect_uri', the character length must be smaller than or equal to 512.";
        }

        if ($this->container["cloud_name"] === null) {
            $invalidProperties[] = "'cloud_name' can't be null";
        }
        if ($this->container["cloud_role"] === null) {
            $invalidProperties[] = "'cloud_role' can't be null";
        }
        $allowedValues = $this->getCloudRoleAllowableValues();
        if (
            !is_null($this->container["cloud_role"]) &&
            !in_array($this->container["cloud_role"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cloud_role', must be one of '%s'",
                $this->container["cloud_role"],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container["cloud_role"] > 2147483647) {
            $invalidProperties[] =
                "invalid value for 'cloud_role', must be smaller than or equal to 2147483647.";
        }

        if ($this->container["cloud_role"] < 0) {
            $invalidProperties[] =
                "invalid value for 'cloud_role', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getProjectRoleAllowableValues();
        if (
            !is_null($this->container["project_role"]) &&
            !in_array($this->container["project_role"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'project_role', must be one of '%s'",
                $this->container["project_role"],
                implode("', '", $allowedValues)
            );
        }

        if (
            !is_null($this->container["project_role"]) &&
            $this->container["project_role"] > 2147483647
        ) {
            $invalidProperties[] =
                "invalid value for 'project_role', must be smaller than or equal to 2147483647.";
        }

        if (
            !is_null($this->container["project_role"]) &&
            $this->container["project_role"] < 0
        ) {
            $invalidProperties[] =
                "invalid value for 'project_role', must be bigger than or equal to 0.";
        }

        if ($this->container["email"] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if (mb_strlen($this->container["email"]) > 256) {
            $invalidProperties[] =
                "invalid value for 'email', the character length must be smaller than or equal to 256.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (
            !is_null($this->container["status"]) &&
            !in_array($this->container["status"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container["status"],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container["id"];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException(
                "non-nullable id cannot be null"
            );
        }

        $this->container["id"] = $id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container["client_id"];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException(
                "non-nullable client_id cannot be null"
            );
        }

        $this->container["client_id"] = $client_id;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string
     */
    public function getRedirectUri()
    {
        return $this->container["redirect_uri"];
    }

    /**
     * Sets redirect_uri
     *
     * @param string $redirect_uri User will be redirected to this uri when they accept the invitation
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {
        if (mb_strlen($redirect_uri) > 512) {
            throw new \InvalidArgumentException(
                'invalid length for $redirect_uri when calling Invitation., must be smaller than or equal to 512.'
            );
        }

        if (is_null($redirect_uri)) {
            throw new \InvalidArgumentException(
                "non-nullable redirect_uri cannot be null"
            );
        }

        $this->container["redirect_uri"] = $redirect_uri;

        return $this;
    }

    /**
     * Gets cloud_name
     *
     * @return string
     */
    public function getCloudName()
    {
        return $this->container["cloud_name"];
    }

    /**
     * Sets cloud_name
     *
     * @param string $cloud_name cloud_name
     *
     * @return self
     */
    public function setCloudName($cloud_name)
    {
        if (is_null($cloud_name)) {
            throw new \InvalidArgumentException(
                "non-nullable cloud_name cannot be null"
            );
        }

        $this->container["cloud_name"] = $cloud_name;

        return $this;
    }

    /**
     * Gets cloud_role
     *
     * @return int
     */
    public function getCloudRole()
    {
        return $this->container["cloud_role"];
    }

    /**
     * Sets cloud_role
     *
     * @param int $cloud_role Role the user will have when they accept the invitation
     *
     * @return self
     */
    public function setCloudRole($cloud_role)
    {
        $allowedValues = $this->getCloudRoleAllowableValues();
        if (!in_array($cloud_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cloud_role', must be one of '%s'",
                    $cloud_role,
                    implode("', '", $allowedValues)
                )
            );
        }

        if ($cloud_role > 2147483647) {
            throw new \InvalidArgumentException(
                'invalid value for $cloud_role when calling Invitation., must be smaller than or equal to 2147483647.'
            );
        }
        if ($cloud_role < 0) {
            throw new \InvalidArgumentException(
                'invalid value for $cloud_role when calling Invitation., must be bigger than or equal to 0.'
            );
        }

        if (is_null($cloud_role)) {
            throw new \InvalidArgumentException(
                "non-nullable cloud_role cannot be null"
            );
        }

        $this->container["cloud_role"] = $cloud_role;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container["project_name"];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name project_name
     *
     * @return self
     */
    public function setProjectName($project_name)
    {
        if (is_null($project_name)) {
            throw new \InvalidArgumentException(
                "non-nullable project_name cannot be null"
            );
        }

        $this->container["project_name"] = $project_name;

        return $this;
    }

    /**
     * Gets project_role
     *
     * @return int|null
     */
    public function getProjectRole()
    {
        return $this->container["project_role"];
    }

    /**
     * Sets project_role
     *
     * @param int|null $project_role Role the user will have when they accept the invitation
     *
     * @return self
     */
    public function setProjectRole($project_role)
    {
        $allowedValues = $this->getProjectRoleAllowableValues();
        if (
            !is_null($project_role) &&
            !in_array($project_role, $allowedValues, true)
        ) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'project_role', must be one of '%s'",
                    $project_role,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (!is_null($project_role) && $project_role > 2147483647) {
            throw new \InvalidArgumentException(
                'invalid value for $project_role when calling Invitation., must be smaller than or equal to 2147483647.'
            );
        }
        if (!is_null($project_role) && $project_role < 0) {
            throw new \InvalidArgumentException(
                'invalid value for $project_role when calling Invitation., must be bigger than or equal to 0.'
            );
        }

        if (is_null($project_role)) {
            array_push($this->openAPINullablesSetToNull, "project_role");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("project_role", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["project_role"] = $project_role;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container["email"];
    }

    /**
     * Sets email
     *
     * @param string $email email of the user to invite
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (mb_strlen($email) > 256) {
            throw new \InvalidArgumentException(
                'invalid length for $email when calling Invitation., must be smaller than or equal to 256.'
            );
        }

        if (is_null($email)) {
            throw new \InvalidArgumentException(
                "non-nullable email cannot be null"
            );
        }

        $this->container["email"] = $email;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container["status"];
    }

    /**
     * Sets status
     *
     * @param string|null $status A: Accepted         D: Denied         P: Pending
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($status)) {
            throw new \InvalidArgumentException(
                "non-nullable status cannot be null"
            );
        }

        $this->container["status"] = $status;

        return $this;
    }

    /**
     * Gets sender_provider_sub
     *
     * @return string|null
     */
    public function getSenderProviderSub()
    {
        return $this->container["sender_provider_sub"];
    }

    /**
     * Sets sender_provider_sub
     *
     * @param string|null $sender_provider_sub OIDC sub of the sender. The original sub from the provider is used instead of the broker sub
     *
     * @return self
     */
    public function setSenderProviderSub($sender_provider_sub)
    {
        if (is_null($sender_provider_sub)) {
            throw new \InvalidArgumentException(
                "non-nullable sender_provider_sub cannot be null"
            );
        }

        $this->container["sender_provider_sub"] = $sender_provider_sub;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
