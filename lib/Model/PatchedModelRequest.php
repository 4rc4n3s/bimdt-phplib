<?php
/**
 * PatchedModelRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * PatchedModelRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PatchedModelRequest implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "PatchedModelRequest";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "name" => "string",
        "source" => "string",
        "world_position" => "float[]",
        "size_ratio" => "float",
        "archived" => "bool",
        "version" => "string",
        "north_vector" => "float[][]",
        "recommanded_2d_angle" => "float",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "name" => null,
        "source" => null,
        "world_position" => "double",
        "size_ratio" => "double",
        "archived" => null,
        "version" => null,
        "north_vector" => "double",
        "recommanded_2d_angle" => "double",
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "name" => true,
        "source" => false,
        "world_position" => true,
        "size_ratio" => true,
        "archived" => false,
        "version" => true,
        "north_vector" => true,
        "recommanded_2d_angle" => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "name" => "name",
        "source" => "source",
        "world_position" => "world_position",
        "size_ratio" => "size_ratio",
        "archived" => "archived",
        "version" => "version",
        "north_vector" => "north_vector",
        "recommanded_2d_angle" => "recommanded_2d_angle",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "name" => "setName",
        "source" => "setSource",
        "world_position" => "setWorldPosition",
        "size_ratio" => "setSizeRatio",
        "archived" => "setArchived",
        "version" => "setVersion",
        "north_vector" => "setNorthVector",
        "recommanded_2d_angle" => "setRecommanded2dAngle",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "name" => "getName",
        "source" => "getSource",
        "world_position" => "getWorldPosition",
        "size_ratio" => "getSizeRatio",
        "archived" => "getArchived",
        "version" => "getVersion",
        "north_vector" => "getNorthVector",
        "recommanded_2d_angle" => "getRecommanded2dAngle",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SOURCE_UPLOAD = "UPLOAD";
    public const SOURCE_SPLIT = "SPLIT";
    public const SOURCE_MERGE = "MERGE";
    public const SOURCE_EXPORT = "EXPORT";
    public const SOURCE_OPTIMIZED = "OPTIMIZED";

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_UPLOAD,
            self::SOURCE_SPLIT,
            self::SOURCE_MERGE,
            self::SOURCE_EXPORT,
            self::SOURCE_OPTIMIZED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("name", $data ?? [], null);
        $this->setIfExists("source", $data ?? [], null);
        $this->setIfExists("world_position", $data ?? [], null);
        $this->setIfExists("size_ratio", $data ?? [], null);
        $this->setIfExists("archived", $data ?? [], null);
        $this->setIfExists("version", $data ?? [], null);
        $this->setIfExists("north_vector", $data ?? [], null);
        $this->setIfExists("recommanded_2d_angle", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (
            !is_null($this->container["name"]) &&
            mb_strlen($this->container["name"]) > 512
        ) {
            $invalidProperties[] =
                "invalid value for 'name', the character length must be smaller than or equal to 512.";
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (
            !is_null($this->container["source"]) &&
            !in_array($this->container["source"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container["source"],
                implode("', '", $allowedValues)
            );
        }

        if (
            !is_null($this->container["world_position"]) &&
            count($this->container["world_position"]) > 3
        ) {
            $invalidProperties[] =
                "invalid value for 'world_position', number of items must be less than or equal to 3.";
        }

        if (
            !is_null($this->container["version"]) &&
            mb_strlen($this->container["version"]) > 256
        ) {
            $invalidProperties[] =
                "invalid value for 'version', the character length must be smaller than or equal to 256.";
        }

        if (
            !is_null($this->container["north_vector"]) &&
            count($this->container["north_vector"]) > 2
        ) {
            $invalidProperties[] =
                "invalid value for 'north_vector', number of items must be less than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container["name"];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && mb_strlen($name) > 512) {
            throw new \InvalidArgumentException(
                'invalid length for $name when calling PatchedModelRequest., must be smaller than or equal to 512.'
            );
        }

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, "name");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("name", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["name"] = $name;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container["source"];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($source)) {
            throw new \InvalidArgumentException(
                "non-nullable source cannot be null"
            );
        }

        $this->container["source"] = $source;

        return $this;
    }

    /**
     * Gets world_position
     *
     * @return float[]|null
     */
    public function getWorldPosition()
    {
        return $this->container["world_position"];
    }

    /**
     * Sets world_position
     *
     * @param float[]|null $world_position [x,y,z] array of the position of the local_placement in world coordinates
     *
     * @return self
     */
    public function setWorldPosition($world_position)
    {
        if (!is_null($world_position) && count($world_position) > 3) {
            throw new \InvalidArgumentException(
                'invalid value for $world_position when calling PatchedModelRequest., number of items must be less than or equal to 3.'
            );
        }

        if (is_null($world_position)) {
            array_push($this->openAPINullablesSetToNull, "world_position");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("world_position", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["world_position"] = $world_position;

        return $this;
    }

    /**
     * Gets size_ratio
     *
     * @return float|null
     */
    public function getSizeRatio()
    {
        return $this->container["size_ratio"];
    }

    /**
     * Sets size_ratio
     *
     * @param float|null $size_ratio How many meters a unit represents
     *
     * @return self
     */
    public function setSizeRatio($size_ratio)
    {
        if (is_null($size_ratio)) {
            array_push($this->openAPINullablesSetToNull, "size_ratio");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("size_ratio", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["size_ratio"] = $size_ratio;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container["archived"];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException(
                "non-nullable archived cannot be null"
            );
        }

        $this->container["archived"] = $archived;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container["version"];
    }

    /**
     * Sets version
     *
     * @param string|null $version This field is only for information. Updating it won't impact the export.
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (!is_null($version) && mb_strlen($version) > 256) {
            throw new \InvalidArgumentException(
                'invalid length for $version when calling PatchedModelRequest., must be smaller than or equal to 256.'
            );
        }

        if (is_null($version)) {
            array_push($this->openAPINullablesSetToNull, "version");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("version", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["version"] = $version;

        return $this;
    }

    /**
     * Gets north_vector
     *
     * @return float[][]|null
     */
    public function getNorthVector()
    {
        return $this->container["north_vector"];
    }

    /**
     * Sets north_vector
     *
     * @param float[][]|null $north_vector This field is only for information. Updating it won't impact the export.
     *
     * @return self
     */
    public function setNorthVector($north_vector)
    {
        if (!is_null($north_vector) && count($north_vector) > 2) {
            throw new \InvalidArgumentException(
                'invalid value for $north_vector when calling PatchedModelRequest., number of items must be less than or equal to 2.'
            );
        }

        if (is_null($north_vector)) {
            array_push($this->openAPINullablesSetToNull, "north_vector");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("north_vector", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["north_vector"] = $north_vector;

        return $this;
    }

    /**
     * Gets recommanded_2d_angle
     *
     * @return float|null
     */
    public function getRecommanded2dAngle()
    {
        return $this->container["recommanded_2d_angle"];
    }

    /**
     * Sets recommanded_2d_angle
     *
     * @param float|null $recommanded_2d_angle This is the angle in clockwise degree to apply on the 2D to optimise the horizontality of objects. This field is only for information. Updating it won't impact the export.
     *
     * @return self
     */
    public function setRecommanded2dAngle($recommanded_2d_angle)
    {
        if (is_null($recommanded_2d_angle)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "recommanded_2d_angle"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("recommanded_2d_angle", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["recommanded_2d_angle"] = $recommanded_2d_angle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
