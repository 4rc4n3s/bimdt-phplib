<?php
/**
 * IfcChecker
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * IfcChecker Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IfcChecker implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "IfcChecker";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "id" => "int",
        "ifc" => "Model",
        "creator" => "User",
        "name" => "string",
        "results" => "\OpenAPI\Client\Model\CheckerResult[]",
        "created_at" => "\DateTime",
        "updated_at" => "\DateTime",
        "checkplan" => "CheckPlan",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "id" => null,
        "ifc" => null,
        "creator" => null,
        "name" => null,
        "results" => null,
        "created_at" => "date-time",
        "updated_at" => "date-time",
        "checkplan" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "id" => false,
        "ifc" => false,
        "creator" => false,
        "name" => true,
        "results" => false,
        "created_at" => false,
        "updated_at" => false,
        "checkplan" => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "id" => "id",
        "ifc" => "ifc",
        "creator" => "creator",
        "name" => "name",
        "results" => "results",
        "created_at" => "created_at",
        "updated_at" => "updated_at",
        "checkplan" => "checkplan",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "id" => "setId",
        "ifc" => "setIfc",
        "creator" => "setCreator",
        "name" => "setName",
        "results" => "setResults",
        "created_at" => "setCreatedAt",
        "updated_at" => "setUpdatedAt",
        "checkplan" => "setCheckplan",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "id" => "getId",
        "ifc" => "getIfc",
        "creator" => "getCreator",
        "name" => "getName",
        "results" => "getResults",
        "created_at" => "getCreatedAt",
        "updated_at" => "getUpdatedAt",
        "checkplan" => "getCheckplan",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("id", $data ?? [], null);
        $this->setIfExists("ifc", $data ?? [], null);
        $this->setIfExists("creator", $data ?? [], null);
        $this->setIfExists("name", $data ?? [], null);
        $this->setIfExists("results", $data ?? [], null);
        $this->setIfExists("created_at", $data ?? [], null);
        $this->setIfExists("updated_at", $data ?? [], null);
        $this->setIfExists("checkplan", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container["id"] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container["ifc"] === null) {
            $invalidProperties[] = "'ifc' can't be null";
        }
        if ($this->container["creator"] === null) {
            $invalidProperties[] = "'creator' can't be null";
        }
        if (
            !is_null($this->container["name"]) &&
            mb_strlen($this->container["name"]) > 256
        ) {
            $invalidProperties[] =
                "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if ($this->container["results"] === null) {
            $invalidProperties[] = "'results' can't be null";
        }
        if ($this->container["created_at"] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container["updated_at"] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container["checkplan"] === null) {
            $invalidProperties[] = "'checkplan' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container["id"];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException(
                "non-nullable id cannot be null"
            );
        }

        $this->container["id"] = $id;

        return $this;
    }

    /**
     * Gets ifc
     *
     * @return Model
     */
    public function getIfc()
    {
        return $this->container["ifc"];
    }

    /**
     * Sets ifc
     *
     * @param Model $ifc ifc
     *
     * @return self
     */
    public function setIfc($ifc)
    {
        if (is_null($ifc)) {
            throw new \InvalidArgumentException(
                "non-nullable ifc cannot be null"
            );
        }

        $this->container["ifc"] = $ifc;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return User
     */
    public function getCreator()
    {
        return $this->container["creator"];
    }

    /**
     * Sets creator
     *
     * @param User $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        if (is_null($creator)) {
            throw new \InvalidArgumentException(
                "non-nullable creator cannot be null"
            );
        }

        $this->container["creator"] = $creator;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container["name"];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && mb_strlen($name) > 256) {
            throw new \InvalidArgumentException(
                'invalid length for $name when calling IfcChecker., must be smaller than or equal to 256.'
            );
        }

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, "name");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("name", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["name"] = $name;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \OpenAPI\Client\Model\CheckerResult[]
     */
    public function getResults()
    {
        return $this->container["results"];
    }

    /**
     * Sets results
     *
     * @param \OpenAPI\Client\Model\CheckerResult[] $results results
     *
     * @return self
     */
    public function setResults($results)
    {
        if (is_null($results)) {
            throw new \InvalidArgumentException(
                "non-nullable results cannot be null"
            );
        }

        $this->container["results"] = $results;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container["created_at"];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException(
                "non-nullable created_at cannot be null"
            );
        }

        $this->container["created_at"] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container["updated_at"];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException(
                "non-nullable updated_at cannot be null"
            );
        }

        $this->container["updated_at"] = $updated_at;

        return $this;
    }

    /**
     * Gets checkplan
     *
     * @return CheckPlan
     */
    public function getCheckplan()
    {
        return $this->container["checkplan"];
    }

    /**
     * Sets checkplan
     *
     * @param CheckPlan $checkplan checkplan
     *
     * @return self
     */
    public function setCheckplan($checkplan)
    {
        if (is_null($checkplan)) {
            throw new \InvalidArgumentException(
                "non-nullable checkplan cannot be null"
            );
        }

        $this->container["checkplan"] = $checkplan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
