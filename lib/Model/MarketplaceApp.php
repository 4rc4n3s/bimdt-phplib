<?php
/**
 * MarketplaceApp
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * MarketplaceApp Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MarketplaceApp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "MarketplaceApp";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "id" => "int",
        "name" => "string",
        "short_description" => "string",
        "long_description" => "string",
        "activation_webhook_url" => "string",
        "post_activation_redirect_uri" => "string",
        "viewer_plugins_urls" => "string[]",
        "creator" => "User",
        "scopes" => "string[]",
        "settings_url" => "string",
        "is_public" => "bool",
        "tags" => "string[]",
        "logo" => "string",
        "file" => "string",
        "images" => "\OpenAPI\Client\Model\MarketplaceAppImage[]",
        "organization" => "PublicOrganization",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "id" => null,
        "name" => null,
        "short_description" => null,
        "long_description" => null,
        "activation_webhook_url" => "uri",
        "post_activation_redirect_uri" => "uri",
        "viewer_plugins_urls" => "uri",
        "creator" => null,
        "scopes" => null,
        "settings_url" => "uri",
        "is_public" => null,
        "tags" => null,
        "logo" => "uri",
        "file" => "uri",
        "images" => null,
        "organization" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "id" => false,
        "name" => false,
        "short_description" => false,
        "long_description" => false,
        "activation_webhook_url" => true,
        "post_activation_redirect_uri" => true,
        "viewer_plugins_urls" => true,
        "creator" => false,
        "scopes" => false,
        "settings_url" => true,
        "is_public" => false,
        "tags" => false,
        "logo" => true,
        "file" => true,
        "images" => false,
        "organization" => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "id" => "id",
        "name" => "name",
        "short_description" => "short_description",
        "long_description" => "long_description",
        "activation_webhook_url" => "activation_webhook_url",
        "post_activation_redirect_uri" => "post_activation_redirect_uri",
        "viewer_plugins_urls" => "viewer_plugins_urls",
        "creator" => "creator",
        "scopes" => "scopes",
        "settings_url" => "settings_url",
        "is_public" => "is_public",
        "tags" => "tags",
        "logo" => "logo",
        "file" => "file",
        "images" => "images",
        "organization" => "organization",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "id" => "setId",
        "name" => "setName",
        "short_description" => "setShortDescription",
        "long_description" => "setLongDescription",
        "activation_webhook_url" => "setActivationWebhookUrl",
        "post_activation_redirect_uri" => "setPostActivationRedirectUri",
        "viewer_plugins_urls" => "setViewerPluginsUrls",
        "creator" => "setCreator",
        "scopes" => "setScopes",
        "settings_url" => "setSettingsUrl",
        "is_public" => "setIsPublic",
        "tags" => "setTags",
        "logo" => "setLogo",
        "file" => "setFile",
        "images" => "setImages",
        "organization" => "setOrganization",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "id" => "getId",
        "name" => "getName",
        "short_description" => "getShortDescription",
        "long_description" => "getLongDescription",
        "activation_webhook_url" => "getActivationWebhookUrl",
        "post_activation_redirect_uri" => "getPostActivationRedirectUri",
        "viewer_plugins_urls" => "getViewerPluginsUrls",
        "creator" => "getCreator",
        "scopes" => "getScopes",
        "settings_url" => "getSettingsUrl",
        "is_public" => "getIsPublic",
        "tags" => "getTags",
        "logo" => "getLogo",
        "file" => "getFile",
        "images" => "getImages",
        "organization" => "getOrganization",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("id", $data ?? [], null);
        $this->setIfExists("name", $data ?? [], null);
        $this->setIfExists("short_description", $data ?? [], null);
        $this->setIfExists("long_description", $data ?? [], null);
        $this->setIfExists("activation_webhook_url", $data ?? [], null);
        $this->setIfExists("post_activation_redirect_uri", $data ?? [], null);
        $this->setIfExists("viewer_plugins_urls", $data ?? [], null);
        $this->setIfExists("creator", $data ?? [], null);
        $this->setIfExists("scopes", $data ?? [], null);
        $this->setIfExists("settings_url", $data ?? [], null);
        $this->setIfExists("is_public", $data ?? [], null);
        $this->setIfExists("tags", $data ?? [], null);
        $this->setIfExists("logo", $data ?? [], null);
        $this->setIfExists("file", $data ?? [], null);
        $this->setIfExists("images", $data ?? [], null);
        $this->setIfExists("organization", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container["id"] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container["name"] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (mb_strlen($this->container["name"]) > 256) {
            $invalidProperties[] =
                "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if ($this->container["short_description"] === null) {
            $invalidProperties[] = "'short_description' can't be null";
        }
        if (mb_strlen($this->container["short_description"]) > 130) {
            $invalidProperties[] =
                "invalid value for 'short_description', the character length must be smaller than or equal to 130.";
        }

        if ($this->container["long_description"] === null) {
            $invalidProperties[] = "'long_description' can't be null";
        }
        if (
            !is_null($this->container["activation_webhook_url"]) &&
            mb_strlen($this->container["activation_webhook_url"]) > 1024
        ) {
            $invalidProperties[] =
                "invalid value for 'activation_webhook_url', the character length must be smaller than or equal to 1024.";
        }

        if (
            !is_null($this->container["post_activation_redirect_uri"]) &&
            mb_strlen($this->container["post_activation_redirect_uri"]) > 1024
        ) {
            $invalidProperties[] =
                "invalid value for 'post_activation_redirect_uri', the character length must be smaller than or equal to 1024.";
        }

        if ($this->container["creator"] === null) {
            $invalidProperties[] = "'creator' can't be null";
        }
        if ($this->container["scopes"] === null) {
            $invalidProperties[] = "'scopes' can't be null";
        }
        if (
            !is_null($this->container["settings_url"]) &&
            mb_strlen($this->container["settings_url"]) > 1024
        ) {
            $invalidProperties[] =
                "invalid value for 'settings_url', the character length must be smaller than or equal to 1024.";
        }

        if ($this->container["is_public"] === null) {
            $invalidProperties[] = "'is_public' can't be null";
        }
        if ($this->container["images"] === null) {
            $invalidProperties[] = "'images' can't be null";
        }
        if ($this->container["organization"] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container["id"];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException(
                "non-nullable id cannot be null"
            );
        }

        $this->container["id"] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container["name"];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (mb_strlen($name) > 256) {
            throw new \InvalidArgumentException(
                'invalid length for $name when calling MarketplaceApp., must be smaller than or equal to 256.'
            );
        }

        if (is_null($name)) {
            throw new \InvalidArgumentException(
                "non-nullable name cannot be null"
            );
        }

        $this->container["name"] = $name;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container["short_description"];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description short_description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        if (mb_strlen($short_description) > 130) {
            throw new \InvalidArgumentException(
                'invalid length for $short_description when calling MarketplaceApp., must be smaller than or equal to 130.'
            );
        }

        if (is_null($short_description)) {
            throw new \InvalidArgumentException(
                "non-nullable short_description cannot be null"
            );
        }

        $this->container["short_description"] = $short_description;

        return $this;
    }

    /**
     * Gets long_description
     *
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container["long_description"];
    }

    /**
     * Sets long_description
     *
     * @param string $long_description long_description
     *
     * @return self
     */
    public function setLongDescription($long_description)
    {
        if (is_null($long_description)) {
            throw new \InvalidArgumentException(
                "non-nullable long_description cannot be null"
            );
        }

        $this->container["long_description"] = $long_description;

        return $this;
    }

    /**
     * Gets activation_webhook_url
     *
     * @return string|null
     */
    public function getActivationWebhookUrl()
    {
        return $this->container["activation_webhook_url"];
    }

    /**
     * Sets activation_webhook_url
     *
     * @param string|null $activation_webhook_url activation_webhook_url
     *
     * @return self
     */
    public function setActivationWebhookUrl($activation_webhook_url)
    {
        if (
            !is_null($activation_webhook_url) &&
            mb_strlen($activation_webhook_url) > 1024
        ) {
            throw new \InvalidArgumentException(
                'invalid length for $activation_webhook_url when calling MarketplaceApp., must be smaller than or equal to 1024.'
            );
        }

        if (is_null($activation_webhook_url)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "activation_webhook_url"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search(
                "activation_webhook_url",
                $nullablesSetToNull
            );
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["activation_webhook_url"] = $activation_webhook_url;

        return $this;
    }

    /**
     * Gets post_activation_redirect_uri
     *
     * @return string|null
     */
    public function getPostActivationRedirectUri()
    {
        return $this->container["post_activation_redirect_uri"];
    }

    /**
     * Sets post_activation_redirect_uri
     *
     * @param string|null $post_activation_redirect_uri post_activation_redirect_uri
     *
     * @return self
     */
    public function setPostActivationRedirectUri($post_activation_redirect_uri)
    {
        if (
            !is_null($post_activation_redirect_uri) &&
            mb_strlen($post_activation_redirect_uri) > 1024
        ) {
            throw new \InvalidArgumentException(
                'invalid length for $post_activation_redirect_uri when calling MarketplaceApp., must be smaller than or equal to 1024.'
            );
        }

        if (is_null($post_activation_redirect_uri)) {
            array_push(
                $this->openAPINullablesSetToNull,
                "post_activation_redirect_uri"
            );
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search(
                "post_activation_redirect_uri",
                $nullablesSetToNull
            );
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container[
            "post_activation_redirect_uri"
        ] = $post_activation_redirect_uri;

        return $this;
    }

    /**
     * Gets viewer_plugins_urls
     *
     * @return string[]|null
     */
    public function getViewerPluginsUrls()
    {
        return $this->container["viewer_plugins_urls"];
    }

    /**
     * Sets viewer_plugins_urls
     *
     * @param string[]|null $viewer_plugins_urls viewer_plugins_urls
     *
     * @return self
     */
    public function setViewerPluginsUrls($viewer_plugins_urls)
    {
        if (is_null($viewer_plugins_urls)) {
            array_push($this->openAPINullablesSetToNull, "viewer_plugins_urls");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("viewer_plugins_urls", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["viewer_plugins_urls"] = $viewer_plugins_urls;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return User
     */
    public function getCreator()
    {
        return $this->container["creator"];
    }

    /**
     * Sets creator
     *
     * @param User $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        if (is_null($creator)) {
            throw new \InvalidArgumentException(
                "non-nullable creator cannot be null"
            );
        }

        $this->container["creator"] = $creator;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]
     */
    public function getScopes()
    {
        return $this->container["scopes"];
    }

    /**
     * Sets scopes
     *
     * @param string[] $scopes scopes
     *
     * @return self
     */
    public function setScopes($scopes)
    {
        if (is_null($scopes)) {
            throw new \InvalidArgumentException(
                "non-nullable scopes cannot be null"
            );
        }

        $this->container["scopes"] = $scopes;

        return $this;
    }

    /**
     * Gets settings_url
     *
     * @return string|null
     */
    public function getSettingsUrl()
    {
        return $this->container["settings_url"];
    }

    /**
     * Sets settings_url
     *
     * @param string|null $settings_url this URL will be called with query params ?cloud_id=
     *
     * @return self
     */
    public function setSettingsUrl($settings_url)
    {
        if (!is_null($settings_url) && mb_strlen($settings_url) > 1024) {
            throw new \InvalidArgumentException(
                'invalid length for $settings_url when calling MarketplaceApp., must be smaller than or equal to 1024.'
            );
        }

        if (is_null($settings_url)) {
            array_push($this->openAPINullablesSetToNull, "settings_url");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("settings_url", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["settings_url"] = $settings_url;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container["is_public"];
    }

    /**
     * Sets is_public
     *
     * @param bool $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException(
                "non-nullable is_public cannot be null"
            );
        }

        $this->container["is_public"] = $is_public;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container["tags"];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException(
                "non-nullable tags cannot be null"
            );
        }

        $this->container["tags"] = $tags;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container["logo"];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            array_push($this->openAPINullablesSetToNull, "logo");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("logo", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["logo"] = $logo;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string|null
     */
    public function getFile()
    {
        return $this->container["file"];
    }

    /**
     * Sets file
     *
     * @param string|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        if (is_null($file)) {
            array_push($this->openAPINullablesSetToNull, "file");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("file", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["file"] = $file;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \OpenAPI\Client\Model\MarketplaceAppImage[]
     */
    public function getImages()
    {
        return $this->container["images"];
    }

    /**
     * Sets images
     *
     * @param \OpenAPI\Client\Model\MarketplaceAppImage[] $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException(
                "non-nullable images cannot be null"
            );
        }

        $this->container["images"] = $images;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return PublicOrganization
     */
    public function getOrganization()
    {
        return $this->container["organization"];
    }

    /**
     * Sets organization
     *
     * @param PublicOrganization $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            throw new \InvalidArgumentException(
                "non-nullable organization cannot be null"
            );
        }

        $this->container["organization"] = $organization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
