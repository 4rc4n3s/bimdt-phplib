<?php
/**
 * PatchedViewpointRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * PatchedViewpointRequest Class Doc Comment
 *
 * @category Class
 * @description Adds nested create feature
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PatchedViewpointRequest implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "PatchedViewpointRequest";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "index" => "int",
        "guid" => "string",
        "originating_system" => "string",
        "authoring_tool_id" => "string",
        "orthogonal_camera" =>
            "\OpenAPI\Client\Model\PatchedViewpointRequestOrthogonalCamera",
        "perspective_camera" =>
            "\OpenAPI\Client\Model\PatchedViewpointRequestPerspectiveCamera",
        "lines" => "\OpenAPI\Client\Model\LineRequest[]",
        "clipping_planes" => "\OpenAPI\Client\Model\ClippingPlaneRequest[]",
        "snapshot" => "\OpenAPI\Client\Model\PatchedViewpointRequestSnapshot",
        "components" =>
            "\OpenAPI\Client\Model\PatchedViewpointRequestComponents",
        "pins" => "\OpenAPI\Client\Model\PinRequest[]",
        "temp_id" => "int",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "index" => null,
        "guid" => "uuid",
        "originating_system" => null,
        "authoring_tool_id" => null,
        "orthogonal_camera" => null,
        "perspective_camera" => null,
        "lines" => null,
        "clipping_planes" => null,
        "snapshot" => null,
        "components" => null,
        "pins" => null,
        "temp_id" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "index" => true,
        "guid" => false,
        "originating_system" => true,
        "authoring_tool_id" => true,
        "orthogonal_camera" => true,
        "perspective_camera" => true,
        "lines" => true,
        "clipping_planes" => true,
        "snapshot" => true,
        "components" => true,
        "pins" => true,
        "temp_id" => true,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "index" => "index",
        "guid" => "guid",
        "originating_system" => "originating_system",
        "authoring_tool_id" => "authoring_tool_id",
        "orthogonal_camera" => "orthogonal_camera",
        "perspective_camera" => "perspective_camera",
        "lines" => "lines",
        "clipping_planes" => "clipping_planes",
        "snapshot" => "snapshot",
        "components" => "components",
        "pins" => "pins",
        "temp_id" => "temp_id",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "index" => "setIndex",
        "guid" => "setGuid",
        "originating_system" => "setOriginatingSystem",
        "authoring_tool_id" => "setAuthoringToolId",
        "orthogonal_camera" => "setOrthogonalCamera",
        "perspective_camera" => "setPerspectiveCamera",
        "lines" => "setLines",
        "clipping_planes" => "setClippingPlanes",
        "snapshot" => "setSnapshot",
        "components" => "setComponents",
        "pins" => "setPins",
        "temp_id" => "setTempId",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "index" => "getIndex",
        "guid" => "getGuid",
        "originating_system" => "getOriginatingSystem",
        "authoring_tool_id" => "getAuthoringToolId",
        "orthogonal_camera" => "getOrthogonalCamera",
        "perspective_camera" => "getPerspectiveCamera",
        "lines" => "getLines",
        "clipping_planes" => "getClippingPlanes",
        "snapshot" => "getSnapshot",
        "components" => "getComponents",
        "pins" => "getPins",
        "temp_id" => "getTempId",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("index", $data ?? [], null);
        $this->setIfExists("guid", $data ?? [], null);
        $this->setIfExists("originating_system", $data ?? [], null);
        $this->setIfExists("authoring_tool_id", $data ?? [], null);
        $this->setIfExists("orthogonal_camera", $data ?? [], null);
        $this->setIfExists("perspective_camera", $data ?? [], null);
        $this->setIfExists("lines", $data ?? [], null);
        $this->setIfExists("clipping_planes", $data ?? [], null);
        $this->setIfExists("snapshot", $data ?? [], null);
        $this->setIfExists("components", $data ?? [], null);
        $this->setIfExists("pins", $data ?? [], null);
        $this->setIfExists("temp_id", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (
            !is_null($this->container["index"]) &&
            $this->container["index"] > 2147483647
        ) {
            $invalidProperties[] =
                "invalid value for 'index', must be smaller than or equal to 2147483647.";
        }

        if (
            !is_null($this->container["index"]) &&
            $this->container["index"] < 0
        ) {
            $invalidProperties[] =
                "invalid value for 'index', must be bigger than or equal to 0.";
        }

        if (
            !is_null($this->container["originating_system"]) &&
            mb_strlen($this->container["originating_system"]) > 256
        ) {
            $invalidProperties[] =
                "invalid value for 'originating_system', the character length must be smaller than or equal to 256.";
        }

        if (
            !is_null($this->container["authoring_tool_id"]) &&
            mb_strlen($this->container["authoring_tool_id"]) > 256
        ) {
            $invalidProperties[] =
                "invalid value for 'authoring_tool_id', the character length must be smaller than or equal to 256.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container["index"];
    }

    /**
     * Sets index
     *
     * @param int|null $index index
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (!is_null($index) && $index > 2147483647) {
            throw new \InvalidArgumentException(
                'invalid value for $index when calling PatchedViewpointRequest., must be smaller than or equal to 2147483647.'
            );
        }
        if (!is_null($index) && $index < 0) {
            throw new \InvalidArgumentException(
                'invalid value for $index when calling PatchedViewpointRequest., must be bigger than or equal to 0.'
            );
        }

        if (is_null($index)) {
            array_push($this->openAPINullablesSetToNull, "index");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("index", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["index"] = $index;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container["guid"];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        if (is_null($guid)) {
            throw new \InvalidArgumentException(
                "non-nullable guid cannot be null"
            );
        }

        $this->container["guid"] = $guid;

        return $this;
    }

    /**
     * Gets originating_system
     *
     * @return string|null
     */
    public function getOriginatingSystem()
    {
        return $this->container["originating_system"];
    }

    /**
     * Sets originating_system
     *
     * @param string|null $originating_system Name of the system in which the viewpoint is originated
     *
     * @return self
     */
    public function setOriginatingSystem($originating_system)
    {
        if (
            !is_null($originating_system) &&
            mb_strlen($originating_system) > 256
        ) {
            throw new \InvalidArgumentException(
                'invalid length for $originating_system when calling PatchedViewpointRequest., must be smaller than or equal to 256.'
            );
        }

        if (is_null($originating_system)) {
            array_push($this->openAPINullablesSetToNull, "originating_system");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("originating_system", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["originating_system"] = $originating_system;

        return $this;
    }

    /**
     * Gets authoring_tool_id
     *
     * @return string|null
     */
    public function getAuthoringToolId()
    {
        return $this->container["authoring_tool_id"];
    }

    /**
     * Sets authoring_tool_id
     *
     * @param string|null $authoring_tool_id System specific identifier of the viewpoint in the originating BIM tool
     *
     * @return self
     */
    public function setAuthoringToolId($authoring_tool_id)
    {
        if (
            !is_null($authoring_tool_id) &&
            mb_strlen($authoring_tool_id) > 256
        ) {
            throw new \InvalidArgumentException(
                'invalid length for $authoring_tool_id when calling PatchedViewpointRequest., must be smaller than or equal to 256.'
            );
        }

        if (is_null($authoring_tool_id)) {
            array_push($this->openAPINullablesSetToNull, "authoring_tool_id");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("authoring_tool_id", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["authoring_tool_id"] = $authoring_tool_id;

        return $this;
    }

    /**
     * Gets orthogonal_camera
     *
     * @return \OpenAPI\Client\Model\PatchedViewpointRequestOrthogonalCamera|null
     */
    public function getOrthogonalCamera()
    {
        return $this->container["orthogonal_camera"];
    }

    /**
     * Sets orthogonal_camera
     *
     * @param \OpenAPI\Client\Model\PatchedViewpointRequestOrthogonalCamera|null $orthogonal_camera orthogonal_camera
     *
     * @return self
     */
    public function setOrthogonalCamera($orthogonal_camera)
    {
        if (is_null($orthogonal_camera)) {
            array_push($this->openAPINullablesSetToNull, "orthogonal_camera");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("orthogonal_camera", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["orthogonal_camera"] = $orthogonal_camera;

        return $this;
    }

    /**
     * Gets perspective_camera
     *
     * @return \OpenAPI\Client\Model\PatchedViewpointRequestPerspectiveCamera|null
     */
    public function getPerspectiveCamera()
    {
        return $this->container["perspective_camera"];
    }

    /**
     * Sets perspective_camera
     *
     * @param \OpenAPI\Client\Model\PatchedViewpointRequestPerspectiveCamera|null $perspective_camera perspective_camera
     *
     * @return self
     */
    public function setPerspectiveCamera($perspective_camera)
    {
        if (is_null($perspective_camera)) {
            array_push($this->openAPINullablesSetToNull, "perspective_camera");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("perspective_camera", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["perspective_camera"] = $perspective_camera;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \OpenAPI\Client\Model\LineRequest[]|null
     */
    public function getLines()
    {
        return $this->container["lines"];
    }

    /**
     * Sets lines
     *
     * @param \OpenAPI\Client\Model\LineRequest[]|null $lines lines
     *
     * @return self
     */
    public function setLines($lines)
    {
        if (is_null($lines)) {
            array_push($this->openAPINullablesSetToNull, "lines");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("lines", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["lines"] = $lines;

        return $this;
    }

    /**
     * Gets clipping_planes
     *
     * @return \OpenAPI\Client\Model\ClippingPlaneRequest[]|null
     */
    public function getClippingPlanes()
    {
        return $this->container["clipping_planes"];
    }

    /**
     * Sets clipping_planes
     *
     * @param \OpenAPI\Client\Model\ClippingPlaneRequest[]|null $clipping_planes clipping_planes
     *
     * @return self
     */
    public function setClippingPlanes($clipping_planes)
    {
        if (is_null($clipping_planes)) {
            array_push($this->openAPINullablesSetToNull, "clipping_planes");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("clipping_planes", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["clipping_planes"] = $clipping_planes;

        return $this;
    }

    /**
     * Gets snapshot
     *
     * @return \OpenAPI\Client\Model\PatchedViewpointRequestSnapshot|null
     */
    public function getSnapshot()
    {
        return $this->container["snapshot"];
    }

    /**
     * Sets snapshot
     *
     * @param \OpenAPI\Client\Model\PatchedViewpointRequestSnapshot|null $snapshot snapshot
     *
     * @return self
     */
    public function setSnapshot($snapshot)
    {
        if (is_null($snapshot)) {
            array_push($this->openAPINullablesSetToNull, "snapshot");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("snapshot", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["snapshot"] = $snapshot;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \OpenAPI\Client\Model\PatchedViewpointRequestComponents|null
     */
    public function getComponents()
    {
        return $this->container["components"];
    }

    /**
     * Sets components
     *
     * @param \OpenAPI\Client\Model\PatchedViewpointRequestComponents|null $components components
     *
     * @return self
     */
    public function setComponents($components)
    {
        if (is_null($components)) {
            array_push($this->openAPINullablesSetToNull, "components");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("components", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["components"] = $components;

        return $this;
    }

    /**
     * Gets pins
     *
     * @return \OpenAPI\Client\Model\PinRequest[]|null
     */
    public function getPins()
    {
        return $this->container["pins"];
    }

    /**
     * Sets pins
     *
     * @param \OpenAPI\Client\Model\PinRequest[]|null $pins Non standard field. Pins (or markers/annotations) are points of interest
     *
     * @return self
     */
    public function setPins($pins)
    {
        if (is_null($pins)) {
            array_push($this->openAPINullablesSetToNull, "pins");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("pins", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["pins"] = $pins;

        return $this;
    }

    /**
     * Gets temp_id
     *
     * @return int|null
     */
    public function getTempId()
    {
        return $this->container["temp_id"];
    }

    /**
     * Sets temp_id
     *
     * @param int|null $temp_id Only used when using POST on the full-topic route to bind viewpoint with comment
     *
     * @return self
     */
    public function setTempId($temp_id)
    {
        if (is_null($temp_id)) {
            array_push($this->openAPINullablesSetToNull, "temp_id");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("temp_id", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["temp_id"] = $temp_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
