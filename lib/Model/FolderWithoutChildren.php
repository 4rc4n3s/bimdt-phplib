<?php
/**
 * FolderWithoutChildren
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * FolderWithoutChildren Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FolderWithoutChildren implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "FolderWithoutChildren";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "id" => "int",
        "parent_id" => "int",
        "type" => "string",
        "nature" => "string",
        "name" => "string",
        "created_at" => "\DateTime",
        "updated_at" => "\DateTime",
        "created_by" => "User",
        "groups_permissions" => "\OpenAPI\Client\Model\FolderGroupPermission[]",
        "default_permission" => "int",
        "user_permission" => "int",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "id" => null,
        "parent_id" => null,
        "type" => null,
        "nature" => null,
        "name" => null,
        "created_at" => "date-time",
        "updated_at" => "date-time",
        "created_by" => null,
        "groups_permissions" => null,
        "default_permission" => null,
        "user_permission" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "id" => false,
        "parent_id" => true,
        "type" => false,
        "nature" => false,
        "name" => false,
        "created_at" => false,
        "updated_at" => false,
        "created_by" => false,
        "groups_permissions" => false,
        "default_permission" => false,
        "user_permission" => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "id" => "id",
        "parent_id" => "parent_id",
        "type" => "type",
        "nature" => "nature",
        "name" => "name",
        "created_at" => "created_at",
        "updated_at" => "updated_at",
        "created_by" => "created_by",
        "groups_permissions" => "groups_permissions",
        "default_permission" => "default_permission",
        "user_permission" => "user_permission",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "id" => "setId",
        "parent_id" => "setParentId",
        "type" => "setType",
        "nature" => "setNature",
        "name" => "setName",
        "created_at" => "setCreatedAt",
        "updated_at" => "setUpdatedAt",
        "created_by" => "setCreatedBy",
        "groups_permissions" => "setGroupsPermissions",
        "default_permission" => "setDefaultPermission",
        "user_permission" => "setUserPermission",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "id" => "getId",
        "parent_id" => "getParentId",
        "type" => "getType",
        "nature" => "getNature",
        "name" => "getName",
        "created_at" => "getCreatedAt",
        "updated_at" => "getUpdatedAt",
        "created_by" => "getCreatedBy",
        "groups_permissions" => "getGroupsPermissions",
        "default_permission" => "getDefaultPermission",
        "user_permission" => "getUserPermission",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DEFAULT_PERMISSION_1 = 1;
    public const DEFAULT_PERMISSION_50 = 50;
    public const DEFAULT_PERMISSION_100 = 100;
    public const USER_PERMISSION_1 = 1;
    public const USER_PERMISSION_50 = 50;
    public const USER_PERMISSION_100 = 100;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDefaultPermissionAllowableValues()
    {
        return [
            self::DEFAULT_PERMISSION_1,
            self::DEFAULT_PERMISSION_50,
            self::DEFAULT_PERMISSION_100,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserPermissionAllowableValues()
    {
        return [
            self::USER_PERMISSION_1,
            self::USER_PERMISSION_50,
            self::USER_PERMISSION_100,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("id", $data ?? [], null);
        $this->setIfExists("parent_id", $data ?? [], null);
        $this->setIfExists("type", $data ?? [], null);
        $this->setIfExists("nature", $data ?? [], null);
        $this->setIfExists("name", $data ?? [], null);
        $this->setIfExists("created_at", $data ?? [], null);
        $this->setIfExists("updated_at", $data ?? [], null);
        $this->setIfExists("created_by", $data ?? [], null);
        $this->setIfExists("groups_permissions", $data ?? [], null);
        $this->setIfExists("default_permission", $data ?? [], null);
        $this->setIfExists("user_permission", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container["id"] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container["type"] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container["nature"] === null) {
            $invalidProperties[] = "'nature' can't be null";
        }
        if ($this->container["name"] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (mb_strlen($this->container["name"]) > 255) {
            $invalidProperties[] =
                "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ($this->container["created_at"] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container["updated_at"] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container["created_by"] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container["groups_permissions"] === null) {
            $invalidProperties[] = "'groups_permissions' can't be null";
        }
        $allowedValues = $this->getDefaultPermissionAllowableValues();
        if (
            !is_null($this->container["default_permission"]) &&
            !in_array(
                $this->container["default_permission"],
                $allowedValues,
                true
            )
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'default_permission', must be one of '%s'",
                $this->container["default_permission"],
                implode("', '", $allowedValues)
            );
        }

        if (
            !is_null($this->container["default_permission"]) &&
            $this->container["default_permission"] > 32767
        ) {
            $invalidProperties[] =
                "invalid value for 'default_permission', must be smaller than or equal to 32767.";
        }

        if (
            !is_null($this->container["default_permission"]) &&
            $this->container["default_permission"] < -32768
        ) {
            $invalidProperties[] =
                "invalid value for 'default_permission', must be bigger than or equal to -32768.";
        }

        if ($this->container["user_permission"] === null) {
            $invalidProperties[] = "'user_permission' can't be null";
        }
        $allowedValues = $this->getUserPermissionAllowableValues();
        if (
            !is_null($this->container["user_permission"]) &&
            !in_array($this->container["user_permission"], $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'user_permission', must be one of '%s'",
                $this->container["user_permission"],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container["id"];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException(
                "non-nullable id cannot be null"
            );
        }

        $this->container["id"] = $id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container["parent_id"];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, "parent_id");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("parent_id", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["parent_id"] = $parent_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container["type"];
    }

    /**
     * Sets type
     *
     * @param string $type DEPRECATED: Use 'nature' instead. Value is \"Folder\". It is usefull to parse the tree and discriminate folders and files
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException(
                "non-nullable type cannot be null"
            );
        }

        $this->container["type"] = $type;

        return $this;
    }

    /**
     * Gets nature
     *
     * @return string
     */
    public function getNature()
    {
        return $this->container["nature"];
    }

    /**
     * Sets nature
     *
     * @param string $nature Value is \"Folder\". It is usefull to parse the tree and discriminate folders and files
     *
     * @return self
     */
    public function setNature($nature)
    {
        if (is_null($nature)) {
            throw new \InvalidArgumentException(
                "non-nullable nature cannot be null"
            );
        }

        $this->container["nature"] = $nature;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container["name"];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the folder
     *
     * @return self
     */
    public function setName($name)
    {
        if (mb_strlen($name) > 255) {
            throw new \InvalidArgumentException(
                'invalid length for $name when calling FolderWithoutChildren., must be smaller than or equal to 255.'
            );
        }

        if (is_null($name)) {
            throw new \InvalidArgumentException(
                "non-nullable name cannot be null"
            );
        }

        $this->container["name"] = $name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container["created_at"];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException(
                "non-nullable created_at cannot be null"
            );
        }

        $this->container["created_at"] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container["updated_at"];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date of the last update
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException(
                "non-nullable updated_at cannot be null"
            );
        }

        $this->container["updated_at"] = $updated_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return User
     */
    public function getCreatedBy()
    {
        return $this->container["created_by"];
    }

    /**
     * Sets created_by
     *
     * @param User $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException(
                "non-nullable created_by cannot be null"
            );
        }

        $this->container["created_by"] = $created_by;

        return $this;
    }

    /**
     * Gets groups_permissions
     *
     * @return \OpenAPI\Client\Model\FolderGroupPermission[]
     */
    public function getGroupsPermissions()
    {
        return $this->container["groups_permissions"];
    }

    /**
     * Sets groups_permissions
     *
     * @param \OpenAPI\Client\Model\FolderGroupPermission[] $groups_permissions groups_permissions
     *
     * @return self
     */
    public function setGroupsPermissions($groups_permissions)
    {
        if (is_null($groups_permissions)) {
            throw new \InvalidArgumentException(
                "non-nullable groups_permissions cannot be null"
            );
        }

        $this->container["groups_permissions"] = $groups_permissions;

        return $this;
    }

    /**
     * Gets default_permission
     *
     * @return int|null
     */
    public function getDefaultPermission()
    {
        return $this->container["default_permission"];
    }

    /**
     * Sets default_permission
     *
     * @param int|null $default_permission Permission for a Folder
     *
     * @return self
     */
    public function setDefaultPermission($default_permission)
    {
        $allowedValues = $this->getDefaultPermissionAllowableValues();
        if (
            !is_null($default_permission) &&
            !in_array($default_permission, $allowedValues, true)
        ) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'default_permission', must be one of '%s'",
                    $default_permission,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (!is_null($default_permission) && $default_permission > 32767) {
            throw new \InvalidArgumentException(
                'invalid value for $default_permission when calling FolderWithoutChildren., must be smaller than or equal to 32767.'
            );
        }
        if (!is_null($default_permission) && $default_permission < -32768) {
            throw new \InvalidArgumentException(
                'invalid value for $default_permission when calling FolderWithoutChildren., must be bigger than or equal to -32768.'
            );
        }

        if (is_null($default_permission)) {
            throw new \InvalidArgumentException(
                "non-nullable default_permission cannot be null"
            );
        }

        $this->container["default_permission"] = $default_permission;

        return $this;
    }

    /**
     * Gets user_permission
     *
     * @return int
     */
    public function getUserPermission()
    {
        return $this->container["user_permission"];
    }

    /**
     * Sets user_permission
     *
     * @param int $user_permission Aggregate of group user permissions and folder default permission
     *
     * @return self
     */
    public function setUserPermission($user_permission)
    {
        $allowedValues = $this->getUserPermissionAllowableValues();
        if (!in_array($user_permission, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'user_permission', must be one of '%s'",
                    $user_permission,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($user_permission)) {
            throw new \InvalidArgumentException(
                "non-nullable user_permission cannot be null"
            );
        }

        $this->container["user_permission"] = $user_permission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
