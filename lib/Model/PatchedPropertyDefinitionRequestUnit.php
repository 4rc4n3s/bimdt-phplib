<?php
/**
 * PatchedPropertyDefinitionRequestUnit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BIMData API
 *
 * BIMData API is a tool to interact with your models stored on BIMDataâ€™s servers.     Through the API, you can manage your projects, the clouds, upload your IFC files and manage them through endpoints.
 *
 * The version of the OpenAPI document: v1 (v1)
 * Contact: support@bimdata.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use OpenAPI\Client\ObjectSerializer;

/**
 * PatchedPropertyDefinitionRequestUnit Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PatchedPropertyDefinitionRequestUnit implements
    ModelInterface,
    ArrayAccess,
    \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = "PatchedPropertyDefinitionRequest_unit";

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        "type" => "string",
        "name" => "string",
        "unit_type" => "string",
        "prefix" => "string",
        "dimensions" => "float[]",
        "conversion_factor" => "float",
        "conversion_baseunit" => "\OpenAPI\Client\Model\UnitRequest",
        "elements" => "array<string,mixed>",
        "is_default" => "bool",
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        "type" => null,
        "name" => null,
        "unit_type" => null,
        "prefix" => null,
        "dimensions" => "double",
        "conversion_factor" => "double",
        "conversion_baseunit" => null,
        "elements" => null,
        "is_default" => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var boolean[]
     */
    protected static array $openAPINullables = [
        "type" => false,
        "name" => true,
        "unit_type" => true,
        "prefix" => true,
        "dimensions" => true,
        "conversion_factor" => true,
        "conversion_baseunit" => false,
        "elements" => true,
        "is_default" => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var boolean[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(
        array $openAPINullablesSetToNull
    ): void {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        "type" => "type",
        "name" => "name",
        "unit_type" => "unit_type",
        "prefix" => "prefix",
        "dimensions" => "dimensions",
        "conversion_factor" => "conversion_factor",
        "conversion_baseunit" => "conversion_baseunit",
        "elements" => "elements",
        "is_default" => "is_default",
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        "type" => "setType",
        "name" => "setName",
        "unit_type" => "setUnitType",
        "prefix" => "setPrefix",
        "dimensions" => "setDimensions",
        "conversion_factor" => "setConversionFactor",
        "conversion_baseunit" => "setConversionBaseunit",
        "elements" => "setElements",
        "is_default" => "setIsDefault",
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        "type" => "getType",
        "name" => "getName",
        "unit_type" => "getUnitType",
        "prefix" => "getPrefix",
        "dimensions" => "getDimensions",
        "conversion_factor" => "getConversionFactor",
        "conversion_baseunit" => "getConversionBaseunit",
        "elements" => "getElements",
        "is_default" => "getIsDefault",
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists("type", $data ?? [], null);
        $this->setIfExists("name", $data ?? [], null);
        $this->setIfExists("unit_type", $data ?? [], null);
        $this->setIfExists("prefix", $data ?? [], null);
        $this->setIfExists("dimensions", $data ?? [], null);
        $this->setIfExists("conversion_factor", $data ?? [], null);
        $this->setIfExists("conversion_baseunit", $data ?? [], null);
        $this->setIfExists("elements", $data ?? [], null);
        $this->setIfExists("is_default", $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param string $variableName
     * @param array  $fields
     * @param mixed  $defaultValue
     */
    private function setIfExists(
        string $variableName,
        array $fields,
        $defaultValue
    ): void {
        if (
            self::isNullable($variableName) &&
            array_key_exists($variableName, $fields) &&
            is_null($fields[$variableName])
        ) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] =
            $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container["type"] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (mb_strlen($this->container["type"]) < 1) {
            $invalidProperties[] =
                "invalid value for 'type', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container["type"];
    }

    /**
     * Sets type
     *
     * @param string $type IfcDerivedUnit, IfcContextDependentUnit, IfcConversionBasedUnit, IfcSIUnit or IfcMonetaryUnit
     *
     * @return self
     */
    public function setType($type)
    {
        if (mb_strlen($type) < 1) {
            throw new \InvalidArgumentException(
                'invalid length for $type when calling PatchedPropertyDefinitionRequestUnit., must be bigger than or equal to 1.'
            );
        }

        if (is_null($type)) {
            throw new \InvalidArgumentException(
                "non-nullable type cannot be null"
            );
        }

        $this->container["type"] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container["name"];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the unit (ex: DEGREE)
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, "name");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("name", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["name"] = $name;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType()
    {
        return $this->container["unit_type"];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type IFC type of the unit or user defined type (ex: PLANEANGLEUNIT for DEGREE and RADIAN)
     *
     * @return self
     */
    public function setUnitType($unit_type)
    {
        if (is_null($unit_type)) {
            array_push($this->openAPINullablesSetToNull, "unit_type");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("unit_type", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["unit_type"] = $unit_type;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container["prefix"];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix Litteral prefix for scale (ex: MILLI, KILO, etc..)
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            array_push($this->openAPINullablesSetToNull, "prefix");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("prefix", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["prefix"] = $prefix;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return float[]|null
     */
    public function getDimensions()
    {
        return $this->container["dimensions"];
    }

    /**
     * Sets dimensions
     *
     * @param float[]|null $dimensions List of 7 units dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions)
    {
        if (is_null($dimensions)) {
            array_push($this->openAPINullablesSetToNull, "dimensions");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("dimensions", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["dimensions"] = $dimensions;

        return $this;
    }

    /**
     * Gets conversion_factor
     *
     * @return float|null
     */
    public function getConversionFactor()
    {
        return $this->container["conversion_factor"];
    }

    /**
     * Sets conversion_factor
     *
     * @param float|null $conversion_factor Factor of conversion and base unit id (ex: DEGREE from RADIAN with factor 0.0174532925199433)
     *
     * @return self
     */
    public function setConversionFactor($conversion_factor)
    {
        if (is_null($conversion_factor)) {
            array_push($this->openAPINullablesSetToNull, "conversion_factor");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("conversion_factor", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["conversion_factor"] = $conversion_factor;

        return $this;
    }

    /**
     * Gets conversion_baseunit
     *
     * @return \OpenAPI\Client\Model\UnitRequest|null
     */
    public function getConversionBaseunit()
    {
        return $this->container["conversion_baseunit"];
    }

    /**
     * Sets conversion_baseunit
     *
     * @param \OpenAPI\Client\Model\UnitRequest|null $conversion_baseunit conversion_baseunit
     *
     * @return self
     */
    public function setConversionBaseunit($conversion_baseunit)
    {
        if (is_null($conversion_baseunit)) {
            throw new \InvalidArgumentException(
                "non-nullable conversion_baseunit cannot be null"
            );
        }

        $this->container["conversion_baseunit"] = $conversion_baseunit;

        return $this;
    }

    /**
     * Gets elements
     *
     * @return array<string,mixed>|null
     */
    public function getElements()
    {
        return $this->container["elements"];
    }

    /**
     * Sets elements
     *
     * @param array<string,mixed>|null $elements List of constitutive unit elements by id with corresponding exponent (ex: [meterID/1, secondID/-1] for velocity)
     *
     * @return self
     */
    public function setElements($elements)
    {
        if (is_null($elements)) {
            array_push($this->openAPINullablesSetToNull, "elements");
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search("elements", $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container["elements"] = $elements;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container["is_default"];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        if (is_null($is_default)) {
            throw new \InvalidArgumentException(
                "non-nullable is_default cannot be null"
            );
        }

        $this->container["is_default"] = $is_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
